<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AI-Chat</title>
    <url>/posts/AI-Chat/</url>
    <content><![CDATA[<style>
/* iframe 容器样式 */
.iframe-container {
    position: relative;
    width: 100%;
    height: 100vh; /* 使用视口高度 */
    min-height: 400px; /* 最小高度 */
    max-height: 900px; /* 最大高度 */
    margin: 0 auto;
    overflow: hidden;
}
/* iframe 样式 */
.iframe-container iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
    border-radius: 12px; /* 圆角边框 */
    box-shadow: 0 0 20px rgba(255, 0, 85, 0.2); /* 霓虹阴影效果 */
}

/* 响应式设计 */
@media screen and (max-width: 768px) {
    .iframe-container {
        height: calc(100vh - 40px); /* 移动设备减少一些高度 */
        min-height: 300px;
    }
}

@media screen and (max-width: 480px) {
    .iframe-container {
        height: calc(100vh - 20px);
        min-height: 200px;
    }
}
</style>

<!-- iframe 包装器 -->

<div class="iframe-container">
    <iframe src="./gpt4o.html" frameborder="0" allowfullscreen></iframe>
</div>
]]></content>
  </entry>
  <entry>
    <title>CPP_STL</title>
    <url>/posts/CPP-STL/</url>
    <content><![CDATA[<h1 id="C-STL学习"><a href="#C-STL学习" class="headerlink" title="C++STL学习"></a>C++STL学习</h1><p><img src="/posts/CPP-STL/sakura.jpg" alt="sakura" loading="lazy"></p>
<h2 id="容器（Containers）"><a href="#容器（Containers）" class="headerlink" title="容器（Containers）"></a>容器（Containers）</h2><p>C++标准模板库（Standard Template Library，STL）提供了一组通用的容器类，这些容器类可以存储各种类型的数据，并且提供了丰富的操作接口。STL容器主要分为以下几类：</p>
<h3 id="1-序列容器（Sequence-Containers）"><a href="#1-序列容器（Sequence-Containers）" class="headerlink" title="1. 序列容器（Sequence Containers）"></a>1. 序列容器（Sequence Containers）</h3><p>序列容器以线性方式存储元素，并且保持元素的插入顺序。</p>
<h4 id="1-1-std-vector"><a href="#1-1-std-vector" class="headerlink" title="1.1 std::vector"></a>1.1 <code>std::vector</code></h4><ul>
<li><strong>特点</strong>：动态数组，支持随机访问。</li>
<li><strong>操作</strong>：<ul>
<li><code>push_back(value)</code>：在末尾添加元素。</li>
<li><code>pop_back()</code>：删除末尾元素。</li>
<li><code>at(index)</code>：访问指定位置的元素。</li>
<li><code>size()</code>：返回元素个数。</li>
<li><code>clear()</code>：清空容器。</li>
</ul>
</li>
</ul>
<h4 id="1-2-std-deque"><a href="#1-2-std-deque" class="headerlink" title="1.2 std::deque"></a>1.2 <code>std::deque</code></h4><ul>
<li><strong>特点</strong>：双端队列，支持在两端高效插入和删除。</li>
<li><strong>操作</strong>：<ul>
<li><code>push_back(value)</code>：在末尾添加元素。</li>
<li><code>push_front(value)</code>：在开头添加元素。</li>
<li><code>pop_back()</code>：删除末尾元素。</li>
<li><code>pop_front()</code>：删除开头元素。</li>
<li><code>at(index)</code>：访问指定位置的元素。</li>
</ul>
</li>
</ul>
<h4 id="1-3-std-list"><a href="#1-3-std-list" class="headerlink" title="1.3 std::list"></a>1.3 <code>std::list</code></h4><ul>
<li><strong>特点</strong>：双向链表，支持高效的插入和删除操作。</li>
<li><strong>操作</strong>：<ul>
<li><code>push_back(value)</code>：在末尾添加元素。</li>
<li><code>push_front(value)</code>：在开头添加元素。</li>
<li><code>pop_back()</code>：删除末尾元素。</li>
<li><code>pop_front()</code>：删除开头元素。</li>
<li><code>insert(iterator, value)</code>：在指定位置插入元素。</li>
<li><code>erase(iterator)</code>：删除指定位置的元素。</li>
</ul>
</li>
</ul>
<h4 id="1-4-std-forward-list"><a href="#1-4-std-forward-list" class="headerlink" title="1.4 std::forward_list"></a>1.4 <code>std::forward_list</code></h4><ul>
<li><strong>特点</strong>：单向链表，只支持单向遍历。</li>
<li><strong>操作</strong>：<ul>
<li><code>push_front(value)</code>：在开头添加元素。</li>
<li><code>pop_front()</code>：删除开头元素。</li>
<li><code>insert_after(iterator, value)</code>：在指定位置之后插入元素。</li>
<li><code>erase_after(iterator)</code>：删除指定位置之后的元素。</li>
</ul>
</li>
</ul>
<h3 id="2-关联容器（Associative-Containers）"><a href="#2-关联容器（Associative-Containers）" class="headerlink" title="2. 关联容器（Associative Containers）"></a>2. 关联容器（Associative Containers）</h3><p>关联容器以键值对的形式存储元素，并且通常以某种排序方式存储。</p>
<h4 id="2-1-std-set"><a href="#2-1-std-set" class="headerlink" title="2.1 std::set"></a>2.1 <code>std::set</code></h4><ul>
<li><strong>特点</strong>：存储唯一元素，自动排序。</li>
<li><strong>操作</strong>：<ul>
<li><code>insert(value)</code>：插入元素。</li>
<li><code>erase(value)</code>：删除元素。</li>
<li><code>find(value)</code>：查找元素。</li>
<li><code>count(value)</code>：返回元素个数（0或1）。</li>
</ul>
</li>
</ul>
<h4 id="2-2-std-multiset"><a href="#2-2-std-multiset" class="headerlink" title="2.2 std::multiset"></a>2.2 <code>std::multiset</code></h4><ul>
<li><strong>特点</strong>：存储元素，允许重复，自动排序。</li>
<li><strong>操作</strong>：<ul>
<li><code>insert(value)</code>：插入元素。</li>
<li><code>erase(value)</code>：删除所有等于该值的元素。</li>
<li><code>find(value)</code>：查找元素。</li>
<li><code>count(value)</code>：返回元素个数。</li>
</ul>
</li>
</ul>
<h4 id="2-3-std-map"><a href="#2-3-std-map" class="headerlink" title="2.3 std::map"></a>2.3 <code>std::map</code></h4><ul>
<li><strong>特点</strong>：存储键值对，键唯一，自动排序。</li>
<li><strong>操作</strong>：<ul>
<li><code>insert(&#123;key, value&#125;)</code>：插入键值对。</li>
<li><code>erase(key)</code>：删除指定键的元素。</li>
<li><code>find(key)</code>：查找指定键的元素。</li>
<li><code>operator[]</code>：访问或插入指定键的元素。</li>
</ul>
</li>
</ul>
<h4 id="2-4-std-multimap"><a href="#2-4-std-multimap" class="headerlink" title="2.4 std::multimap"></a>2.4 <code>std::multimap</code></h4><ul>
<li><strong>特点</strong>：存储键值对，键可以重复，自动排序。</li>
<li><strong>操作</strong>：<ul>
<li><code>insert(&#123;key, value&#125;)</code>：插入键值对。</li>
<li><code>erase(key)</code>：删除所有指定键的元素。</li>
<li><code>find(key)</code>：查找指定键的元素。</li>
<li><code>count(key)</code>：返回指定键的元素个数。</li>
</ul>
</li>
</ul>
<h3 id="3-无序关联容器（Unordered-Associative-Containers）"><a href="#3-无序关联容器（Unordered-Associative-Containers）" class="headerlink" title="3. 无序关联容器（Unordered Associative Containers）"></a>3. 无序关联容器（Unordered Associative Containers）</h3><p>无序关联容器以哈希表的形式存储元素，不保证元素的顺序。</p>
<h4 id="3-1-std-unordered-set"><a href="#3-1-std-unordered-set" class="headerlink" title="3.1 std::unordered_set"></a>3.1 <code>std::unordered_set</code></h4><ul>
<li><strong>特点</strong>：存储唯一元素，无序。</li>
<li><strong>操作</strong>：<ul>
<li><code>insert(value)</code>：插入元素。</li>
<li><code>erase(value)</code>：删除元素。</li>
<li><code>find(value)</code>：查找元素。</li>
<li><code>count(value)</code>：返回元素个数（0或1）。</li>
</ul>
</li>
</ul>
<h4 id="3-2-std-unordered-multiset"><a href="#3-2-std-unordered-multiset" class="headerlink" title="3.2 std::unordered_multiset"></a>3.2 <code>std::unordered_multiset</code></h4><ul>
<li><strong>特点</strong>：存储元素，允许重复，无序。</li>
<li><strong>操作</strong>：<ul>
<li><code>insert(value)</code>：插入元素。</li>
<li><code>erase(value)</code>：删除所有等于该值的元素。</li>
<li><code>find(value)</code>：查找元素。</li>
<li><code>count(value)</code>：返回元素个数。</li>
</ul>
</li>
</ul>
<h4 id="3-3-std-unordered-map"><a href="#3-3-std-unordered-map" class="headerlink" title="3.3 std::unordered_map"></a>3.3 <code>std::unordered_map</code></h4><ul>
<li><strong>特点</strong>：存储键值对，键唯一，无序。</li>
<li><strong>操作</strong>：<ul>
<li><code>insert(&#123;key, value&#125;)</code>：插入键值对。</li>
<li><code>erase(key)</code>：删除指定键的元素。</li>
<li><code>find(key)</code>：查找指定键的元素。</li>
<li><code>operator[]</code>：访问或插入指定键的元素。</li>
</ul>
</li>
</ul>
<h4 id="3-4-std-unordered-multimap"><a href="#3-4-std-unordered-multimap" class="headerlink" title="3.4 std::unordered_multimap"></a>3.4 <code>std::unordered_multimap</code></h4><ul>
<li><strong>特点</strong>：存储键值对，键可以重复，无序。</li>
<li><strong>操作</strong>：<ul>
<li><code>insert(&#123;key, value&#125;)</code>：插入键值对。</li>
<li><code>erase(key)</code>：删除所有指定键的元素。</li>
<li><code>find(key)</code>：查找指定键的元素。</li>
<li><code>count(key)</code>：返回指定键的元素个数。</li>
</ul>
</li>
</ul>
<h3 id="4-容器适配器（Container-Adapters）"><a href="#4-容器适配器（Container-Adapters）" class="headerlink" title="4. 容器适配器（Container Adapters）"></a>4. 容器适配器（Container Adapters）</h3><p>容器适配器是对基础容器的封装，提供特定的接口。</p>
<h4 id="4-1-std-stack"><a href="#4-1-std-stack" class="headerlink" title="4.1 std::stack"></a>4.1 <code>std::stack</code></h4><ul>
<li><strong>特点</strong>：后进先出（LIFO）的数据结构。</li>
<li><strong>操作</strong>：<ul>
<li><code>push(value)</code>：压入元素。</li>
<li><code>pop()</code>：弹出元素。</li>
<li><code>top()</code>：访问栈顶元素。</li>
<li><code>empty()</code>：判断栈是否为空。</li>
</ul>
</li>
</ul>
<h4 id="4-2-std-queue"><a href="#4-2-std-queue" class="headerlink" title="4.2 std::queue"></a>4.2 <code>std::queue</code></h4><ul>
<li><strong>特点</strong>：先进先出（FIFO）的数据结构。</li>
<li><strong>操作</strong>：<ul>
<li><code>push(value)</code>：入队。</li>
<li><code>pop()</code>：出队。</li>
<li><code>front()</code>：访问队首元素。</li>
<li><code>back()</code>：访问队尾元素。</li>
<li><code>empty()</code>：判断队列是否为空。</li>
</ul>
</li>
</ul>
<h4 id="4-3-std-priority-queue"><a href="#4-3-std-priority-queue" class="headerlink" title="4.3 std::priority_queue"></a>4.3 <code>std::priority_queue</code></h4><ul>
<li><strong>特点</strong>：优先队列，元素按优先级排序。</li>
<li><strong>操作</strong>：<ul>
<li><code>push(value)</code>：插入元素。</li>
<li><code>pop()</code>：弹出优先级最高的元素。</li>
<li><code>top()</code>：访问优先级最高的元素。</li>
<li><code>empty()</code>：判断队列是否为空。</li>
</ul>
</li>
</ul>
<h3 id="5-其他容器"><a href="#5-其他容器" class="headerlink" title="5. 其他容器"></a>5. 其他容器</h3><h4 id="5-1-std-array"><a href="#5-1-std-array" class="headerlink" title="5.1 std::array"></a>5.1 <code>std::array</code></h4><ul>
<li><strong>特点</strong>：固定大小的数组，支持随机访问。</li>
<li><strong>操作</strong>：<ul>
<li><code>at(index)</code>：访问指定位置的元素。</li>
<li><code>size()</code>：返回元素个数。</li>
<li><code>fill(value)</code>：用指定值填充数组。</li>
</ul>
</li>
</ul>
<h4 id="5-2-std-span"><a href="#5-2-std-span" class="headerlink" title="5.2 std::span"></a>5.2 <code>std::span</code></h4><ul>
<li><strong>特点</strong>：轻量级的非拥有视图，表示一段连续的内存区域。</li>
<li><strong>操作</strong>：<ul>
<li><code>size()</code>：返回元素个数。</li>
<li><code>data()</code>：返回指向内存区域的指针。</li>
<li><code>subspan(offset, count)</code>：返回子视图。</li>
</ul>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>STL容器提供了丰富的数据结构和操作接口，能够满足各种不同的需求。选择合适的容器可以显著提高代码的效率和可读性。在使用时，需要根据具体的需求选择合适的容器类型，并注意不同容器的时间复杂度和空间复杂度。</p>
<h2 id="算法（Algorithms）"><a href="#算法（Algorithms）" class="headerlink" title="算法（Algorithms）"></a>算法（Algorithms）</h2><p>C++标准模板库（STL）不仅提供了丰富的容器类，还提供了一组强大的算法，这些算法可以应用于各种容器，极大地简化了开发者的编程工作。STL算法主要分为以下几类：</p>
<h3 id="1-非修改序列算法（Non-modifying-Sequence-Operations）"><a href="#1-非修改序列算法（Non-modifying-Sequence-Operations）" class="headerlink" title="1. 非修改序列算法（Non-modifying Sequence Operations）"></a>1. 非修改序列算法（Non-modifying Sequence Operations）</h3><p>这类算法对序列进行操作，但不修改序列的内容。</p>
<h4 id="1-1-std-find"><a href="#1-1-std-find" class="headerlink" title="1.1 std::find"></a>1.1 <code>std::find</code></h4><ul>
<li><strong>功能</strong>：在序列中查找指定值。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> it = std::<span class="built_in">find</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (it != vec.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Found &quot;</span> &lt;&lt; *it &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-2-std-count"><a href="#1-2-std-count" class="headerlink" title="1.2 std::count"></a>1.2 <code>std::count</code></h4><ul>
<li><strong>功能</strong>：统计序列中指定值的个数。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> count = std::<span class="built_in">count</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="number">3</span>);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Count of 3: &quot;</span> &lt;&lt; count &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-3-std-for-each"><a href="#1-3-std-for-each" class="headerlink" title="1.3 std::for_each"></a>1.3 <code>std::for_each</code></h4><ul>
<li><strong>功能</strong>：对序列中的每个元素执行指定操作。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">std::for_each(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), [](<span class="type">int</span> &amp;n)&#123; n *= <span class="number">2</span>; &#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-修改序列算法（Modifying-Sequence-Operations）"><a href="#2-修改序列算法（Modifying-Sequence-Operations）" class="headerlink" title="2. 修改序列算法（Modifying Sequence Operations）"></a>2. 修改序列算法（Modifying Sequence Operations）</h3><p>这类算法会修改序列的内容。</p>
<h4 id="2-1-std-copy"><a href="#2-1-std-copy" class="headerlink" title="2.1 std::copy"></a>2.1 <code>std::copy</code></h4><ul>
<li><strong>功能</strong>：将一个序列的内容复制到另一个序列。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">vec2</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">std::<span class="built_in">copy</span>(vec<span class="number">1.</span><span class="built_in">begin</span>(), vec<span class="number">1.</span><span class="built_in">end</span>(), vec<span class="number">2.</span><span class="built_in">begin</span>());</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-2-std-transform"><a href="#2-2-std-transform" class="headerlink" title="2.2 std::transform"></a>2.2 <code>std::transform</code></h4><ul>
<li><strong>功能</strong>：对序列中的每个元素执行指定操作，并将结果存储到另一个序列。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">vec2</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">std::<span class="built_in">transform</span>(vec<span class="number">1.</span><span class="built_in">begin</span>(), vec<span class="number">1.</span><span class="built_in">end</span>(), vec<span class="number">2.</span><span class="built_in">begin</span>(), [](<span class="type">int</span> n)&#123; <span class="keyword">return</span> n * <span class="number">2</span>; &#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-3-std-replace"><a href="#2-3-std-replace" class="headerlink" title="2.3 std::replace"></a>2.3 <code>std::replace</code></h4><ul>
<li><strong>功能</strong>：将序列中所有等于指定值的元素替换为另一个值。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">std::<span class="built_in">replace</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="number">3</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-排序和相关算法（Sorting-and-Related-Operations）"><a href="#3-排序和相关算法（Sorting-and-Related-Operations）" class="headerlink" title="3. 排序和相关算法（Sorting and Related Operations）"></a>3. 排序和相关算法（Sorting and Related Operations）</h3><p>这类算法对序列进行排序或相关操作。</p>
<h4 id="3-1-std-sort"><a href="#3-1-std-sort" class="headerlink" title="3.1 std::sort"></a>3.1 <code>std::sort</code></h4><ul>
<li><strong>功能</strong>：对序列进行排序。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line">std::<span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-2-std-stable-sort"><a href="#3-2-std-stable-sort" class="headerlink" title="3.2 std::stable_sort"></a>3.2 <code>std::stable_sort</code></h4><ul>
<li><strong>功能</strong>：对序列进行稳定排序，保持相等元素的相对顺序。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line">std::<span class="built_in">stable_sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-3-std-binary-search"><a href="#3-3-std-binary-search" class="headerlink" title="3.3 std::binary_search"></a>3.3 <code>std::binary_search</code></h4><ul>
<li><strong>功能</strong>：在已排序的序列中查找指定值。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">bool</span> found = std::<span class="built_in">binary_search</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-数值算法（Numeric-Operations）"><a href="#4-数值算法（Numeric-Operations）" class="headerlink" title="4. 数值算法（Numeric Operations）"></a>4. 数值算法（Numeric Operations）</h3><p>这类算法主要用于数值计算。</p>
<h4 id="4-1-std-accumulate"><a href="#4-1-std-accumulate" class="headerlink" title="4.1 std::accumulate"></a>4.1 <code>std::accumulate</code></h4><ul>
<li><strong>功能</strong>：计算序列中元素的累加和。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> sum = std::<span class="built_in">accumulate</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-2-std-inner-product"><a href="#4-2-std-inner-product" class="headerlink" title="4.2 std::inner_product"></a>4.2 <code>std::inner_product</code></h4><ul>
<li><strong>功能</strong>：计算两个序列的内积。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec2 = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="type">int</span> product = std::<span class="built_in">inner_product</span>(vec<span class="number">1.</span><span class="built_in">begin</span>(), vec<span class="number">1.</span><span class="built_in">end</span>(), vec<span class="number">2.</span><span class="built_in">begin</span>(), <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-堆算法（Heap-Operations）"><a href="#5-堆算法（Heap-Operations）" class="headerlink" title="5. 堆算法（Heap Operations）"></a>5. 堆算法（Heap Operations）</h3><p>这类算法用于操作堆结构。</p>
<h4 id="5-1-std-make-heap"><a href="#5-1-std-make-heap" class="headerlink" title="5.1 std::make_heap"></a>5.1 <code>std::make_heap</code></h4><ul>
<li><strong>功能</strong>：将序列转换为堆。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">std::<span class="built_in">make_heap</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-2-std-pop-heap"><a href="#5-2-std-pop-heap" class="headerlink" title="5.2 std::pop_heap"></a>5.2 <code>std::pop_heap</code></h4><ul>
<li><strong>功能</strong>：从堆中弹出最大元素。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::<span class="built_in">pop_heap</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">vec.<span class="built_in">pop_back</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-3-std-push-heap"><a href="#5-3-std-push-heap" class="headerlink" title="5.3 std::push_heap"></a>5.3 <code>std::push_heap</code></h4><ul>
<li><strong>功能</strong>：将新元素插入堆中。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line">vec.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">std::<span class="built_in">push_heap</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-最小-最大算法（Minimum-Maximum-Operations）"><a href="#6-最小-最大算法（Minimum-Maximum-Operations）" class="headerlink" title="6. 最小&#x2F;最大算法（Minimum&#x2F;Maximum Operations）"></a>6. 最小&#x2F;最大算法（Minimum&#x2F;Maximum Operations）</h3><p>这类算法用于查找序列中的最小值或最大值。</p>
<h4 id="6-1-std-min-element"><a href="#6-1-std-min-element" class="headerlink" title="6.1 std::min_element"></a>6.1 <code>std::min_element</code></h4><ul>
<li><strong>功能</strong>：查找序列中的最小元素。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> min_it = std::<span class="built_in">min_element</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-2-std-max-element"><a href="#6-2-std-max-element" class="headerlink" title="6.2 std::max_element"></a>6.2 <code>std::max_element</code></h4><ul>
<li><strong>功能</strong>：查找序列中的最大元素。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> max_it = std::<span class="built_in">max_element</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-其他算法"><a href="#7-其他算法" class="headerlink" title="7. 其他算法"></a>7. 其他算法</h3><h4 id="7-1-std-reverse"><a href="#7-1-std-reverse" class="headerlink" title="7.1 std::reverse"></a>7.1 <code>std::reverse</code></h4><ul>
<li><strong>功能</strong>：反转序列中的元素。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">std::<span class="built_in">reverse</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="7-2-std-unique"><a href="#7-2-std-unique" class="headerlink" title="7.2 std::unique"></a>7.2 <code>std::unique</code></h4><ul>
<li><strong>功能</strong>：移除序列中的连续重复元素。</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> last = std::<span class="built_in">unique</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">vec.<span class="built_in">erase</span>(last, vec.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>STL算法提供了丰富的功能，涵盖了从简单的查找、排序到复杂的数值计算和堆操作。这些算法通常具有较高的效率，并且可以与各种容器配合使用，极大地提高了C++程序的开发效率和代码质量。在使用时，需要根据具体的需求选择合适的算法，并注意算法的复杂度和适用条件。</p>
<h2 id="迭代器（Iterators）"><a href="#迭代器（Iterators）" class="headerlink" title="迭代器（Iterators）"></a>迭代器（Iterators）</h2><p>C++标准模板库（STL）中的迭代器（Iterators）是一种类似于指针的对象，用于遍历容器中的元素。迭代器提供了一种统一的方式来访问和操作容器中的数据，而不需要关心容器的具体实现细节。迭代器的主要作用是解耦算法和容器，使得算法可以独立于容器类型进行设计和实现。</p>
<h3 id="迭代器的分类"><a href="#迭代器的分类" class="headerlink" title="迭代器的分类"></a>迭代器的分类</h3><p>根据功能和使用场景，迭代器可以分为以下几类：</p>
<h4 id="1-输入迭代器（Input-Iterator）"><a href="#1-输入迭代器（Input-Iterator）" class="headerlink" title="1. 输入迭代器（Input Iterator）"></a>1. 输入迭代器（Input Iterator）</h4><ul>
<li><strong>特点</strong>：只读，单向移动，每次只能读取一次。</li>
<li><strong>操作</strong>：<ul>
<li><code>operator*</code>：解引用，获取当前元素。</li>
<li><code>operator++</code>：前移迭代器。</li>
<li><code>operator==</code> 和 <code>operator!=</code>：比较两个迭代器是否相等。</li>
</ul>
</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">std::istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">input</span><span class="params">(std::cin)</span></span>;</span><br><span class="line">std::istream_iterator&lt;<span class="type">int</span>&gt; end;</span><br><span class="line"><span class="keyword">while</span> (input != end) &#123;</span><br><span class="line">    std::cout &lt;&lt; *input &lt;&lt; std::endl;</span><br><span class="line">    ++input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-输出迭代器（Output-Iterator）"><a href="#2-输出迭代器（Output-Iterator）" class="headerlink" title="2. 输出迭代器（Output Iterator）"></a>2. 输出迭代器（Output Iterator）</h4><ul>
<li><strong>特点</strong>：只写，单向移动，每次只能写入一次。</li>
<li><strong>操作</strong>：<ul>
<li><code>operator*</code>：解引用，用于写入数据。</li>
<li><code>operator++</code>：前移迭代器。</li>
</ul>
</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="function">std::ostream_iterator&lt;<span class="type">int</span>&gt; <span class="title">output</span><span class="params">(std::cout, <span class="string">&quot; &quot;</span>)</span></span>;</span><br><span class="line">std::<span class="built_in">copy</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), output);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-前向迭代器（Forward-Iterator）"><a href="#3-前向迭代器（Forward-Iterator）" class="headerlink" title="3. 前向迭代器（Forward Iterator）"></a>3. 前向迭代器（Forward Iterator）</h4><ul>
<li><strong>特点</strong>：可读可写，单向移动，支持多次读写。</li>
<li><strong>操作</strong>：<ul>
<li><code>operator*</code>：解引用，获取或设置当前元素。</li>
<li><code>operator++</code>：前移迭代器。</li>
<li><code>operator==</code> 和 <code>operator!=</code>：比较两个迭代器是否相等。</li>
</ul>
</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::forward_list&lt;<span class="type">int</span>&gt; flist = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::forward_list&lt;<span class="type">int</span>&gt;::iterator it = flist.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (it != flist.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    std::cout &lt;&lt; *it &lt;&lt; std::endl;</span><br><span class="line">    ++it;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-双向迭代器（Bidirectional-Iterator）"><a href="#4-双向迭代器（Bidirectional-Iterator）" class="headerlink" title="4. 双向迭代器（Bidirectional Iterator）"></a>4. 双向迭代器（Bidirectional Iterator）</h4><ul>
<li><strong>特点</strong>：可读可写，双向移动，支持多次读写。</li>
<li><strong>操作</strong>：<ul>
<li><code>operator*</code>：解引用，获取或设置当前元素。</li>
<li><code>operator++</code>：前移迭代器。</li>
<li><code>operator--</code>：后移迭代器。</li>
<li><code>operator==</code> 和 <code>operator!=</code>：比较两个迭代器是否相等。</li>
</ul>
</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::list&lt;<span class="type">int</span>&gt; lst = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::list&lt;<span class="type">int</span>&gt;::iterator it = lst.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (it != lst.<span class="built_in">end</span>()) &#123;</span><br><span class="line">    std::cout &lt;&lt; *it &lt;&lt; std::endl;</span><br><span class="line">    ++it;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-随机访问迭代器（Random-Access-Iterator）"><a href="#5-随机访问迭代器（Random-Access-Iterator）" class="headerlink" title="5. 随机访问迭代器（Random Access Iterator）"></a>5. 随机访问迭代器（Random Access Iterator）</h4><ul>
<li><strong>特点</strong>：可读可写，支持随机访问，支持多次读写。</li>
<li><strong>操作</strong>：<ul>
<li><code>operator*</code>：解引用，获取或设置当前元素。</li>
<li><code>operator++</code> 和 <code>operator--</code>：前移和后移迭代器。</li>
<li><code>operator+</code> 和 <code>operator-</code>：迭代器加减整数。</li>
<li><code>operator+=</code> 和 <code>operator-=</code>：迭代器加减等于整数。</li>
<li><code>operator[]</code>：随机访问元素。</li>
<li><code>operator&lt;</code>、<code>operator&gt;</code>、<code>operator&lt;=</code>、<code>operator&gt;=</code>：比较两个迭代器。</li>
</ul>
</li>
<li><strong>示例</strong>：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;::iterator it = vec.<span class="built_in">begin</span>();</span><br><span class="line">std::cout &lt;&lt; *(it + <span class="number">1</span>) &lt;&lt; std::endl; <span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="迭代器的使用"><a href="#迭代器的使用" class="headerlink" title="迭代器的使用"></a>迭代器的使用</h3><p>迭代器通常用于以下场景：</p>
<h4 id="1-遍历容器"><a href="#1-遍历容器" class="headerlink" title="1. 遍历容器"></a>1. 遍历容器</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (std::vector&lt;<span class="type">int</span>&gt;::iterator it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">    std::cout &lt;&lt; *it &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-算法操作"><a href="#2-算法操作" class="headerlink" title="2. 算法操作"></a>2. 算法操作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">std::<span class="built_in">transform</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), vec.<span class="built_in">begin</span>(), [](<span class="type">int</span> n)&#123; <span class="keyword">return</span> n * <span class="number">2</span>; &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="3-插入和删除元素"><a href="#3-插入和删除元素" class="headerlink" title="3. 插入和删除元素"></a>3. 插入和删除元素</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::list&lt;<span class="type">int</span>&gt; lst = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">std::list&lt;<span class="type">int</span>&gt;::iterator it = lst.<span class="built_in">begin</span>();</span><br><span class="line">++it; <span class="comment">// 移动到第二个元素</span></span><br><span class="line">lst.<span class="built_in">insert</span>(it, <span class="number">10</span>); <span class="comment">// 在第二个元素前插入10</span></span><br><span class="line">lst.<span class="built_in">erase</span>(it); <span class="comment">// 删除第二个元素</span></span><br></pre></td></tr></table></figure>

<h3 id="迭代器的失效"><a href="#迭代器的失效" class="headerlink" title="迭代器的失效"></a>迭代器的失效</h3><p>在使用迭代器时，需要注意迭代器可能会失效的情况，特别是在插入或删除元素后。不同的容器和操作可能导致迭代器失效的情况不同。</p>
<h4 id="1-std-vector"><a href="#1-std-vector" class="headerlink" title="1. std::vector"></a>1. <code>std::vector</code></h4><ul>
<li><strong>插入元素</strong>：在插入元素后，插入点之后的所有迭代器失效。</li>
<li><strong>删除元素</strong>：被删除元素的迭代器失效。</li>
</ul>
<h4 id="2-std-list"><a href="#2-std-list" class="headerlink" title="2. std::list"></a>2. <code>std::list</code></h4><ul>
<li><strong>插入元素</strong>：插入操作不会使任何迭代器失效。</li>
<li><strong>删除元素</strong>：只有被删除元素的迭代器失效。</li>
</ul>
<h4 id="3-std-map-和-std-set"><a href="#3-std-map-和-std-set" class="headerlink" title="3. std::map 和 std::set"></a>3. <code>std::map</code> 和 <code>std::set</code></h4><ul>
<li><strong>插入元素</strong>：插入操作不会使任何迭代器失效。</li>
<li><strong>删除元素</strong>：只有被删除元素的迭代器失效。</li>
</ul>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>迭代器是STL中非常重要的概念，它提供了一种统一的方式来访问和操作容器中的数据。通过使用迭代器，算法可以独立于容器类型进行设计和实现，从而提高了代码的复用性和可维护性。在使用迭代器时，需要注意迭代器的分类、操作和可能的失效情况，以确保代码的正确性和效率。</p>
<h2 id="函数对象（Function-Objects）"><a href="#函数对象（Function-Objects）" class="headerlink" title="函数对象（Function Objects）"></a>函数对象（Function Objects）</h2><p>C++标准模板库（STL）中的函数对象（Function Objects），也称为仿函数（Functors），是一种可以像函数一样被调用的对象。函数对象通常是重载了函数调用运算符 <code>operator()</code> 的类对象。STL中的许多算法和容器都支持使用函数对象作为参数，从而提供了极大的灵活性和可扩展性。</p>
<h3 id="函数对象的基本概念"><a href="#函数对象的基本概念" class="headerlink" title="函数对象的基本概念"></a>函数对象的基本概念</h3><p>函数对象的核心思想是通过重载 <code>operator()</code> 来实现一个可以像函数一样被调用的对象。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyFunctor</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyFunctor square;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">square</span>(<span class="number">5</span>) &lt;&lt; std::endl; <span class="comment">// 输出 25</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>MyFunctor</code> 是一个函数对象，它重载了 <code>operator()</code>，使得 <code>square(5)</code> 可以像函数调用一样使用。</p>
<h3 id="函数对象的优势"><a href="#函数对象的优势" class="headerlink" title="函数对象的优势"></a>函数对象的优势</h3><p>函数对象相比于普通函数有以下优势：</p>
<ol>
<li><strong>状态保持</strong>：函数对象可以保存状态，而普通函数不能。</li>
<li><strong>类型安全</strong>：函数对象可以利用C++的类型系统，提供更强的类型检查。</li>
<li><strong>灵活性</strong>：函数对象可以被继承和扩展，从而提供更多的功能。</li>
</ol>
<h3 id="STL中的函数对象"><a href="#STL中的函数对象" class="headerlink" title="STL中的函数对象"></a>STL中的函数对象</h3><p>STL提供了一些预定义的函数对象，这些函数对象通常用于算法的参数。这些函数对象定义在 <code>&lt;functional&gt;</code> 头文件中。</p>
<h4 id="1-算术函数对象"><a href="#1-算术函数对象" class="headerlink" title="1. 算术函数对象"></a>1. 算术函数对象</h4><ul>
<li><code>std::plus&lt;T&gt;</code>：执行加法操作。</li>
<li><code>std::minus&lt;T&gt;</code>：执行减法操作。</li>
<li><code>std::multiplies&lt;T&gt;</code>：执行乘法操作。</li>
<li><code>std::divides&lt;T&gt;</code>：执行除法操作。</li>
<li><code>std::modulus&lt;T&gt;</code>：执行取模操作。</li>
<li><code>std::negate&lt;T&gt;</code>：执行取反操作。</li>
</ul>
<p><strong>示例</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::plus&lt;<span class="type">int</span>&gt; add;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">add</span>(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; std::endl; <span class="comment">// 输出 7</span></span><br><span class="line"></span><br><span class="line">    std::multiplies&lt;<span class="type">int</span>&gt; multiply;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">multiply</span>(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; std::endl; <span class="comment">// 输出 12</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-比较函数对象"><a href="#2-比较函数对象" class="headerlink" title="2. 比较函数对象"></a>2. 比较函数对象</h4><ul>
<li><code>std::equal_to&lt;T&gt;</code>：判断两个值是否相等。</li>
<li><code>std::not_equal_to&lt;T&gt;</code>：判断两个值是否不相等。</li>
<li><code>std::greater&lt;T&gt;</code>：判断第一个值是否大于第二个值。</li>
<li><code>std::less&lt;T&gt;</code>：判断第一个值是否小于第二个值。</li>
<li><code>std::greater_equal&lt;T&gt;</code>：判断第一个值是否大于或等于第二个值。</li>
<li><code>std::less_equal&lt;T&gt;</code>：判断第一个值是否小于或等于第二个值。</li>
</ul>
<p><strong>示例</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::greater&lt;<span class="type">int</span>&gt; greater;</span><br><span class="line">    std::cout &lt;&lt; std::boolalpha &lt;&lt; <span class="built_in">greater</span>(<span class="number">4</span>, <span class="number">3</span>) &lt;&lt; std::endl; <span class="comment">// 输出 true</span></span><br><span class="line"></span><br><span class="line">    std::less&lt;<span class="type">int</span>&gt; less;</span><br><span class="line">    std::cout &lt;&lt; std::boolalpha &lt;&lt; <span class="built_in">less</span>(<span class="number">4</span>, <span class="number">3</span>) &lt;&lt; std::endl; <span class="comment">// 输出 false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-逻辑函数对象"><a href="#3-逻辑函数对象" class="headerlink" title="3. 逻辑函数对象"></a>3. 逻辑函数对象</h4><ul>
<li><code>std::logical_and&lt;T&gt;</code>：执行逻辑与操作。</li>
<li><code>std::logical_or&lt;T&gt;</code>：执行逻辑或操作。</li>
<li><code>std::logical_not&lt;T&gt;</code>：执行逻辑非操作。</li>
</ul>
<p><strong>示例</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::logical_and&lt;<span class="type">bool</span>&gt; logical_and;</span><br><span class="line">    std::cout &lt;&lt; std::boolalpha &lt;&lt; <span class="built_in">logical_and</span>(<span class="literal">true</span>, <span class="literal">false</span>) &lt;&lt; std::endl; <span class="comment">// 输出 false</span></span><br><span class="line"></span><br><span class="line">    std::logical_or&lt;<span class="type">bool</span>&gt; logical_or;</span><br><span class="line">    std::cout &lt;&lt; std::boolalpha &lt;&lt; <span class="built_in">logical_or</span>(<span class="literal">true</span>, <span class="literal">false</span>) &lt;&lt; std::endl; <span class="comment">// 输出 true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义函数对象"><a href="#自定义函数对象" class="headerlink" title="自定义函数对象"></a>自定义函数对象</h3><p>除了使用STL提供的预定义函数对象，开发者还可以自定义函数对象。自定义函数对象通常需要重载 <code>operator()</code>，并且可以根据需要添加成员变量来保存状态。</p>
<p><strong>示例</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreaterThan</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GreaterThan</span>(<span class="type">int</span> threshold) : <span class="built_in">threshold_</span>(threshold) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> value)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt; threshold_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> threshold_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="function">GreaterThan <span class="title">greater_than_3</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> it = std::<span class="built_in">find_if</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), greater_than_3);</span><br><span class="line">    <span class="keyword">if</span> (it != vec.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Found: &quot;</span> &lt;&lt; *it &lt;&lt; std::endl; <span class="comment">// 输出 Found: 4</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>GreaterThan</code> 是一个自定义的函数对象，它保存了一个阈值 <code>threshold_</code>，并在 <code>operator()</code> 中判断传入的值是否大于该阈值。</p>
<h3 id="函数对象适配器"><a href="#函数对象适配器" class="headerlink" title="函数对象适配器"></a>函数对象适配器</h3><p>STL还提供了一些函数对象适配器（Function Object Adapters），用于修改或组合现有的函数对象。常用的适配器包括：</p>
<h4 id="1-std-bind"><a href="#1-std-bind" class="headerlink" title="1. std::bind"></a>1. <code>std::bind</code></h4><p><code>std::bind</code> 用于将函数或函数对象绑定到特定的参数上，生成一个新的函数对象。</p>
<p><strong>示例</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; a + b &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> print_5_plus = std::<span class="built_in">bind</span>(print_sum, <span class="number">5</span>, std::placeholders::_1);</span><br><span class="line">    <span class="built_in">print_5_plus</span>(<span class="number">3</span>); <span class="comment">// 输出 8</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>std::bind</code> 将 <code>print_sum</code> 函数绑定到第一个参数 <code>5</code> 上，生成一个新的函数对象 <code>print_5_plus</code>，该函数对象只需要一个参数。</p>
<h4 id="2-std-mem-fn"><a href="#2-std-mem-fn" class="headerlink" title="2. std::mem_fn"></a>2. <code>std::mem_fn</code></h4><p><code>std::mem_fn</code> 用于将成员函数转换为函数对象。</p>
<p><strong>示例</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj;</span><br><span class="line">    <span class="keyword">auto</span> print_func = std::<span class="built_in">mem_fn</span>(&amp;MyClass::print);</span><br><span class="line">    <span class="built_in">print_func</span>(obj); <span class="comment">// 输出 Hello, World!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>std::mem_fn</code> 将 <code>MyClass</code> 的成员函数 <code>print</code> 转换为一个函数对象 <code>print_func</code>，该函数对象可以接受 <code>MyClass</code> 对象作为参数。</p>
<h4 id="3-std-not1-和-std-not2"><a href="#3-std-not1-和-std-not2" class="headerlink" title="3. std::not1 和 std::not2"></a>3. <code>std::not1</code> 和 <code>std::not2</code></h4><p><code>std::not1</code> 和 <code>std::not2</code> 用于对一元和二元函数对象取反。</p>
<p><strong>示例</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    std::less&lt;<span class="type">int</span>&gt; less;</span><br><span class="line">    <span class="keyword">auto</span> greater_or_equal = std::<span class="built_in">not1</span>(std::<span class="built_in">bind2nd</span>(less, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> it = std::<span class="built_in">find_if</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), greater_or_equal);</span><br><span class="line">    <span class="keyword">if</span> (it != vec.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Found: &quot;</span> &lt;&lt; *it &lt;&lt; std::endl; <span class="comment">// 输出 Found: 1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>std::not1</code> 对 <code>std::less&lt;int&gt;</code> 取反，生成一个新的函数对象 <code>greater_or_equal</code>，用于查找第一个小于等于 3 的元素。</p>
<h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>函数对象是STL中非常重要的概念，它提供了一种灵活的方式来扩展和定制算法和容器的行为。通过使用函数对象，开发者可以实现状态保持、类型安全和灵活性等优势。STL提供了丰富的预定义函数对象和适配器，同时也支持自定义函数对象，从而满足各种不同的需求。在使用函数对象时，需要注意其特性和适用场景，以确保代码的正确性和效率。</p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础与进阶</title>
    <url>/posts/C_PLUS-%E5%9F%BA%E7%A1%80%E4%B8%8E%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<p><img src="/posts/C_PLUS-%E5%9F%BA%E7%A1%80%E4%B8%8E%E8%BF%9B%E9%98%B6/elaina1.jpg" alt="elaina1" loading="lazy"></p>
<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><h3 id="1-起源"><a href="#1-起源" class="headerlink" title="1. 起源"></a>1. 起源</h3><p>C++ 是由丹麦计算机科学家 Bjarne Stroustrup 在 1979 年开始设计的。当时，Stroustrup 在贝尔实验室工作，他希望扩展 C 语言，使其支持面向对象编程（OOP）。最初，这个项目被称为“带类的 C”（C with Classes）。</p>
<h3 id="2-发展"><a href="#2-发展" class="headerlink" title="2. 发展"></a>2. 发展</h3><ul>
<li><strong>1983 年</strong>：语言正式命名为 C++，并引入了许多新特性，如虚函数、运算符重载、引用、常量等。</li>
<li><strong>1985 年</strong>：第一本关于 C++ 的书《The C++ Programming Language》由 Stroustrup 出版。</li>
<li><strong>1989 年</strong>：C++ 2.0 发布，引入了多重继承、抽象类、静态成员函数、保护成员等特性。</li>
<li><strong>1998 年</strong>：C++ 标准（C++98）发布，这是第一个正式的 C++ 标准，引入了标准模板库（STL）。</li>
<li><strong>2003 年</strong>：C++03 发布，主要是对 C++98 的修正和改进。</li>
<li><strong>2011 年</strong>：C++11 发布，引入了大量新特性，如 lambda 表达式、智能指针、多线程支持等。</li>
<li><strong>2014 年</strong>：C++14 发布，主要是对 C++11 的改进和扩展。</li>
<li><strong>2017 年</strong>：C++17 发布，引入了文件系统库、并行算法等新特性。</li>
<li><strong>2020 年</strong>：C++20 发布，引入了模块、协程、概念等新特性。</li>
</ul>
<h3 id="C-的特性"><a href="#C-的特性" class="headerlink" title="C++ 的特性"></a>C++ 的特性</h3><p>C++ 是一种多范式编程语言，支持多种编程范式，包括过程式编程、面向对象编程、泛型编程和函数式编程。以下是 C++ 的主要特性：</p>
<h4 id="1-面向对象编程（OOP）"><a href="#1-面向对象编程（OOP）" class="headerlink" title="1. 面向对象编程（OOP）"></a>1. 面向对象编程（OOP）</h4><ul>
<li><strong>类和对象</strong>：C++ 支持类和对象的概念，允许开发者通过封装、继承和多态来组织代码。</li>
<li><strong>封装</strong>：通过访问修饰符（<code>public</code>、<code>private</code>、<code>protected</code>）控制成员的访问权限。</li>
<li><strong>继承</strong>：允许一个类继承另一个类的属性和方法。</li>
<li><strong>多态</strong>：通过虚函数和重载实现多态性。</li>
</ul>
<h4 id="2-泛型编程"><a href="#2-泛型编程" class="headerlink" title="2. 泛型编程"></a>2. 泛型编程</h4><ul>
<li><strong>模板</strong>：C++ 支持模板，允许编写通用的代码，适用于多种数据类型。</li>
<li><strong>标准模板库（STL）</strong>：提供了丰富的容器、算法和迭代器，极大地简化了编程。</li>
</ul>
<h4 id="3-高效性"><a href="#3-高效性" class="headerlink" title="3. 高效性"></a>3. 高效性</h4><ul>
<li><strong>底层访问</strong>：C++ 提供了对底层硬件的直接访问，允许开发者编写高效的代码。</li>
<li><strong>内存管理</strong>：C++ 允许手动管理内存，通过指针和动态内存分配（<code>new</code> 和 <code>delete</code>）来控制内存使用。</li>
</ul>
<h4 id="4-标准库"><a href="#4-标准库" class="headerlink" title="4. 标准库"></a>4. 标准库</h4><ul>
<li><strong>输入输出</strong>：提供了 <code>iostream</code> 库，用于处理输入输出操作。</li>
<li><strong>字符串处理</strong>：提供了 <code>string</code> 类，用于字符串处理。</li>
<li><strong>容器</strong>：提供了多种容器，如 <code>vector</code>、<code>list</code>、<code>map</code>、<code>set</code> 等。</li>
<li><strong>算法</strong>：提供了丰富的算法，如排序、查找、遍历等。</li>
</ul>
<h4 id="5-异常处理"><a href="#5-异常处理" class="headerlink" title="5. 异常处理"></a>5. 异常处理</h4><ul>
<li><strong>异常处理机制</strong>：C++ 支持异常处理，用于处理程序运行时可能出现的错误。</li>
</ul>
<h4 id="6-多线程支持"><a href="#6-多线程支持" class="headerlink" title="6. 多线程支持"></a>6. 多线程支持</h4><ul>
<li><strong>多线程库</strong>：C++11 引入了标准的多线程库，提供了线程、互斥锁、条件变量等工具。</li>
</ul>
<h4 id="7-智能指针"><a href="#7-智能指针" class="headerlink" title="7. 智能指针"></a>7. 智能指针</h4><ul>
<li><strong>智能指针</strong>：C++11 引入了智能指针（<code>unique_ptr</code>、<code>shared_ptr</code>、<code>weak_ptr</code>），用于自动管理动态内存，避免内存泄漏。</li>
</ul>
<h4 id="8-元编程"><a href="#8-元编程" class="headerlink" title="8. 元编程"></a>8. 元编程</h4><ul>
<li><strong>模板元编程</strong>：C++ 支持模板元编程，允许编写代码生成代码。</li>
</ul>
<h3 id="C-的应用领域"><a href="#C-的应用领域" class="headerlink" title="C++ 的应用领域"></a>C++ 的应用领域</h3><p>C++ 是一种功能强大且灵活的编程语言，广泛应用于多个领域。以下是 C++ 的主要应用领域：</p>
<h4 id="1-系统编程"><a href="#1-系统编程" class="headerlink" title="1. 系统编程"></a>1. 系统编程</h4><ul>
<li><strong>操作系统</strong>：C++ 常用于开发操作系统内核和驱动程序。</li>
<li><strong>嵌入式系统</strong>：C++ 适用于开发嵌入式系统，如微控制器、传感器网络等。</li>
</ul>
<h4 id="2-游戏开发"><a href="#2-游戏开发" class="headerlink" title="2. 游戏开发"></a>2. 游戏开发</h4><ul>
<li><strong>游戏引擎</strong>：C++ 是开发游戏引擎的首选语言，如 Unreal Engine、Unity（部分使用 C++）。</li>
<li><strong>游戏逻辑</strong>：C++ 用于编写游戏的核心逻辑和性能关键部分。</li>
</ul>
<h4 id="3-高性能计算"><a href="#3-高性能计算" class="headerlink" title="3. 高性能计算"></a>3. 高性能计算</h4><ul>
<li><strong>科学计算</strong>：C++ 常用于科学计算和数值模拟，如物理模拟、天气预报等。</li>
<li><strong>图形处理</strong>：C++ 用于开发图形处理库和工具，如 OpenGL、DirectX。</li>
</ul>
<h4 id="4-金融和交易系统"><a href="#4-金融和交易系统" class="headerlink" title="4. 金融和交易系统"></a>4. 金融和交易系统</h4><ul>
<li><strong>高频交易</strong>：C++ 用于开发高频交易系统，因其高效性和低延迟。</li>
<li><strong>金融建模</strong>：C++ 用于金融建模和风险分析。</li>
</ul>
<h4 id="5-网络和通信"><a href="#5-网络和通信" class="headerlink" title="5. 网络和通信"></a>5. 网络和通信</h4><ul>
<li><strong>网络服务器</strong>：C++ 用于开发高性能的网络服务器和通信协议。</li>
<li><strong>实时通信</strong>：C++ 用于开发实时通信系统，如 VoIP、视频会议等。</li>
</ul>
<h4 id="6-数据库系统"><a href="#6-数据库系统" class="headerlink" title="6. 数据库系统"></a>6. 数据库系统</h4><ul>
<li><strong>数据库引擎</strong>：C++ 用于开发数据库引擎和存储系统。</li>
<li><strong>数据处理</strong>：C++ 用于开发数据处理和分析工具。</li>
</ul>
<h4 id="7-桌面应用"><a href="#7-桌面应用" class="headerlink" title="7. 桌面应用"></a>7. 桌面应用</h4><ul>
<li><strong>图形用户界面（GUI）</strong>：C++ 用于开发桌面应用程序，如 Qt、MFC 等框架。</li>
<li><strong>办公软件</strong>：C++ 用于开发办公软件，如 Microsoft Office 的部分组件。</li>
</ul>
<h4 id="8-人工智能和机器学习"><a href="#8-人工智能和机器学习" class="headerlink" title="8. 人工智能和机器学习"></a>8. 人工智能和机器学习</h4><ul>
<li><strong>机器学习框架</strong>：C++ 用于开发机器学习框架和库，如 TensorFlow、PyTorch（部分使用 C++）。</li>
<li><strong>深度学习</strong>：C++ 用于开发深度学习模型和算法。</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>C++ 是一种功能强大且灵活的编程语言，具有丰富的历史和特性。它支持多种编程范式，包括面向对象编程、泛型编程和函数式编程，广泛应用于系统编程、游戏开发、高性能计算、金融和交易系统、网络和通信、数据库系统、桌面应用、人工智能和机器学习等领域。通过不断的发展和更新，C++ 仍然是现代软件开发中不可或缺的一部分。</p>
<p><img src="/posts/C_PLUS-%E5%9F%BA%E7%A1%80%E4%B8%8E%E8%BF%9B%E9%98%B6/shisyou.jpg" alt="shisyou" loading="lazy"></p>
<h2 id="C-基础"><a href="#C-基础" class="headerlink" title="C++基础"></a>C++基础</h2><h3 id="1-基本结构"><a href="#1-基本结构" class="headerlink" title="1. 基本结构"></a>1. 基本结构</h3><p>C++ 程序的基本结构包括以下几个部分：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  <span class="comment">// 预处理指令，包含标准输入输出库</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">// 使用标准命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  <span class="comment">// 主函数，程序的入口点</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; endl;  <span class="comment">// 输出语句</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 返回值，表示程序正常结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>#include &lt;iostream&gt;</code>：预处理指令，用于包含标准输入输出库。</li>
<li><code>using namespace std;</code>：使用标准命名空间，避免每次使用标准库函数时都需要加上 <code>std::</code> 前缀。</li>
<li><code>int main()</code>：主函数，程序的入口点。每个 C++ 程序都必须有一个 <code>main</code> 函数。</li>
<li><code>cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; endl;</code>：输出语句，将字符串 “Hello, World!” 输出到控制台。</li>
<li><code>return 0;</code>：返回值，表示程序正常结束。</li>
</ul>
<h3 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h3><p>C++ 支持两种注释方式：</p>
<ul>
<li>单行注释：<code>// 这是单行注释</code></li>
<li>多行注释：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">可以跨越多行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-变量和数据类型"><a href="#3-变量和数据类型" class="headerlink" title="3. 变量和数据类型"></a>3. 变量和数据类型</h3><p>C++ 支持多种数据类型：</p>
<ul>
<li><p>基本数据类型：</p>
<ul>
<li><code>int</code>：整数类型</li>
<li><code>float</code>：单精度浮点数</li>
<li><code>double</code>：双精度浮点数</li>
<li><code>char</code>：字符类型</li>
<li><code>bool</code>：布尔类型（<code>true</code> 或 <code>false</code>）</li>
</ul>
</li>
<li><p>变量声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="type">float</span> height = <span class="number">1.75</span>;</span><br><span class="line"><span class="type">char</span> grade = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">bool</span> isStudent = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>常量：使用 <code>const</code> 关键字定义常量</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_VALUE = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4. 运算符"></a>4. 运算符</h3><p>C++ 支持多种运算符：</p>
<ul>
<li>算术运算符：<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></li>
<li>关系运算符：<code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></li>
<li>逻辑运算符：<code>&amp;&amp;</code>, <code>||</code>, <code>!</code></li>
<li>赋值运算符：<code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code></li>
<li>位运算符：<code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></li>
</ul>
<h3 id="5-控制结构"><a href="#5-控制结构" class="headerlink" title="5. 控制结构"></a>5. 控制结构</h3><p>C++ 提供了多种控制结构来控制程序的流程：</p>
<ul>
<li><p>条件语句：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 如果条件为真，执行这里的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (another_condition) &#123;</span><br><span class="line">    <span class="comment">// 如果另一个条件为真，执行这里的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果所有条件都不为真，执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>循环语句：</p>
<ul>
<li><p><code>for</code> 循环：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>while</code> 循环：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>do-while</code> 循环：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>switch</code> 语句：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        <span class="comment">// 如果 expression 等于 value1，执行这里的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        <span class="comment">// 如果 expression 等于 value2，执行这里的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 如果 expression 不等于任何 case 值，执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h3><p>函数是 C++ 中的基本模块，用于封装可重用的代码块。</p>
<ul>
<li><p>函数定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">return_type <span class="title">function_name</span><span class="params">(parameter_list)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> value;  <span class="comment">// 返回值（如果需要）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数调用：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> result = <span class="built_in">add</span>(<span class="number">3</span>, <span class="number">4</span>);  <span class="comment">// 调用 add 函数，返回值为 7</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-数组"><a href="#7-数组" class="headerlink" title="7. 数组"></a>7. 数组</h3><p>数组是用于存储多个相同类型元素的集合。</p>
<ul>
<li><p>数组声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> numbers[<span class="number">5</span>];  <span class="comment">// 声明一个包含 5 个整数的数组</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组初始化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> numbers[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问数组元素：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> firstElement = numbers[<span class="number">0</span>];  <span class="comment">// 访问第一个元素</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-指针"><a href="#8-指针" class="headerlink" title="8. 指针"></a>8. 指针</h3><p>指针是 C++ 中非常重要的概念，用于存储变量的内存地址。</p>
<ul>
<li><p>指针声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *ptr;  <span class="comment">// 声明一个指向整数的指针</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指针赋值：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line">ptr = &amp;x;  <span class="comment">// ptr 存储 x 的地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>解引用指针：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> value = *ptr;  <span class="comment">// 获取 ptr 指向的值</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="9-类和对象"><a href="#9-类和对象" class="headerlink" title="9. 类和对象"></a>9. 类和对象</h3><p>C++ 是一种面向对象的编程语言，支持类和对象的概念。</p>
<ul>
<li><p>类定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> myVariable;  <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;  <span class="comment">// 成员函数</span></span><br><span class="line">        <span class="comment">// 方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对象创建：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">MyClass obj;  <span class="comment">// 创建 MyClass 类的对象</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问成员：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">obj.myVariable = <span class="number">10</span>;  <span class="comment">// 访问成员变量</span></span><br><span class="line">obj.<span class="built_in">myMethod</span>();  <span class="comment">// 调用成员函数</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="10-继承和多态"><a href="#10-继承和多态" class="headerlink" title="10. 继承和多态"></a>10. 继承和多态</h3><p>C++ 支持继承和多态，这是面向对象编程的重要特性。</p>
<ul>
<li><p>继承：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClass</span> : <span class="keyword">public</span> BaseClass &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 派生类的成员</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>多态：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Animal sound&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">makeSound</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Woof!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Animal *animal = <span class="keyword">new</span> <span class="built_in">Dog</span>();</span><br><span class="line">animal-&gt;<span class="built_in">makeSound</span>();  <span class="comment">// 输出 &quot;Woof!&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="11-标准库"><a href="#11-标准库" class="headerlink" title="11. 标准库"></a>11. 标准库</h3><p>C++ 提供了丰富的标准库，包括输入输出、字符串处理、容器、算法等。</p>
<ul>
<li><p>标准输入输出：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin &gt;&gt; x;  <span class="comment">// 从标准输入读取数据</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;You entered: &quot;</span> &lt;&lt; x &lt;&lt; endl;  <span class="comment">// 输出到标准输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串处理：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    str += <span class="string">&quot; World&quot;</span>;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;  <span class="comment">// 输出 &quot;Hello World&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>容器：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="12-异常处理"><a href="#12-异常处理" class="headerlink" title="12. 异常处理"></a>12. 异常处理</h3><p>C++ 支持异常处理，用于处理程序运行时可能出现的错误。</p>
<ul>
<li><p>异常处理：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 可能抛出异常的代码</span></span><br><span class="line">&#125; <span class="built_in">catch</span> (exception_type e) &#123;</span><br><span class="line">    <span class="comment">// 处理异常的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Negative value&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* msg) &#123;</span><br><span class="line">    cerr &lt;&lt; msg &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="13-模板"><a href="#13-模板" class="headerlink" title="13. 模板"></a>13. 模板</h3><p>C++ 支持模板，用于编写通用的代码，适用于多种数据类型。</p>
<ul>
<li><p>函数模板：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">add</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>类模板：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T myVariable;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="14-命名空间"><a href="#14-命名空间" class="headerlink" title="14. 命名空间"></a>14. 命名空间</h3><p>命名空间用于避免命名冲突。</p>
<ul>
<li><p>命名空间定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> MyNamespace &#123;</span><br><span class="line">    <span class="type">int</span> myVariable = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用命名空间：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> MyNamespace;</span><br><span class="line">cout &lt;&lt; myVariable &lt;&lt; endl;  <span class="comment">// 输出 10</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="15-文件操作"><a href="#15-文件操作" class="headerlink" title="15. 文件操作"></a>15. 文件操作</h3><p>C++ 支持文件操作，用于读写文件。</p>
<ul>
<li>文件读写：<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">ofstream <span class="title">outFile</span><span class="params">(<span class="string">&quot;example.txt&quot;</span>)</span></span>;</span><br><span class="line">    outFile &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    outFile.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function">ifstream <span class="title">inFile</span><span class="params">(<span class="string">&quot;example.txt&quot;</span>)</span></span>;</span><br><span class="line">    string line;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(inFile, line)) &#123;</span><br><span class="line">        cout &lt;&lt; line &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    inFile.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>C++ 是一种功能强大且灵活的编程语言，支持多种编程范式，包括过程式编程、面向对象编程和泛型编程。掌握 C++ 的基本语法和特性是深入学习 C++ 编程的基础。通过不断实践和学习，你可以逐步掌握 C++ 的高级特性和最佳实践。</p>
<h2 id="C-进阶"><a href="#C-进阶" class="headerlink" title="C++进阶"></a>C++进阶</h2><p>C++ 进阶内容涵盖了更高级的编程技巧和特性，包括模板编程、STL（标准模板库）、智能指针、多线程编程、异常处理、RAII（资源获取即初始化）、元编程等。以下是对这些进阶内容的详细讲解：</p>
<h3 id="1-模板编程"><a href="#1-模板编程" class="headerlink" title="1. 模板编程"></a>1. 模板编程</h3><p>模板编程是 C++ 中的一种泛型编程技术，允许编写通用的代码，适用于多种数据类型。</p>
<h4 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h4><p>函数模板允许定义一个通用的函数，可以处理多种数据类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">add</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> result1 = <span class="built_in">add</span>(<span class="number">3</span>, <span class="number">4</span>);  <span class="comment">// 调用 add&lt;int&gt;</span></span><br><span class="line">    <span class="type">double</span> result2 = <span class="built_in">add</span>(<span class="number">3.5</span>, <span class="number">4.5</span>);  <span class="comment">// 调用 add&lt;double&gt;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h4><p>类模板允许定义一个通用的类，可以处理多种数据类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T myVariable;</span><br><span class="line">    <span class="built_in">MyClass</span>(T value) : <span class="built_in">myVariable</span>(value) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyClass&lt;<span class="type">int</span>&gt; <span class="title">obj1</span><span class="params">(<span class="number">10</span>)</span></span>;  <span class="comment">// 创建 MyClass&lt;int&gt; 对象</span></span><br><span class="line">    <span class="function">MyClass&lt;<span class="type">double</span>&gt; <span class="title">obj2</span><span class="params">(<span class="number">3.14</span>)</span></span>;  <span class="comment">// 创建 MyClass&lt;double&gt; 对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-STL（标准模板库）"><a href="#2-STL（标准模板库）" class="headerlink" title="2. STL（标准模板库）"></a>2. STL（标准模板库）</h3><p>STL 是 C++ 标准库的一部分，提供了丰富的容器、算法和迭代器，极大地简化了编程。</p>
<h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>STL 提供了多种容器，如 <code>vector</code>、<code>list</code>、<code>map</code>、<code>set</code> 等。</p>
<ul>
<li><p><code>vector</code>：动态数组</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">6</span>);  <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>list</code>：双向链表</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; lst = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    lst.<span class="built_in">push_back</span>(<span class="number">6</span>);  <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : lst) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>map</code>：关联容器，存储键值对</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; ages;</span><br><span class="line">    ages[<span class="string">&quot;Alice&quot;</span>] = <span class="number">25</span>;</span><br><span class="line">    ages[<span class="string">&quot;Bob&quot;</span>] = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; pair : ages) &#123;</span><br><span class="line">        cout &lt;&lt; pair.first &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; pair.second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>set</code>：集合，存储唯一元素</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">6</span>);  <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : s) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p>STL 提供了丰富的算法，如排序、查找、遍历等。</p>
<ul>
<li><p><code>sort</code>：排序算法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>find</code>：查找算法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> it = <span class="built_in">find</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (it != vec.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Found at index: &quot;</span> &lt;&lt; it - vec.<span class="built_in">begin</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>迭代器是 STL 中用于遍历容器元素的通用工具。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-智能指针"><a href="#3-智能指针" class="headerlink" title="3. 智能指针"></a>3. 智能指针</h3><p>智能指针是 C++ 中用于管理动态内存的工具，可以自动释放内存，避免内存泄漏。</p>
<ul>
<li><p><code>unique_ptr</code>：独占所有权的智能指针</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line">    cout &lt;&lt; *ptr &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>shared_ptr</code>：共享所有权的智能指针</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">ptr1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line">    shared_ptr&lt;<span class="type">int</span>&gt; ptr2 = ptr1;</span><br><span class="line">    cout &lt;&lt; *ptr1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; *ptr2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>weak_ptr</code>：弱引用智能指针，用于解决 <code>shared_ptr</code> 的循环引用问题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">ptr1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line">    weak_ptr&lt;<span class="type">int</span>&gt; ptr2 = ptr1;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> ptr = ptr<span class="number">2.l</span>ock()) &#123;</span><br><span class="line">        cout &lt;&lt; *ptr &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-多线程编程"><a href="#4-多线程编程" class="headerlink" title="4. 多线程编程"></a>4. 多线程编程</h3><p>C++11 引入了标准的多线程库，提供了线程、互斥锁、条件变量等工具。</p>
<ul>
<li><p>线程</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">threadFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello from thread&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t</span><span class="params">(threadFunction)</span></span>;</span><br><span class="line">    t.<span class="built_in">join</span>();  <span class="comment">// 等待线程结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>互斥锁</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">threadFunction</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">    mtx.<span class="built_in">lock</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Thread &quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; is running&quot;</span> &lt;&lt; endl;</span><br><span class="line">    mtx.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(threadFunction, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(threadFunction, <span class="number">2</span>)</span></span>;</span><br><span class="line">    t<span class="number">1.</span><span class="built_in">join</span>();</span><br><span class="line">    t<span class="number">2.</span><span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>条件变量</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">mutex mtx;</span><br><span class="line">condition_variable cv;</span><br><span class="line"><span class="type">bool</span> ready = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">workerThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">    cv.<span class="built_in">wait</span>(lock, []&#123; <span class="keyword">return</span> ready; &#125;);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Worker thread is running&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t</span><span class="params">(workerThread)</span></span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">        ready = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cv.<span class="built_in">notify_one</span>();</span><br><span class="line">    t.<span class="built_in">join</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-异常处理-1"><a href="#5-异常处理-1" class="headerlink" title="5. 异常处理"></a>5. 异常处理</h3><p>异常处理是 C++ 中用于处理程序运行时错误的机制。</p>
<ul>
<li>抛出和捕获异常<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Division by zero&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a / b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">divide</span>(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="built_in">catch</span> (<span class="type">const</span> <span class="type">char</span>* msg) &#123;</span><br><span class="line">        cerr &lt;&lt; msg &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-RAII（资源获取即初始化）"><a href="#6-RAII（资源获取即初始化）" class="headerlink" title="6. RAII（资源获取即初始化）"></a>6. RAII（资源获取即初始化）</h3><p>RAII 是一种编程技术，通过对象的生命周期来管理资源，确保资源在对象销毁时自动释放。</p>
<ul>
<li>示例：使用 RAII 管理文件资源<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileHandler</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FileHandler</span>(<span class="type">const</span> string&amp; filename) : <span class="built_in">file</span>(filename, ios::out) &#123;&#125;</span><br><span class="line">    ~<span class="built_in">FileHandler</span>() &#123;</span><br><span class="line">        file.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ofstream&amp; <span class="title">getFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ofstream file;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">FileHandler <span class="title">fh</span><span class="params">(<span class="string">&quot;example.txt&quot;</span>)</span></span>;</span><br><span class="line">    fh.<span class="built_in">getFile</span>() &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-元编程"><a href="#7-元编程" class="headerlink" title="7. 元编程"></a>7. 元编程</h3><p>元编程是 C++ 中的一种高级编程技术，通过编写代码生成代码。</p>
<ul>
<li>模板元编程<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Factorial</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> value = N * Factorial&lt;N - <span class="number">1</span>&gt;::value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Factorial</span>&lt;<span class="number">0</span>&gt; &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> value = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; Factorial&lt;<span class="number">5</span>&gt;::value &lt;&lt; endl;  <span class="comment">// 输出 120</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-智能指针与-RAII-结合"><a href="#8-智能指针与-RAII-结合" class="headerlink" title="8. 智能指针与 RAII 结合"></a>8. 智能指针与 RAII 结合</h3><p>智能指针与 RAII 结合使用，可以更安全地管理动态内存。</p>
<ul>
<li>示例：使用 <code>unique_ptr</code> 管理动态数组<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;<span class="type">int</span>[]&gt; <span class="title">arr</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>])</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        arr[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="9-高级特性"><a href="#9-高级特性" class="headerlink" title="9. 高级特性"></a>9. 高级特性</h3><p>C++ 还提供了一些高级特性，如移动语义、完美转发、lambda 表达式等。</p>
<ul>
<li><p>移动语义</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>() &#123; cout &lt;&lt; <span class="string">&quot;Constructor&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">const</span> MyClass&amp;) &#123; cout &lt;&lt; <span class="string">&quot;Copy Constructor&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="built_in">MyClass</span>(MyClass&amp;&amp;) <span class="keyword">noexcept</span> &#123; cout &lt;&lt; <span class="string">&quot;Move Constructor&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    ~<span class="built_in">MyClass</span>() &#123; cout &lt;&lt; <span class="string">&quot;Destructor&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj1;</span><br><span class="line">    MyClass obj2 = <span class="built_in">move</span>(obj1);  <span class="comment">// 调用移动构造函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完美转发</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span>&amp; x)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Lvalue: &quot;</span> &lt;&lt; x &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span>&amp;&amp; x)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Rvalue: &quot;</span> &lt;&lt; x &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">forward</span><span class="params">(T&amp;&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(forward&lt;T&gt;(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    forward(a);  <span class="comment">// 调用 print(int&amp;)</span></span><br><span class="line">    forward(<span class="number">20</span>);  <span class="comment">// 调用 print(int&amp;&amp;)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Lambda 表达式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    for_each(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), [](<span class="type">int</span> x) &#123; cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>C++ 进阶内容涵盖了模板编程、STL、智能指针、多线程编程、异常处理、RAII、元编程等高级特性。掌握这些进阶内容可以帮助你编写更高效、更安全的 C++ 代码，并解决更复杂的问题。通过不断实践和学习，你可以逐步掌握这些高级特性和最佳实践。</p>
<h2 id="C-竞赛"><a href="#C-竞赛" class="headerlink" title="C++竞赛"></a>C++竞赛</h2><p>在算法竞赛中，C++ 是一种非常流行的编程语言，因为它具有高效的性能和丰富的标准库。以下是一些在算法竞赛中常用的 C++ 语法和技巧：</p>
<h3 id="1-输入输出优化"><a href="#1-输入输出优化" class="headerlink" title="1. 输入输出优化"></a>1. 输入输出优化</h3><p>在算法竞赛中，输入输出速度非常重要。使用 <code>cin</code> 和 <code>cout</code> 可能会比 <code>scanf</code> 和 <code>printf</code> 慢，但可以通过以下方式优化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);  <span class="comment">// 关闭与 C 标准库的同步</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">NULL</span>);  <span class="comment">// 解绑 cin 和 cout</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-快速读取输入"><a href="#2-快速读取输入" class="headerlink" title="2. 快速读取输入"></a>2. 快速读取输入</h3><p>在需要快速读取大量输入时，可以使用以下技巧：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">readInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">readInt</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-常用数据结构"><a href="#3-常用数据结构" class="headerlink" title="3. 常用数据结构"></a>3. 常用数据结构</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组是最基本的数据结构，用于存储相同类型的元素。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">100</span>];  <span class="comment">// 声明一个包含 100 个整数的数组</span></span><br></pre></td></tr></table></figure>

<h4 id="向量（Vector）"><a href="#向量（Vector）" class="headerlink" title="向量（Vector）"></a>向量（Vector）</h4><p>向量是动态数组，可以根据需要自动调整大小。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(<span class="number">6</span>);  <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h4><p>栈是一种后进先出（LIFO）的数据结构。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; endl;  <span class="comment">// 输出 2</span></span><br><span class="line">    s.<span class="built_in">pop</span>();</span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; endl;  <span class="comment">// 输出 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h4><p>队列是一种先进先出（FIFO）的数据结构。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; endl;  <span class="comment">// 输出 1</span></span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">    cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; endl;  <span class="comment">// 输出 2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="优先队列（Priority-Queue）"><a href="#优先队列（Priority-Queue）" class="headerlink" title="优先队列（Priority Queue）"></a>优先队列（Priority Queue）</h4><p>优先队列是一种特殊的队列，元素按照优先级排序。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; pq;</span><br><span class="line">    pq.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">    pq.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    pq.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; pq.<span class="built_in">top</span>() &lt;&lt; endl;  <span class="comment">// 输出 3</span></span><br><span class="line">    pq.<span class="built_in">pop</span>();</span><br><span class="line">    cout &lt;&lt; pq.<span class="built_in">top</span>() &lt;&lt; endl;  <span class="comment">// 输出 2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-常用算法"><a href="#4-常用算法" class="headerlink" title="4. 常用算法"></a>4. 常用算法</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>C++ 标准库提供了 <code>sort</code> 函数，可以对数组或向量进行排序。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : vec) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>C++ 标准库提供了 <code>lower_bound</code> 和 <code>upper_bound</code> 函数，用于在有序数组中进行二分查找。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> it = <span class="built_in">lower_bound</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (it != vec.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Found at index: &quot;</span> &lt;&lt; it - vec.<span class="built_in">begin</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-常用技巧"><a href="#5-常用技巧" class="headerlink" title="5. 常用技巧"></a>5. 常用技巧</h3><h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><p>位运算在算法竞赛中非常常见，可以用于快速计算和优化。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">5</span>;  <span class="comment">// 二进制表示为 0101</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">3</span>;  <span class="comment">// 二进制表示为 0011</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> andResult = a &amp; b;  <span class="comment">// 按位与，结果为 0001</span></span><br><span class="line"><span class="type">int</span> orResult = a | b;   <span class="comment">// 按位或，结果为 0111</span></span><br><span class="line"><span class="type">int</span> xorResult = a ^ b;  <span class="comment">// 按位异或，结果为 0110</span></span><br><span class="line"><span class="type">int</span> notResult = ~a;     <span class="comment">// 按位取反，结果为 1010</span></span><br></pre></td></tr></table></figure>

<h4 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h4><p>快速幂算法用于快速计算幂运算。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fastPow</span><span class="params">(<span class="type">long</span> <span class="type">long</span> base, <span class="type">long</span> <span class="type">long</span> exp, <span class="type">long</span> <span class="type">long</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (exp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exp % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            result = (result * base) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        base = (base * base) % mod;</span><br><span class="line">        exp /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h4><p>前缀和是一种常用的技巧，用于快速计算数组中某个区间的和。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefixSum</span><span class="params">(arr.size() + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        prefixSum[i + <span class="number">1</span>] = prefixSum[i] + arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> sum = prefixSum[r + <span class="number">1</span>] - prefixSum[l];  <span class="comment">// 计算区间 [l, r] 的和</span></span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;  <span class="comment">// 输出 9</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-常用库函数"><a href="#6-常用库函数" class="headerlink" title="6. 常用库函数"></a>6. 常用库函数</h3><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><p>C++ 标准库提供了许多常用的数学函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> x = <span class="number">2.0</span>;</span><br><span class="line">    <span class="type">double</span> sqrtX = <span class="built_in">sqrt</span>(x);  <span class="comment">// 平方根</span></span><br><span class="line">    <span class="type">double</span> powX = <span class="built_in">pow</span>(x, <span class="number">3</span>);  <span class="comment">// 幂运算</span></span><br><span class="line">    <span class="type">double</span> logX = <span class="built_in">log</span>(x);  <span class="comment">// 自然对数</span></span><br><span class="line">    cout &lt;&lt; sqrtX &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; powX &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; logX &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h4><p>C++ 标准库提供了丰富的字符串处理函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">reverse</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>());  <span class="comment">// 反转字符串</span></span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;  <span class="comment">// 输出 &quot;olleh&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>在算法竞赛中，C++ 的常用语法和技巧包括输入输出优化、常用数据结构（如数组、向量、栈、队列、优先队列）、常用算法（如排序、二分查找）、常用技巧（如位运算、快速幂、前缀和）以及常用库函数（如数学函数、字符串处理函数）。掌握这些内容可以帮助你在算法竞赛中高效地解决问题。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>贪吃蛇</title>
    <url>/posts/Game/</url>
    <content><![CDATA[<iframe src="./Game.html" width="100%" height="600px"></iframe>

]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用语法</title>
    <url>/posts/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="Git常用语法详解"><a href="#Git常用语法详解" class="headerlink" title="Git常用语法详解"></a>Git常用语法详解</h1><p><img src="/posts/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/368420dac41817f3d3aab08cc2293d2aac0c9dee.jpg" alt="368420dac41817f3d3aab08cc2293d2aac0c9dee" loading="lazy"></p>
<p>Git是一款功能强大的分布式版本控制系统，其丰富的命令和灵活的语法可以满足各种版本管理需求。熟练掌握Git的常用语法，有助于提高开发效率和团队协作能力。下面将详细介绍Git的常用命令和语法，帮助您深入理解并应用Git。</p>
<hr>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li>Git基础命令<ul>
<li>初始化仓库：<code>git init</code></li>
<li>克隆仓库：<code>git clone</code></li>
<li>查看状态：<code>git status</code></li>
<li>添加到暂存区：<code>git add</code></li>
<li>提交更改：<code>git commit</code></li>
<li>查看提交历史：<code>git log</code></li>
</ul>
</li>
<li>分支操作<ul>
<li>查看分支：<code>git branch</code></li>
<li>创建分支：<code>git branch &lt;branch-name&gt;</code></li>
<li>切换分支：<code>git checkout &lt;branch-name&gt;</code></li>
<li>创建并切换分支：<code>git checkout -b &lt;branch-name&gt;</code></li>
<li>合并分支：<code>git merge &lt;branch-name&gt;</code></li>
<li>删除分支：<code>git branch -d &lt;branch-name&gt;</code></li>
</ul>
</li>
<li>远程仓库操作<ul>
<li>查看远程仓库：<code>git remote -v</code></li>
<li>添加远程仓库：<code>git remote add &lt;name&gt; &lt;url&gt;</code></li>
<li>推送到远程仓库：<code>git push</code></li>
<li>从远程仓库拉取：<code>git pull</code></li>
<li>获取远程更新：<code>git fetch</code></li>
</ul>
</li>
<li>撤销与回滚<ul>
<li>撤销修改：<code>git checkout -- &lt;file&gt;</code></li>
<li>取消暂存：<code>git reset HEAD &lt;file&gt;</code></li>
<li>回滚提交：<code>git revert &lt;commit&gt;</code></li>
<li>重置仓库：<code>git reset --hard &lt;commit&gt;</code></li>
</ul>
</li>
<li>标签管理<ul>
<li>创建标签：<code>git tag &lt;tag-name&gt;</code></li>
<li>查看标签：<code>git tag</code></li>
<li>推送标签：<code>git push origin &lt;tag-name&gt;</code></li>
</ul>
</li>
<li>存储与应用变更<ul>
<li>存储当前修改：<code>git stash</code></li>
<li>查看存储列表：<code>git stash list</code></li>
<li>应用最新存储：<code>git stash apply</code></li>
<li>删除存储：<code>git stash drop</code></li>
</ul>
</li>
</ol>
<hr>
<h2 id="1-Git基础命令"><a href="#1-Git基础命令" class="headerlink" title="1. Git基础命令"></a>1. Git基础命令</h2><h3 id="1-1-初始化仓库：git-init"><a href="#1-1-初始化仓库：git-init" class="headerlink" title="1.1 初始化仓库：git init"></a>1.1 初始化仓库：<code>git init</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>在当前目录下初始化一个新的Git仓库，会创建一个<code>.git</code>目录，用于存储Git的管理信息。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

<h3 id="1-2-克隆仓库：git-clone"><a href="#1-2-克隆仓库：git-clone" class="headerlink" title="1.2 克隆仓库：git clone"></a>1.2 克隆仓库：<code>git clone</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repository-url&gt; [destination-directory]</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>从远程仓库克隆代码到本地。<code>destination-directory</code>为可选参数，指定克隆后的目录名。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/user/repo.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/user/repo.git my-repo</span><br></pre></td></tr></table></figure>

<h3 id="1-3-查看状态：git-status"><a href="#1-3-查看状态：git-status" class="headerlink" title="1.3 查看状态：git status"></a>1.3 查看状态：<code>git status</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>显示工作目录和暂存区的状态，提示哪些文件发生了修改、哪些文件处于暂存状态等。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h3 id="1-4-添加到暂存区：git-add"><a href="#1-4-添加到暂存区：git-add" class="headerlink" title="1.4 添加到暂存区：git add"></a>1.4 添加到暂存区：<code>git add</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br><span class="line">git add .</span><br><span class="line">git add -A</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将修改的文件添加到暂存区，以便在下一次提交时包含这些更改。</p>
<ul>
<li><code>git add &lt;file&gt;</code>：添加指定的文件。</li>
<li><code>git add .</code>：添加当前目录下的所有更改（包括新增、修改、删除）。</li>
<li><code>git add -A</code>：添加所有更改，等同于<code>git add .</code>。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add README.md</span><br><span class="line">git add src/</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>

<h3 id="1-5-提交更改：git-commit"><a href="#1-5-提交更改：git-commit" class="headerlink" title="1.5 提交更改：git commit"></a>1.5 提交更改：<code>git commit</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;commit message&quot;</span></span><br><span class="line">git commit</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将暂存区的更改提交到本地仓库。<code>-m</code>参数用于直接在命令行中填写提交信息。如果不加<code>-m</code>，Git会打开默认的编辑器让你输入提交信息。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;Add new feature&quot;</span></span><br><span class="line">git commit</span><br></pre></td></tr></table></figure>

<h3 id="1-6-查看提交历史：git-log"><a href="#1-6-查看提交历史：git-log" class="headerlink" title="1.6 查看提交历史：git log"></a>1.6 查看提交历史：<code>git log</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line">git <span class="built_in">log</span> --graph</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>显示提交历史记录。</p>
<ul>
<li><code>git log</code>：详细显示提交历史。</li>
<li><code>git log --oneline</code>：以简洁的一行格式显示。</li>
<li><code>git log --graph</code>：以图形化方式显示分支合并历史。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --graph</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-分支操作"><a href="#2-分支操作" class="headerlink" title="2. 分支操作"></a>2. 分支操作</h2><h3 id="2-1-查看分支：git-branch"><a href="#2-1-查看分支：git-branch" class="headerlink" title="2.1 查看分支：git branch"></a>2.1 查看分支：<code>git branch</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<ul>
<li><code>git branch</code>：列出本地所有分支，当前所在分支会有<code>*</code>标记。</li>
<li><code>git branch -a</code>：列出本地和远程所有分支。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<h3 id="2-2-创建分支：git-branch"><a href="#2-2-创建分支：git-branch" class="headerlink" title="2.2 创建分支：git branch &lt;branch-name&gt;"></a>2.2 创建分支：<code>git branch &lt;branch-name&gt;</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>基于当前分支创建一个新分支，分支名为<code>&lt;branch-name&gt;</code>。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch feature/login</span><br></pre></td></tr></table></figure>

<h3 id="2-3-切换分支：git-checkout"><a href="#2-3-切换分支：git-checkout" class="headerlink" title="2.3 切换分支：git checkout &lt;branch-name&gt;"></a>2.3 切换分支：<code>git checkout &lt;branch-name&gt;</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>切换到指定的分支，使之成为当前分支。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout feature/login</span><br></pre></td></tr></table></figure>

<h3 id="2-4-创建并切换分支：git-checkout-b"><a href="#2-4-创建并切换分支：git-checkout-b" class="headerlink" title="2.4 创建并切换分支：git checkout -b &lt;branch-name&gt;"></a>2.4 创建并切换分支：<code>git checkout -b &lt;branch-name&gt;</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>创建一个新分支并立即切换到该分支。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b feature/signup</span><br></pre></td></tr></table></figure>

<h3 id="2-5-合并分支：git-merge"><a href="#2-5-合并分支：git-merge" class="headerlink" title="2.5 合并分支：git merge &lt;branch-name&gt;"></a>2.5 合并分支：<code>git merge &lt;branch-name&gt;</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将<code>&lt;branch-name&gt;</code>分支的修改合并到当前分支。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git merge feature/login</span><br></pre></td></tr></table></figure>

<h3 id="2-6-删除分支：git-branch-d"><a href="#2-6-删除分支：git-branch-d" class="headerlink" title="2.6 删除分支：git branch -d &lt;branch-name&gt;"></a>2.6 删除分支：<code>git branch -d &lt;branch-name&gt;</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;branch-name&gt;</span><br><span class="line">git branch -D &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<ul>
<li><code>git branch -d</code>：删除指定的分支，只有当该分支的修改已经被合并到当前分支或其他分支时才能删除。</li>
<li><code>git branch -D</code>：强制删除指定分支，可能会导致未合并的修改丢失。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d feature/login</span><br><span class="line">git branch -D feature/old-feature</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-远程仓库操作"><a href="#3-远程仓库操作" class="headerlink" title="3. 远程仓库操作"></a>3. 远程仓库操作</h2><h3 id="3-1-查看远程仓库：git-remote-v"><a href="#3-1-查看远程仓库：git-remote-v" class="headerlink" title="3.1 查看远程仓库：git remote -v"></a>3.1 查看远程仓库：<code>git remote -v</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>显示所有远程仓库的名称和URL。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<h3 id="3-2-添加远程仓库：git-remote-add"><a href="#3-2-添加远程仓库：git-remote-add" class="headerlink" title="3.2 添加远程仓库：git remote add"></a>3.2 添加远程仓库：<code>git remote add</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>为当前本地仓库添加一个远程仓库，<code>&lt;name&gt;</code>通常为<code>origin</code>。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/user/repo.git</span><br></pre></td></tr></table></figure>

<h3 id="3-3-推送到远程仓库：git-push"><a href="#3-3-推送到远程仓库：git-push" class="headerlink" title="3.3 推送到远程仓库：git push"></a>3.3 推送到远程仓库：<code>git push</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;branch&gt;</span><br><span class="line">git push -u &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将当前分支的提交推送到远程仓库的指定分支。</p>
<ul>
<li><code>git push &lt;remote&gt; &lt;branch&gt;</code>：推送更改。</li>
<li><code>git push -u &lt;remote&gt; &lt;branch&gt;</code>：推送并设置跟踪关系，方便以后直接使用<code>git push</code>。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin main</span><br><span class="line">git push -u origin feature/login</span><br></pre></td></tr></table></figure>

<h3 id="3-4-从远程仓库拉取：git-pull"><a href="#3-4-从远程仓库拉取：git-pull" class="headerlink" title="3.4 从远程仓库拉取：git pull"></a>3.4 从远程仓库拉取：<code>git pull</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>从远程仓库拉取指定分支的更新并与当前分支合并。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin main</span><br></pre></td></tr></table></figure>

<h3 id="3-5-获取远程更新：git-fetch"><a href="#3-5-获取远程更新：git-fetch" class="headerlink" title="3.5 获取远程更新：git fetch"></a>3.5 获取远程更新：<code>git fetch</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch &lt;remote&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>从远程仓库获取更新，但不自动合并，需要手动合并。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-撤销与回滚"><a href="#4-撤销与回滚" class="headerlink" title="4. 撤销与回滚"></a>4. 撤销与回滚</h2><h3 id="4-1-撤销修改：git-checkout"><a href="#4-1-撤销修改：git-checkout" class="headerlink" title="4.1 撤销修改：git checkout --"></a>4.1 撤销修改：<code>git checkout --</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将工作区的指定文件恢复到最近一次提交的状态，丢弃在工作区的修改。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- README.md</span><br></pre></td></tr></table></figure>

<h3 id="4-2-取消暂存：git-reset-HEAD"><a href="#4-2-取消暂存：git-reset-HEAD" class="headerlink" title="4.2 取消暂存：git reset HEAD"></a>4.2 取消暂存：<code>git reset HEAD</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将指定的文件从暂存区移除，但保留工作区的修改。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD src/main.py</span><br></pre></td></tr></table></figure>

<h3 id="4-3-回滚提交：git-revert"><a href="#4-3-回滚提交：git-revert" class="headerlink" title="4.3 回滚提交：git revert"></a>4.3 回滚提交：<code>git revert</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>创建一个新的提交，用于撤销指定的提交，但保留提交历史。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git revert 1a2b3c4d</span><br></pre></td></tr></table></figure>

<h3 id="4-4-重置仓库：git-reset-hard"><a href="#4-4-重置仓库：git-reset-hard" class="headerlink" title="4.4 重置仓库：git reset --hard"></a>4.4 重置仓库：<code>git reset --hard</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将当前分支的HEAD指向指定的<code>&lt;commit&gt;</code>，并重置暂存区和工作区，丢弃之后的所有更改。</p>
<p><strong>注意：此操作不可逆，慎用！</strong></p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard 1a2b3c4d</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-标签管理"><a href="#5-标签管理" class="headerlink" title="5. 标签管理"></a>5. 标签管理</h2><h3 id="5-1-创建标签：git-tag"><a href="#5-1-创建标签：git-tag" class="headerlink" title="5.1 创建标签：git tag"></a>5.1 创建标签：<code>git tag</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag &lt;tag-name&gt;</span><br><span class="line">git tag -a &lt;tag-name&gt; -m <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>为当前提交创建标签，<code>-a</code>参数创建带有注释的标签。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag v1.0</span><br><span class="line">git tag -a v1.1 -m <span class="string">&quot;Release version 1.1&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-查看标签：git-tag"><a href="#5-2-查看标签：git-tag" class="headerlink" title="5.2 查看标签：git tag"></a>5.2 查看标签：<code>git tag</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>列出所有标签。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>

<h3 id="5-3-推送标签：git-push-origin"><a href="#5-3-推送标签：git-push-origin" class="headerlink" title="5.3 推送标签：git push origin"></a>5.3 推送标签：<code>git push origin</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin &lt;tag-name&gt;</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将指定标签或所有标签推送到远程仓库。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin v1.1</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="6-存储与应用变更"><a href="#6-存储与应用变更" class="headerlink" title="6. 存储与应用变更"></a>6. 存储与应用变更</h2><h3 id="6-1-存储当前修改：git-stash"><a href="#6-1-存储当前修改：git-stash" class="headerlink" title="6.1 存储当前修改：git stash"></a>6.1 存储当前修改：<code>git stash</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git stash save <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将当前工作区和暂存区的修改保存起来，清空工作区，方便切换分支或执行其他操作。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git stash save <span class="string">&quot;WIP: Implement new feature&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-查看存储列表：git-stash-list"><a href="#6-2-查看存储列表：git-stash-list" class="headerlink" title="6.2 查看存储列表：git stash list"></a>6.2 查看存储列表：<code>git stash list</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>显示所有存储的修改列表。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>

<h3 id="6-3-应用最新存储：git-stash-apply"><a href="#6-3-应用最新存储：git-stash-apply" class="headerlink" title="6.3 应用最新存储：git stash apply"></a>6.3 应用最新存储：<code>git stash apply</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash apply [stash@&#123;n&#125;]</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将指定的存储应用到当前工作区，<code>stash@&#123;n&#125;</code>是存储的索引号，默认是最新的。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash apply</span><br><span class="line">git stash apply stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-4-删除存储：git-stash-drop"><a href="#6-4-删除存储：git-stash-drop" class="headerlink" title="6.4 删除存储：git stash drop"></a>6.4 删除存储：<code>git stash drop</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash drop [stash@&#123;n&#125;]</span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<ul>
<li><code>git stash drop</code>：删除指定的存储。</li>
<li><code>git stash clear</code>：清空所有存储。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash drop</span><br><span class="line">git stash drop stash@&#123;1&#125;</span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="附加：其他常用命令"><a href="#附加：其他常用命令" class="headerlink" title="附加：其他常用命令"></a>附加：其他常用命令</h2><h3 id="查看差异：git-diff"><a href="#查看差异：git-diff" class="headerlink" title="查看差异：git diff"></a>查看差异：<code>git diff</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff</span><br><span class="line">git diff &lt;commit&gt;</span><br><span class="line">git diff &lt;commit1&gt; &lt;commit2&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>显示工作区、暂存区或两个提交之间的差异。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff                  <span class="comment"># 工作区与暂存区的差异</span></span><br><span class="line">git diff --staged         <span class="comment"># 暂存区与最新提交的差异</span></span><br><span class="line">git diff 1a2b3c4d         <span class="comment"># 工作区与指定提交的差异</span></span><br><span class="line">git diff 1a2b3c4d 5e6f7g8h  <span class="comment"># 两个提交之间的差异</span></span><br></pre></td></tr></table></figure>

<h3 id="配置别名：git-config"><a href="#配置别名：git-config" class="headerlink" title="配置别名：git config"></a>配置别名：<code>git config</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global <span class="built_in">alias</span>.&lt;alias-name&gt; <span class="string">&#x27;&lt;git-command&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>为Git命令创建别名，简化日常操作。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.cm <span class="string">&#x27;commit -m&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使用别名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git st      <span class="comment"># 等同于 git status</span></span><br><span class="line">git co main <span class="comment"># 等同于 git checkout main</span></span><br></pre></td></tr></table></figure>

<h3 id="显示图形化日志：git-log-graph"><a href="#显示图形化日志：git-log-graph" class="headerlink" title="显示图形化日志：git log --graph"></a>显示图形化日志：<code>git log --graph</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --oneline --all</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>以图形方式显示提交历史，包含所有分支，简洁明了。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --oneline --all</span><br></pre></td></tr></table></figure>

<hr>
<p><img src="/posts/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/2018080251901_yFiXE.jpeg" alt="2018080251901_yFiXE" loading="lazy"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>熟练掌握Git的常用命令和语法，可以大大提高日常开发和协作的效率。本文详细介绍了Git的基础命令、分支操作、远程仓库操作、撤销与回滚、标签管理、存储变更等方面的常用语法。建议在实际工作中多加练习，结合具体场景灵活运用。</p>
<h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ul>
<li><strong>多练习</strong>：在实际项目中尝试使用不同的Git命令，加深理解。</li>
<li><strong>参考帮助文档</strong>：使用<code>git help &lt;command&gt;</code>查看命令的详细说明。</li>
<li><strong>善用别名</strong>：为常用命令配置别名，提高操作速度。</li>
<li><strong>注意安全</strong>：在执行如<code>git reset --hard</code>等可能导致数据丢失的命令时，务必谨慎。</li>
</ul>
<p>希望通过本篇详解，您能更加深入地了解Git的常用语法，在工作中得心应手地使用Git进行版本控制和团队协作。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础语法</title>
    <url>/posts/MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 align="center">MySQl知识点总结</h1>

<p><img src="/posts/MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/123214339_p0_master1200.jpg" alt="123214339_p0_master1200" loading="lazy"></p>
<hr>
<h3 id="MySQL-基础语法总结"><a href="#MySQL-基础语法总结" class="headerlink" title="MySQL 基础语法总结"></a>MySQL 基础语法总结</h3><h4 id="1-SQL-语法基础"><a href="#1-SQL-语法基础" class="headerlink" title="1. SQL 语法基础"></a>1. SQL 语法基础</h4><ul>
<li><strong>SQL特点</strong>：不区分大小写，以分号结束。关键字推荐使用大写。</li>
<li><strong>注释</strong>：<ul>
<li>单行：<code>-- 注释内容</code> 或 <code># 注释内容</code></li>
<li>多行：<code>/* 注释内容 */</code></li>
</ul>
</li>
</ul>
<h4 id="2-数据定义语言（DDL）"><a href="#2-数据定义语言（DDL）" class="headerlink" title="2. 数据定义语言（DDL）"></a>2. 数据定义语言（DDL）</h4><h5 id="2-1-数据库操作"><a href="#2-1-数据库操作" class="headerlink" title="2.1 数据库操作"></a>2.1 数据库操作</h5><ul>
<li><strong>查询所有数据库</strong>: <code>SHOW DATABASES;</code></li>
<li><strong>创建数据库</strong>: <code>CREATE DATABASE db_name;</code></li>
<li><strong>删除数据库</strong>: <code>DROP DATABASE db_name;</code></li>
<li><strong>切换数据库</strong>: <code>USE db_name;</code></li>
</ul>
<h5 id="2-2-表操作"><a href="#2-2-表操作" class="headerlink" title="2.2 表操作"></a>2.2 表操作</h5><ul>
<li><strong>查询所有表</strong>: <code>SHOW TABLES;</code></li>
<li><strong>查看表结构</strong>: <code>DESC table_name;</code></li>
<li><strong>创建表</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (</span><br><span class="line">    column1 <span class="type">INT</span> COMMENT <span class="string">&#x27;注释&#x27;</span>,</span><br><span class="line">    column2 <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><strong>修改表</strong>: <ul>
<li>添加列：<code>ALTER TABLE table_name ADD column_name INT;</code></li>
<li>修改列类型：<code>ALTER TABLE table_name MODIFY column_name VARCHAR(50);</code></li>
<li>删除列：<code>ALTER TABLE table_name DROP column_name;</code></li>
</ul>
</li>
</ul>
<h4 id="3-数据操作语言（DML）"><a href="#3-数据操作语言（DML）" class="headerlink" title="3. 数据操作语言（DML）"></a>3. 数据操作语言（DML）</h4><h5 id="3-1-插入数据"><a href="#3-1-插入数据" class="headerlink" title="3.1 插入数据"></a>3.1 插入数据</h5><ul>
<li><strong>插入数据</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (col1, col2) <span class="keyword">VALUES</span> (value1, value2);</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="3-2-修改数据"><a href="#3-2-修改数据" class="headerlink" title="3.2 修改数据"></a>3.2 修改数据</h5><ul>
<li><strong>更新数据</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> col1 <span class="operator">=</span> value1 <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="3-3-删除数据"><a href="#3-3-删除数据" class="headerlink" title="3.3 删除数据"></a>3.3 删除数据</h5><ul>
<li><strong>删除记录</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-数据查询语言（DQL）"><a href="#4-数据查询语言（DQL）" class="headerlink" title="4. 数据查询语言（DQL）"></a>4. 数据查询语言（DQL）</h4><h5 id="4-1-查询数据"><a href="#4-1-查询数据" class="headerlink" title="4.1 查询数据"></a>4.1 查询数据</h5><ul>
<li><strong>基本查询</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1, col2 <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="4-2-条件查询"><a href="#4-2-条件查询" class="headerlink" title="4.2 条件查询"></a>4.2 条件查询</h5><ul>
<li><strong>条件查询</strong>: <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> col1 <span class="operator">&gt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="4-3-聚合查询"><a href="#4-3-聚合查询" class="headerlink" title="4.3 聚合查询"></a>4.3 聚合查询</h5><ul>
<li><strong>统计查询</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>), <span class="built_in">SUM</span>(col1), <span class="built_in">AVG</span>(col1) <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="4-4-分组查询"><a href="#4-4-分组查询" class="headerlink" title="4.4 分组查询"></a>4.4 分组查询</h5><ul>
<li><strong>按字段分组</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> table_name <span class="keyword">GROUP</span> <span class="keyword">BY</span> col1;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="4-5-排序查询"><a href="#4-5-排序查询" class="headerlink" title="4.5 排序查询"></a>4.5 排序查询</h5><ul>
<li><strong>排序查询</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> col1 <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="4-6-分页查询"><a href="#4-6-分页查询" class="headerlink" title="4.6 分页查询"></a>4.6 分页查询</h5><ul>
<li><strong>分页查询</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name LIMIT <span class="number">0</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-数据控制语言（DCL）"><a href="#5-数据控制语言（DCL）" class="headerlink" title="5. 数据控制语言（DCL）"></a>5. 数据控制语言（DCL）</h4><h5 id="5-1-用户管理"><a href="#5-1-用户管理" class="headerlink" title="5.1 用户管理"></a>5.1 用户管理</h5><ul>
<li><strong>创建用户</strong>: <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="5-2-权限管理"><a href="#5-2-权限管理" class="headerlink" title="5.2 权限管理"></a>5.2 权限管理</h5><ul>
<li><strong>授予权限</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> db_name.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h4><h5 id="6-1-字符串函数"><a href="#6-1-字符串函数" class="headerlink" title="6.1 字符串函数"></a>6.1 字符串函数</h5><ul>
<li><strong>字符串拼接</strong>: <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="6-2-数值函数"><a href="#6-2-数值函数" class="headerlink" title="6.2 数值函数"></a>6.2 数值函数</h5><ul>
<li><strong>四舍五入</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">123.456</span>, <span class="number">2</span>);  <span class="comment">-- 输出: 123.46</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="6-3-日期函数"><a href="#6-3-日期函数" class="headerlink" title="6.3 日期函数"></a>6.3 日期函数</h5><ul>
<li><strong>获取当前日期和时间</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW();</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="7-约束"><a href="#7-约束" class="headerlink" title="7. 约束"></a>7. 约束</h4><h5 id="7-1-主键与外键"><a href="#7-1-主键与外键" class="headerlink" title="7.1 主键与外键"></a>7.1 主键与外键</h5><ul>
<li><p><strong>主键约束</strong>:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>外键约束</strong>:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_name <span class="keyword">FOREIGN</span> KEY (col_name) <span class="keyword">REFERENCES</span> other_table(id);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-多表查询"><a href="#8-多表查询" class="headerlink" title="8. 多表查询"></a>8. 多表查询</h4><h5 id="8-1-内连接"><a href="#8-1-内连接" class="headerlink" title="8.1 内连接"></a>8.1 内连接</h5><ul>
<li><strong>内连接</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.col, b.col <span class="keyword">FROM</span> table_a a <span class="keyword">JOIN</span> table_b b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.a_id;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="8-2-左连接"><a href="#8-2-左连接" class="headerlink" title="8.2 左连接"></a>8.2 左连接</h5><ul>
<li><strong>左连接</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.col, b.col <span class="keyword">FROM</span> table_a a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table_b b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.a_id;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="8-3-子查询"><a href="#8-3-子查询" class="headerlink" title="8.3 子查询"></a>8.3 子查询</h5><ul>
<li><strong>子查询</strong>:<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_a <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> table_b <span class="keyword">WHERE</span> col <span class="operator">&gt;</span> <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这就是 MySQL 基础语法的简要总结，例子简单易懂，操作方便！</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>30分钟学会Vue</title>
    <url>/posts/VueNote/</url>
    <content><![CDATA[<h1 id="核心语法"><a href="#核心语法" class="headerlink" title="核心语法"></a>核心语法</h1><p><img src="/posts/VueNote/0423fa51789c2f54ed5f8784310c5aa9a3f2f3f1.jpg" alt="0423fa51789c2f54ed5f8784310c5aa9a3f2f3f1" loading="lazy"></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://v2.cn.vuejs.org/v2/guide/">介绍 — Vue.js (https://v2.cn.vuejs.org/v2/guide/)</a></p>
<p>渐进式 JavaScript 框架</p>
<ul>
<li>减少要编写Dom操作（内置到了框架之中）</li>
<li>数据与页面的呈现分离。降低了代码耦合度</li>
<li>支持组件化开发。</li>
</ul>
<h3 id="1、简化DOM操作"><a href="#1、简化DOM操作" class="headerlink" title="1、简化DOM操作"></a>1、简化DOM操作</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> value=<span class="string">&#x27;这是内容a&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 编写Dom操作</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>).<span class="property">textContent</span>=value;</span></span><br><span class="line"><span class="language-javascript">    value = <span class="string">&#x27;新内容ya&#x27;</span> <span class="comment">// 编写Dom操作</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>).<span class="property">textContent</span>=value;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而 Vue 会简化DOM操作</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;1+2+3&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;1&gt;2?&#x27;对&#x27;:&#x27;错&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> <span class="comment">// Vue会简化DOM操作。</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1,响应式数据与插值表达式。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所谓的响应式数据指的是：我们在Vue内部对响应式数据进行操作，它就会自动地更新到视图中(界面中)。就可以省去大量的DOM操作了。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以直接通过Vue实例访问data。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&quot;#box&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>:<span class="string">&quot;标题1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">content</span>:<span class="string">&quot;内容1&quot;</span> </span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">   &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-计算属性"><a href="#2-计算属性" class="headerlink" title="2.计算属性"></a>2.计算属性</h3><blockquote>
<p>起因：模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。复杂运算：在模板中放入太多的逻辑会让模板过重且难以维护。</p>
<ul>
<li><p>对于任何复杂逻辑，就应该使用<strong>计算属性</strong>。</p>
</li>
<li><p>像绑定普通 property 一样在模板中绑定计算属性。</p>
</li>
</ul>
</blockquote>
<p> 具有缓存性。优化性能。</p>
<ul>
<li>书写的时候可以为1个函数。</li>
</ul>
<blockquote>
<p>第一次计算的时候它会将计算结果在内部进行缓存。只能是响应式数据变。如果在第二次计算的时候响应式数据没有变，意味着整体结果也不变，就不再做计算了，拿到之前计算过的结果直接用。</p>
</blockquote>
<p><em>注意：不能加括号因为它叫计算属性。</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.计算属性  书写的时候可以为1个函数。  </span></span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">        <span class="title function_">outputContent</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;computed执行了&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;标题为2&#x27;</span>+<span class="variable language_">this</span>.<span class="property">title</span>+<span class="string">&#x27;, &#x27;</span>+<span class="string">&#x27;内容为&#x27;</span>+<span class="variable language_">this</span>.<span class="property">content</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>书写的时候是函数形式，调用的时候是不带括号的，作为属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;outputContent&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;outputContent&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、侦听器"><a href="#3、侦听器" class="headerlink" title="3、侦听器"></a>3、侦听器</h3><blockquote>
<p>Vue中：当你改数据的时候，会自动触发一个叫做修改页面内容的一个操作。</p>
</blockquote>
<p>侦听器，它就是监听你某个数据有没有变化。</p>
<blockquote>
<p>注意：你侦听的数据必须是响应式的。</p>
</blockquote>
<ul>
<li><p>有可能你希望在某个数据变化的时候并不仅仅是更新页面，同时改点别的。</p>
</li>
<li><p>例如侦听title的变化，</p>
<ul>
<li>title要作为一个方法名设置在侦听器的内部。</li>
<li>然后这里边接受两个值，一个是新值一个是旧值。(<em>newValue</em>, <em>oldValue</em>)</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如侦听title的变化，title要作为一个方法名设置在侦听器的内部。然后这里边接受两个值，一个是新值一个是旧值。</span></span><br><span class="line">   <span class="attr">watch</span>:&#123; <span class="comment">//注意：你侦听的数据必须是响应式的。</span></span><br><span class="line">            <span class="title function_">title</span>(<span class="params">newValue, oldValue</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);   </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>控制台：vm.title&#x3D;22222</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、指令"><a href="#4、指令" class="headerlink" title="4、指令"></a>4、指令</h3><blockquote>
<p>详见：前端Vue-heima.md文件。</p>
</blockquote>
<p>v-text设置标签的内容</p>
<p>v-html设置innerHTML（会解析html结构）</p>
<p>会覆盖原始内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 内容指令  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 渲染指令 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;aitem in arr&quot;</span>&gt;</span>&#123;&#123;aitem&#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- item是值：aa, bb, cc, dd 。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in obj&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- item是值：10、20、30。--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--index是属性：a、b、c。key是下标：1、2、3。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index,key) in obj&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;-&#123;&#123;index&#125;&#125;-&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;bool&quot;</span>&gt;</span> v-show内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;bool&quot;</span>&gt;</span> v-if内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 属性指令 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span> 这是内容 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span> 这是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件指令 --&gt;</span>  <span class="comment">&lt;!-- 点击事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;output&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;output&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 表单指令：表单输入绑定,会同步更新 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;inputV&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;inputV&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- input的一个双向绑定，它视图变了，会更新底部数据 。</span></span><br><span class="line"><span class="comment">    p标签是由数据驱动的，数据变了，它会自动更新视图。--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&quot;#box&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">htmlContent</span>:<span class="string">&#x27;看&lt;span&gt;span内容&lt;/span&gt;这里&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">arr</span>:[<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>,<span class="string">&#x27;dd&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//JS中的&#123;&#125; 大括号，表示定义一个对象，有成对的属性和值。  </span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">obj</span>:&#123;<span class="attr">a</span>:<span class="number">10</span>, <span class="attr">b</span>:<span class="number">20</span>, <span class="attr">c</span>:<span class="number">30</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bool</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>:<span class="string">&#x27;标题文本&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">inputV</span>:<span class="string">&quot;默认文本&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">output</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;method执行了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;       </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、修饰符"><a href="#5、修饰符" class="headerlink" title="5、修饰符"></a>5、修饰符</h3><blockquote>
<p>建议看：官方文档中相应的部分。</p>
</blockquote>
<p>修饰符是用来<strong>修饰指令的</strong> 。写在指令的最后面。</p>
<h4 id="表单输入绑定的"><a href="#表单输入绑定的" class="headerlink" title="表单输入绑定的"></a>表单输入绑定的</h4><p><a href="https://v2.cn.vuejs.org/v2/guide/forms.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6">forms.html#修饰符</a></p>
<p>1)：<a href="https://v2.cn.vuejs.org/v2/guide/forms.html#trim"><code>.trim</code></a>   trim的修饰符（trim是用来去除内容两端空格的）</p>
<p>自动过滤用户输入的首尾空白字符，给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2)：<a href="https://v2.cn.vuejs.org/v2/guide/forms.html#lazy"><code>.lazy</code></a></p>
<p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 。可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件<em>之后</em>进行同步：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3)：<a href="https://v2.cn.vuejs.org/v2/guide/forms.html#number"><code>.number</code></a></p>
<p>自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span>   </span><br></pre></td></tr></table></figure>

<h4 id="事件处理的"><a href="#事件处理的" class="headerlink" title="事件处理的"></a>事件处理的</h4><ul>
<li><p><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">events.html#事件修饰符</a></p>
</li>
<li><p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p>
<ul>
<li><code>.stop</code></li>
<li><code>.prevent</code></li>
<li><code>.capture</code></li>
<li><code>.self</code></li>
<li><code>.once</code></li>
<li><code>.passive</code></li>
</ul>
</li>
<li><p><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">events.html#按键修饰符</a></p>
<ul>
<li></li>
<li><pre><code class="html">  
  &lt;input @keyup.enter=&quot;submit&quot;&gt;  只有在 `key` 是 `Enter` 时调用 `vm.submit()方法` 
  &lt;input @keyup.page-down=&quot;onPageDown&quot;&gt; 处理函数只会在 $event.key 等于 PageDown 时被调用。
  <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-attr">[系统修饰键]</span>(<span class="attribute">https</span>:<span class="comment">//v2.cn.vuejs.org/v2/guide/events.html#系统修饰键)</span></span><br><span class="line"></span><br><span class="line">  可以用如下修饰符来实现仅在**按下相应按键时**才触发鼠标或键盘事件的监听器。</span><br><span class="line"></span><br><span class="line">  - <span class="built_in">`.ctrl`</span></span><br><span class="line">- <span class="built_in">`.alt`</span></span><br><span class="line">  - <span class="built_in">`.shift`</span></span><br><span class="line">  - <span class="built_in">`.meta`</span></span><br><span class="line">  </span><br><span class="line">  &gt; 注意：在 Mac 系统键盘上，meta 对应 command 键 (⌘)。在 Windows 系统键盘 meta 对应 Windows 徽标键 (⊞)。</span><br><span class="line">  &gt;</span><br><span class="line">&gt; 在 Sun 操作系统键盘上，meta 对应实心宝石键 (◆)。在其他特定键盘上，尤其在 MIT 和 Lisp 机器的键盘、以及其后继产品，比如 Knight 键盘、space-cadet 键盘，meta 被标记为“META”。在 Symbolics 键盘上，meta 被标记为“META”或者“Meta”。</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">## 生命周期钩子</span><br><span class="line"></span><br><span class="line">[Vue 实例 — 实例生命周期钩子](<span class="attribute">https</span>:<span class="comment">//v2.cn.vuejs.org/v2/guide/instance.html#实例生命周期钩子)</span></span><br><span class="line"></span><br><span class="line">[API — 选项-生命周期钩子](<span class="attribute">https</span>:<span class="comment">//v2.cn.vuejs.org/v2/api/#选项-生命周期钩子)</span></span><br><span class="line"></span><br><span class="line">mounted和created的区别</span><br><span class="line"></span><br><span class="line">- <span class="attribute">created</span>:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。</span><br><span class="line"></span><br><span class="line">- <span class="attribute">mounted</span>:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。</span><br><span class="line">  - 通常是为 methods 函数提前定义（ 类似提前声明变量 进入页面内容全部**渲染完成后自动引函数**）。</span><br><span class="line"></span><br><span class="line"># 脚手架Vue CLI</span><br><span class="line"></span><br><span class="line">[介绍 | Vue CLI (vuejs.org)](<span class="attribute">https</span>:<span class="comment">//cli.vuejs.org/zh/guide/)</span></span><br><span class="line"></span><br><span class="line">Vue CLI是Vue官方去基于Webpack打造的脚手架工具,</span><br><span class="line"></span><br><span class="line">脚手架内置了很多模板和工具，可以让我们快速进行Vue的项目创建。</span><br><span class="line"></span><br><span class="line">我们可以通过一些选项的方式去勾选，要使用哪些扩展插件。</span><br><span class="line"></span><br><span class="line">## 安装</span><br><span class="line"></span><br><span class="line">首先需要安装node.js</span><br><span class="line"></span><br><span class="line">&gt; <span class="attribute">C</span>:\Users\ccdd&gt;node -v</span><br><span class="line">&gt; v16.<span class="number">20.2</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="attribute">C</span>:\Users\ccdd&gt;npm --version</span><br><span class="line">&gt; <span class="number">8.19</span>.<span class="number">4</span></span><br><span class="line"></span><br><span class="line">&gt; PS <span class="attribute">D</span>:\soft\develop\idea\pros\my\qianlearn\vuelearn\main\wuyou\vueCli&gt; npm --version</span><br><span class="line">&gt; <span class="number">8.19</span>.<span class="number">4</span></span><br><span class="line">&gt; PS <span class="attribute">D</span>:\soft\develop\idea\pros\my\qianlearn\vuelearn\main\wuyou\vueCli&gt; node -v</span><br><span class="line">&gt; v16.<span class="number">20.2</span></span><br><span class="line"></span><br><span class="line">npm工具：node package manager，node包的管理器。</span><br><span class="line"></span><br><span class="line">- 例如我们想去安装Vue CLI，我们可以通过npm install，install可以简写为i 。</span><br><span class="line">  Vue CLI的名称叫做<span class="variable">@vue</span>/cli 。（vue-cli它代表的是Vue CLI的早期版本）</span><br><span class="line">  - <span class="built_in">`- g`</span> 表示的是在node的全局进行安装.(以后创建项目的时候都可以使用这个工具)</span><br><span class="line"></span><br><span class="line">&gt; PS <span class="attribute">D</span>:\soft\develop\idea\pros\my\qianlearn\vuelearn\main\wuyou\vueCli&gt; npm i <span class="variable">@vue</span>/cli -g</span><br><span class="line">&gt; <span class="built_in">`[========================]`</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; PS <span class="attribute">D</span>:\soft\develop\idea\pros\my\qianlearn\vuelearn\main\wuyou\vueCli&gt; vue --version   # 用这个命令来检查其版本是否正确</span><br><span class="line">&gt; <span class="variable">@vue</span>/cli <span class="number">5.0</span>.<span class="number">8</span></span><br><span class="line"></span><br><span class="line">- npm i serve -g</span><br><span class="line">  - serve可以帮助快速地**启动一个静态资源服务器来执行**，来进行**指定目录下的代码运行**。</span><br><span class="line">  - -g那这块我们也是做一个全局的安装</span><br><span class="line"></span><br><span class="line">&gt; 可以把 dist 目录下面的代码，通过serve的方式给做一个运行。</span><br><span class="line"></span><br><span class="line">## 创建</span><br><span class="line"></span><br><span class="line">创建一个Vue项目</span><br><span class="line"></span><br><span class="line"><span class="built_in">``</span>`sh</span><br><span class="line"><span class="number">1</span>、方式一：</span><br><span class="line">vue create hello-world  # vue create + 项目名称</span><br><span class="line">然后选择第<span class="number">2</span>个：Vue2</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、方式二：使用vue ui的方式</span><br><span class="line">UI是user interface（是图形化界面的创建方式）</span><br><span class="line">那么他就会打开一个内置的网页：Vue 项目管理器</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>里面scripts有一些命令，开发中比较常用的是serve（可帮助打开一个Vue脚手架内部的一个静态资源服务器，直接跑起来）</p>
<ul>
<li>npm run + 你即将使用的一个命令。（注意先通过cd 命令来进入到vue project项目的根目录下）</li>
</ul>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">PS D:\soft\develop\idea\pros\my\qianlearn\vuelearn\main\wuyou\vueCli\my-vue-project&gt; npm run serve</span><br><span class="line"></span><br><span class="line">&gt; my-vue-project@<span class="number">0</span>.<span class="number">1</span>.<span class="number">0</span> serve</span><br><span class="line">&gt; vue-cli-service serve</span><br><span class="line"></span><br><span class="line"> INFO  Starting development server...</span><br><span class="line"> DONE  Compiled successfully <span class="keyword">in</span> <span class="number">5079</span>ms                                                                                                                                          <span class="number">14</span>:<span class="number">05</span>:<span class="number">14</span></span><br><span class="line">  App running <span class="built_in">at</span>:</span><br><span class="line">  - Local:   http://localhost:<span class="number">8080</span>/ </span><br><span class="line">  - Network: http://<span class="number">172</span>.<span class="number">16</span>.<span class="number">1</span>.<span class="number">24</span>:<span class="number">8080</span>/</span><br><span class="line"></span><br><span class="line">  Note that the development build is <span class="keyword">not</span> optimized.</span><br><span class="line">  To create a production build, run npm run build.</span><br></pre></td></tr></table></figure>

<p>scripts中,另一个比较常用的是build。build用于代码打包（最后呈现给用户的时候，不可能是很多这么零碎的文件）</p>
<ul>
<li><p>打包通过npm run build来执行</p>
</li>
<li><p>打包后的文件在dist目录下。</p>
<ul>
<li><p>可以把 dist 目录下面的代码，通过serve的方式给做一个运行。</p>
<blockquote>
<p>\my-vue-project&gt; serve dist</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h3><ul>
<li>node_modules ：是项目安装的所有的包都保存在这个位置，这个代码是不需要我们做改动的，它的里面都是一些第三方的工具，只需要用。</li>
<li>public：里边有资源，像index.html、favicon.ico 。这里边保存的是一些不参与编译的资源。</li>
<li>src：它保存的是一些需要参与编译的资源。<ul>
<li>比如像assets，里面有logo.png。这个png在项目里，会被编译为base64格式,进行下展示。（所以打包后的文件夹里不具备图片的）</li>
<li>components：是组件的意思，用来保存所有的自定义组件的功能。（存储更通用的组件）</li>
<li>App.vue：这个是根组件。<ul>
<li>以.vue为后缀的vue文件, 是vue单文件组件。</li>
</ul>
</li>
<li>main.js：这是Vue应用的一个入口文件，会对Vue做一个基础的配置</li>
</ul>
</li>
<li>其它的：babel.config.js：是我们的babel的配置文件。</li>
<li>jsconfig.json 配置文件</li>
<li>vue.config.js 配置文件，指的是Vue CLI的项目的配置文件。里边会有些相关配置的定义，可以做一些配置的更改。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure>

<h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h1><h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><p><a href="https://v2.cn.vuejs.org/v2/guide/components.html">components.html#组件基础</a></p>
<p>组件是可复用的Vue实例。（可以把重复的功能封装为组件。）</p>
<p>使用Vue.component函数去创建一个组件。</p>
<ul>
<li>Vue.component函数<ul>
<li>第一个参数：组件的名称。</li>
<li>第二个参数：以对象的形式去描述一个组件。</li>
<li>！组件的模版必须具备一个根节点。</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 定义一个名为 button-counter 的新组件</span><br><span class="line">Vue.component(&#x27;button-counter&#x27;, &#123;</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p><a href="https://v2.cn.vuejs.org/v2/guide/single-file-components.html">单文件组件 — Vue.js (vuejs.org)</a></p>
<p>组件，它是用来封装页面部分功能的一种方式（可以封装这一块功能的结构、样式和逻辑这么几个部分）。</p>
<ul>
<li>以.vue为后缀的vue文件, 是单文件组件。<ul>
<li>我们的每个.vue单文件组件中 都包含了三个部分：template、script、style 。</li>
<li>每个组件，都是由这独立的三个部分来组成的：结构、样式和逻辑。</li>
<li>不同组件在不同的文件中。每个组件里边内容，也都是独立的。</li>
</ul>
</li>
</ul>
<h2 id="组件怎么使用？"><a href="#组件怎么使用？" class="headerlink" title="组件怎么使用？"></a>组件怎么使用？</h2><blockquote>
<p>以在在vue脚手架创建的项目中为例。</p>
</blockquote>
<p>如：HelloWorld.vue这个组件它在使用的时候，就是在App.vue中去用的。</p>
<ul>
<li><p>第一步：需要在我们当前组件内部，有一个叫做components的配置选项，来进行我们组件的配置。（在这设置了才能使用）</p>
</li>
<li><p>同时也通过import方式做了一个引入。（这是一种模块引用的方式）</p>
<ul>
<li>HelloWorld 引入后：就可在我们当前组件内部做使用了。它就变成了当前组件的一个子组件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Welcome to Your Vue.js App&quot;</span>/&gt;</span> 单标签的形式</span><br><span class="line">  <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Welcome to Your Vue.js App&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span> 双标签的形式</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用组件的时候，就是一个HTML标签的形式，跟组件名称是对应的。</p>
</li>
</ul>
<p>但是当我们去 export 引入的时候，在设置helloWorld子组件的时候，它通过export default导出的，其实就是一对象，它并没有做任何的功能设置。</p>
<ul>
<li><p>其实这一切，都是在刚才使用 npm run build ，也就是打包这一步的时候去执行的。</p>
<ul>
<li><p>App.vue中：当它看到在某一个组件的结构里面，存在一个helloworld结构以后 <code>&lt;HelloWorld msg=&quot;Welcome&quot;/&gt;</code>  这个标签不是 html 的这个内置的标签、不是一个正常的标签，那他就会去找有没有这样一个组件，如果有，他就找到你导入的这个组件的配置对象（从import找到）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> <span class="comment">//在HelloWorld.vue中定义的</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,  <span class="comment">//这是个配置对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">msg</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>他会根据你给我这个对象，进行一下new Vue的操作。</p>
<ul>
<li><p>例如像App.vue它也是一个组件，这块通过export default方式也导出了一下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">HelloWorld</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>那这个根组件（App.vue）会在哪使用呢?</p>
<ul>
<li><p>根组件是没有父组件的,它会在我们的入口（main.js）中被进行创建：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这块通过new Vue的方式做了一个处理，使用了一个render函数。这是我们根组件的配置上的一个使用方式。</p>
<blockquote>
<p>render函数的作用是：将h创建的Node节点信息return返回给Vue.js底层处理文件中的beforeMount()生命周期钩子函数，让其将Node节点信息在界面中渲染出来。</p>
<blockquote>
<p><a href="https://v2.cn.vuejs.org/v2/api/#beforeMount">beforeMount</a> : 在挂载开始之前被调用：相关的 <code>render</code> 函数首次被调用。</p>
</blockquote>
</blockquote>
</li>
<li><p>在我们进行<strong>子组件处理</strong>的时候，它也是由new Vue内部的一个组件化处理方式，进行的组件实例的创建。</p>
<ul>
<li>所以意味着：<strong>每一个Vue的组件都是一个独立的Vue实例</strong>。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Vue组件</strong>在使用的时候，其实就相当于是一个自定义的HTML标签，但其实实质上它是一个单独的Vue实例。</p>
<ul>
<li>每一个组件都是一个单独的Vue实例。</li>
<li>最终这个组件，会<strong>在编译环节进行一下结构生成</strong>，并替换掉你之前写的那个自定义的HTML标签。</li>
</ul>
</li>
<li><p>所以：Vue的实例属性，在组件中也同样是可以使用的。但有一个除外就是el。</p>
<ul>
<li>el选项只能够在根组件中进行设置。而像<u>内部的子组件</u>它是不需要el属性的，因为它是取决于实际上写的这个标签的位置，而不是挂载到某一个特定位置上。</li>
</ul>
</li>
</ul>
<h2 id="组件的通信"><a href="#组件的通信" class="headerlink" title="组件的通信"></a>组件的通信</h2><p>关于组件的通信方式。</p>
<p>组件跟组件之间都是相互独立的。但是在实际页面开发中，组件跟组件之间肯定又是有关联性的，那这种关联方式就体现在了数据的交互上。</p>
<p>例如说在父组件中，如果有些数据希望在子组件中进行访问的话，那么这时我们就要涉及到组件通信的处理方式。</p>
<h3 id="父传子-props"><a href="#父传子-props" class="headerlink" title="父传子 props"></a>父传子 props</h3><blockquote>
<p>父组件向子组件传值使用 props</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 App.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Welcome to Your Vue.js App&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在父组件App.vue中，就给子组件设置了一个属性，就像html标签属性一样，写了一个msg属性，值为“Welcome…”。</p>
<blockquote>
<p>那在子组件里如何作为一个正确的接收呢？<br>——父组件向子组件传值使用 props 。</p>
</blockquote>
<p>在子组件HelloWorld.vue中，就写了一个props。props就是去接收父组件给子组件设置的属性的一个方式。</p>
<p><u>如果希望将父组件的数据传递给子组件的话，只要通过 (子组件的) props 作为接收就可以了。</u></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 子组件 HelloWorld.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;<span class="comment">//除了可以规定类型以外,还可以规定一些其他的配置项,所以这块也可以通过对象方式来。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">msg</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>props中：除了可以规定类型以外，还可以规定一些其他的配置项，所以这块也可通过对象方式来。(props中的自定义属性也可以通过v-bind绑定的方式被赋值，通过响应式数据来做设置)</li>
<li>如果写类型可以写成type，如果类型可能有多种的话，可以写多个用数组来包裹，比如说String或者Number，注意首字母需大写。</li>
<li>default：默认值多少。</li>
<li>required：是必选的。有可能子组件依赖于 父组件传递的一个核心数据，再做一个后续的逻辑设置，那么这时这个属性的值就必须得有。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 新的子组件 HelloWorld.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//组件通信</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.父传子，通过 props 作为处理。</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;  <span class="comment">//除了可以规定类型以外，还可以规定一些其他的配置项，所以这块也可通过对象方式来。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">msg</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">count</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>:[<span class="title class_">String</span>, <span class="title class_">Number</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// default:100</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">required</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新的父组件 App.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Welcome to Your Vue.js App&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">:count</span>=<span class="string">&quot;parentCount&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="子传父用自定义事件"><a href="#子传父用自定义事件" class="headerlink" title="子传父用自定义事件"></a>子传父用自定义事件</h3><blockquote>
<p>子组件向父组件传递数据使用自定义事件。</p>
<p>反向传值（子向父传值$emit）</p>
</blockquote>
<p>情景：如果你希望把子组件的数据去传递给父组件的话。<br>这单个商品是不可能知道其他商品的信息，那应该把它汇总到外部的父组件，也就是整体购物车组件里边做一个统计。</p>
<ul>
<li>希望能够<strong>将这个更改过的数据，传递给父组件</strong>。<ul>
<li><p>这需要通过自定义事件的方式来做处理（$emit的方式来做设置）。</p>
</li>
<li><p><code>$emit()</code> 用于触发自定义事件。（emit是触发的意思。click是点击这个操作触发）</p>
<ul>
<li><p>第一个参数为自定义的事件</p>
</li>
<li><p>参数2是事件要传递给父组件的数据。</p>
</li>
<li><p>父组件在子组件标签上<strong>绑定自定义事件</strong>来<strong>监听与接收</strong>子组件传递的数据。</p>
<p><strong>父组件里面绑定事件，子组件触发事件</strong></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><a href="https://blog.csdn.net/qq_49039603/article/details/120834149">参考：vue笔记5_this.$emit第三个参数-CSDN博客</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 子组件 HelloWorld.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler&quot;</span>&gt;</span>子组件的button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">msg</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">childCount</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">childCount</span>++;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;child-change-event&quot;</span>, <span class="variable language_">this</span>.<span class="property">childCount</span>);       </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// this.$emit(&#x27;event-name&#x27;, param);参数2是事件要传递给父组件的数据。</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 父组件 App.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">child-change-event</span>=<span class="string">&quot;appHandler&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父组件在子组件标签上绑定自定义事件来监听与接收子组件传递的数据。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件里面的getChildData的数据为：&#123;&#123; getChildData &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&quot;./components/HelloWorld.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">HelloWorld</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">getChildData</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;     <span class="comment">//appHandler监听子组件传递的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">appHandler</span>(<span class="params">childCount</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">getChildData</span> = childCount;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="emit案例详解"><a href="#emit案例详解" class="headerlink" title="$emit案例详解"></a>$emit案例详解</h4><p><a href="https://www.cnblogs.com/linzhifen5/p/17240872.html">参考链接</a></p>
<p>总结：</p>
<ul>
<li>只有子组件传参，@调用方法不使用“括号”</li>
<li>特殊使用“<code>arguments</code>”和“<code>$event</code>”，</li>
<li><code>arguments</code> 获取子参数的数组</li>
<li><code>$event</code> 获取自定义对象，满足传多个参数</li>
</ul>
<hr>
<p>使用 <code>$emit</code> 从子组件传递数据到父组件时，主要有以下3类情况</p>
<h5 id="1-只子组件传值"><a href="#1-只子组件传值" class="headerlink" title="1.只子组件传值"></a>1.只子组件传值</h5><p>只有子组件传值（单个、多个）</p>
<p>写法一：（自由式）</p>
<blockquote>
<ol>
<li>只有子组件传值；</li>
<li>注意@引用函数不需要加“括号”；</li>
<li>子组件传值和父组件方法的参数一一对应。</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// child组件，在子组件中触发事件</span><br><span class="line">this.$emit(&#x27;handleFather&#x27;, &#x27;子参数1&#x27;,&#x27;子参数2&#x27;,&#x27;子参数3&#x27;)</span><br><span class="line"></span><br><span class="line">// father组件，在父组件中引用子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">child</span> @<span class="attr">handleFather</span>=<span class="string">&quot;handleFather&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    child,</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">handleFather</span>(<span class="params">param1,param2,param3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">console</span>.<span class="title function_">log</span>(param) <span class="comment">// </span></span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>写法二：（arguments写法）</p>
<blockquote>
<ol>
<li>只有子组件传值；</li>
<li>注意@引用函数添加“arguments”值；</li>
<li>打印出子组件传值的数组形式。</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// child组件，在子组件中触发事件并传多个参数</span><br><span class="line">this.$emit(&#x27;handleFather&#x27;, param1, param2,)</span><br><span class="line">//father组件，在父组件中引用子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">child</span> @<span class="attr">handleFather</span>=<span class="string">&quot;handleFather(arguments)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">     child,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handleFather</span>(<span class="params">param</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(param[<span class="number">0</span>]) <span class="comment">//获取param1的值</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(param[<span class="number">1</span>]) <span class="comment">//获取param2的值</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-子父都传"><a href="#2-子父都传" class="headerlink" title="2.子父都传"></a>2.子父都传</h5><p>子组件传值，父组件也传值</p>
<p>写法一：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child组件，在子组件中触发事件</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;handleFather&#x27;</span>, <span class="string">&#x27;子参数对象&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//father组件，在父组件中引用子组件</span></span><br><span class="line">&lt;child @handleFather=<span class="string">&quot;handleFather($event, fatherParam)&quot;</span>&gt;&lt;/child&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    child,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="title function_">handleFather</span>(<span class="params">childObj, fatherParam</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="variable language_">console</span>.<span class="title function_">log</span>(childObj) <span class="comment">// 打印子组件参数（对象）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="variable language_">console</span>.<span class="title function_">log</span>(fatherParam) <span class="comment">// 父组件参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>写法二：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child组件，在子组件中触发事件并传多个参数</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;handleFather&#x27;</span>, param1, param2,)</span><br><span class="line"></span><br><span class="line"><span class="comment">//father组件，在父组件中引用子组件</span></span><br><span class="line">&lt;child @handleFather=<span class="string">&quot;handleFather(arguments, fatherParam)&quot;</span>&gt;&lt;/child&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    child,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="title function_">handleFather</span>(<span class="params">childParam, fatherParam</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="variable language_">console</span>.<span class="title function_">log</span>(childParam) <span class="comment">//获取arguments数组参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="variable language_">console</span>.<span class="title function_">log</span>(fatherParam) <span class="comment">//获取fatherParam</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="同级也可传"><a href="#同级也可传" class="headerlink" title="同级也可传"></a>同级也可传</h3><p>同级其实也可以传。</p>
<ul>
<li><p>第一种方式就是通过父来中转，比如说把子的值传给以父，再用父传给另外一个子。</p>
</li>
<li><p>第二种方式是通过一套EventBus方式来做处理，是通过一个额外的Vue实例，来做一个数据存储。</p>
</li>
<li><p>第三种方式就是比如说我们并不是父子关系，也不是同级关系。</p>
<ul>
<li>就建议使用Vue官方的，全局状态管理工具VueX，来进行状态的管理。</li>
</ul>
</li>
</ul>
<h2 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h2><p><a href="https://v2.cn.vuejs.org/v2/guide/components-slots.html">插槽 — components-slots.html</a></p>
<p>关于组件插槽的使用方式</p>
<p>插槽是一个比较常用、比较好用的一个功能。</p>
<p>当我们希望：每次在进行组件使用的时候，有所不一样的呈现。</p>
<h3 id="普通插槽"><a href="#普通插槽" class="headerlink" title="普通插槽"></a>普通插槽</h3><ul>
<li>那如果希望每个helloworld除了核心功能以外，其他位置有一些展示上的区别，就可以利用组件的这种双标签的结构来进行处理了。<ul>
<li>双标签内的区域，所书写的其实就是插槽的位置。</li>
<li>可以在子组件中去规定一下，给插槽中写的数据要在内部的哪个地方去呈现。<ul>
<li>——书写slot标签。slot并不是真的标签，它只是引用了在父组件去使用子组件的时候，所设置的一个默认插槽内容。当然 slot 里也可以写一些默认内容。</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>子组件里必须先定义slot标签，父组件才能使用插槽进行自定义区别。</li>
<li>插槽：使得子组件有部分区域是给父组件开放的，可以自己随便定一些什么东西进去，而不再是完全由子组件内部做实现。</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 子组件 HelloWorld.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>slot的默认文本<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 父组件 App.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span> HelloWorld双标签内的文本1<span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span> HelloWorld双标签内的文本22<span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a><a href="https://v2.cn.vuejs.org/v2/guide/components-slots.html#%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD">具名插槽</a></h3><p>有时我们需要多个插槽。可能有多个区域。</p>
<p>那在父组件设置的时候，怎么来区分，是要给哪个地方来写？——这块可以<strong>通过name来做标记</strong>。</p>
<p><u>当你组件里有好几个地方可以让外部通过插槽传值的话，就可以通过name来标记。</u></p>
<p>如果希望在父组件编写的时候，给一个自定义的内容，就需要手动写一个template，然后通过#的方式（或者写成v-slot指令），来指定你要设置的插槽的名称。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 子组件 HelloWorld.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span> slot的默认文本 <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;foot&quot;</span>&gt;</span> slot中foot的文本 <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 父组件 App.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span> HelloWorld双标签内的文本1</span><br><span class="line">     <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:foot</span>&gt;</span>HelloWorld双标签内的文本template v-slot:foot<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span> HelloWorld双标签内的文本22</span><br><span class="line">     <span class="tag">&lt;<span class="name">template</span> #<span class="attr">foot</span>&gt;</span> HelloWorld双标签内的文本template #foot <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p><a href="https://v2.cn.vuejs.org/v2/guide/components-slots.html#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD">components-slots.html#作用域插槽</a></p>
<p>除了可以做一些基础的文本设置以外，我们还可以<strong>在插槽里面去使用子组件的一些数据</strong>。</p>
<p>注意：helloworld里边的插槽，其实也是helloworld里边的内容，它并不是父组件的内容。</p>
<p>我们就需要<strong>通过作用域插槽方式来做一个设置</strong>，也就是需要你在子组件Helloworld中的slot里给绑定一些值。</p>
<p>！这个<strong>绑定的位置</strong>是在你的name&#x3D;foot的插槽里面，那意味着，当父组件使用Helloworld这个组件的时候，就<strong>只能在foot插槽里</strong>进行数据的使用。</p>
<p>！父组件使用slot插槽，#foot&#x3D;在接收的时候注意：接收的时候，虽然slot插槽绑定的值是一个，但是他给你传回来是一个整个对象，所以这块你接收的是一个dataObj。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 子组件 HelloWorld.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span> slot的默认文本 <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-bind绑定属性与对应的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;foot&quot;</span> <span class="attr">:childCount</span>=<span class="string">&quot;childCount&quot;</span>&gt;</span>slot中foot的文本<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">childCount</span>: <span class="number">134</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 父组件 App.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> </span><br><span class="line">   <span class="comment">&lt;!-- 接收插槽传递的数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span> Hello标签的文本1</span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">foot</span>=<span class="string">&quot;dataObj&quot;</span>&gt;</span>foot= &#123;&#123;dataObj&#125;&#125;,内容是= &#123;&#123;dataObj.childCount&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 或者你直接通过解构方式也行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span> Hello标签的文本22</span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">foot</span>=<span class="string">&quot;&#123;childCount&#125;&quot;</span>&gt;</span>foot= &#123;&#123;childCount&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h1><p><a href="https://v3.router.vuejs.org/zh/">Vue Router (与 Vue 2 对应的 Vue Router3 的版本)</a></p>
<p>Vue Router 是 Vue.js官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。</p>
<ul>
<li>单页面应用<ul>
<li>一般的网站都是由多个页面组成的，但Vue通常只有一个html文件，也意味着它其实只有一个页面。</li>
<li>那如何能够在这个页面中去实现类似于多项应用的效果呢？——其实就是监测页面URL的变化，当URL变化以后，我们在页面中渲染些内容就OK了。</li>
</ul>
</li>
</ul>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>先创建项目：<a href="https://zhuanlan.zhihu.com/p/628439854">参考：手动搭建一个完整的vue2项目</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">you\vueRouter&gt; vue create ling-vue</span><br><span class="line">  Manually <span class="keyword">select</span> features</span><br><span class="line">  我们需要选择手动选择功能选择到Router还有Vuex</span><br><span class="line"></span><br><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually <span class="keyword">select</span> features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: (Press &lt;space&gt; to <span class="keyword">select</span>, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to proceed)</span><br><span class="line"> (*) Babel</span><br><span class="line"> ( ) TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support</span><br><span class="line"> (*) Router</span><br><span class="line">&gt;(*) Vuex</span><br><span class="line"> ( ) CSS Pre-processors</span><br><span class="line"> (*) Linter / Formatter</span><br><span class="line"> ( ) Unit Testing</span><br><span class="line"> ( ) E2E Testing</span><br><span class="line">然后呢是否使用<span class="built_in">history</span>模式 <span class="built_in">yes</span></span><br><span class="line">然后这里选择一个代码风格:标准的， Lint on save</span><br><span class="line">然后就是你的其他配置文件是在package.json里边存着还是单独存：</span><br><span class="line">然后问你是否将当前创建项目配置作为一个模板方便下次直接使用：n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS D:\soft\develop\idea\pros\my\qianlearn\vuelearn\main\wuyou\vueRouter&gt; vue create ling-vue</span><br><span class="line"></span><br><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually <span class="keyword">select</span> features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Router, Vuex, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 2.x</span><br><span class="line">? Use <span class="built_in">history</span> mode <span class="keyword">for</span> router? (Requires proper server setup <span class="keyword">for</span> index fallback <span class="keyword">in</span> production) Yes</span><br><span class="line">? Pick a linter / formatter config: Standard  》 标准风格文件最后有个空行</span><br><span class="line">? Pick additional lint features: Lint on save</span><br><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, ESLint, etc.? In dedicated config files</span><br><span class="line">? Save this as a preset <span class="keyword">for</span> future projects? (y/N) n</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接下来VueCli会帮助将项目的工具跟依赖给安装好</p>
<blockquote>
<p>vueRouter&gt; cd ling-vue<br>ling-vue&gt; npm run serve</p>
</blockquote>
<p>对于页面：顶部多了一个可以切换的区域，点击后顶部的URL发生了变化</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href="https://v3.router.vuejs.org/zh/guide/#javascript">Vue Router (vuejs.org)</a></p>
<p>src里面多了两个部分，一个叫store一个叫router，每个里面都有一个index.js文件。</p>
<h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><ul>
<li><p>router 的 index.js 里：它是引入了一个 vue-router 的库，叫 VueRouter 类。然后通过 Vue.use 的方式引入Vue的官方插件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span> <span class="comment">//引入了 vue-router 的库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/HomeView.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>) <span class="comment">//通过 Vue.use 的方式引入Vue的官方插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一系列的配置</span></span><br><span class="line"><span class="keyword">const</span> routes = [ <span class="comment">//定义路由：每个路由应映射一个组件。 其中&quot;component&quot; 可以是通过 Vue.extend() 创建的组件构造器，或者只是一个组件配置对象。</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123; <span class="comment">//new VueRouter创建了一个 router 实例。然后传了 `routes` 配置+别的配置参数。</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">base</span>: process.<span class="property">env</span>.<span class="property">BASE_URL</span>,</span><br><span class="line">  routes  <span class="comment">// (缩写) 相当于 routes: routes</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router <span class="comment">// 然后做了一个导出</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>new VueRouter</p>
<ul>
<li>mode：如果不使用history，那他是默认的hash。默认的hash模式（兼容性更好）：会发现在路径上多了一个# ，使用 URL 的 hash 来模拟一个完整的 URL。而history模式的好处在于：URL 就像正常的 url，它看起来更好看。 <a href="https://www.zhangshengrong.com/p/RmNP8BnPNk/">Vue中Router路由两种模式hash与history详解</a></li>
<li>base配置：是一个基础的地址。但现在也没有做配置</li>
<li>routes ：定义路由，配置地址对应的要显示的组件是哪个。是操作Vue Router的重点的位置。</li>
</ul>
</li>
<li><p>const routes&#x3D;[] 定义了路由信息</p>
<ul>
<li><p>&#x2F; 是根目录。这条路由还起了一个名字叫home 。（当路由定义的path是比较长的时候，就可以比较方便的通过home这个name来做代替）</p>
</li>
<li><p>component：这是你当前路由切换以后要显示哪个组件。component的配置方式有两种：<br>一种方式是你通过import的方式直接引入然后做一个相应处理。（ <code>import HomeView from &quot;../views/HomeView.vue&quot;;</code> ）<br>第二种方式是通过一个箭头减速函数的方式来做设置。（这块这个import的方式，是使用一个异步组件方式来做加载。还加了一个webpack的魔法注释，是为了在webpack打包的时候能够将多个组件进行一个统一打包的处理。）</p>
<blockquote>
<p><code>import</code>异步加载的写法实现页面模块<code>lazy loading</code>懒加载（<code>Vue</code>中的路由异步加载）：</p>
<p><code>Vue</code>中运用<code>import</code>的懒加载语句以及<code>webpack</code>的魔法注释，在项目进行<code>webpack</code>打包的时候，对不同模块进行代码分割，在首屏加载时，用到哪个模块再加载哪个模块，<u>实现懒加载进行页面的优化</u>。</p>
<ul>
<li><p>路由懒加载作为性能优化的一种手段，它能让路由组件延迟加载。</p>
</li>
<li><p>为延迟加载的路由<u>添加“魔法注释”</u>(webpackChunkName)<u>来自定义包名</u>，在打包时，该路由组件会被单独打包出来。作用就是<u>webpack在打包的时候</u>，对异步引入的库代码（lodash）进行代码分割时（需要配置webpack的SplitChunkPlugin插件），<u>为分割后的代码块取得名字</u> 。</p>
</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><ul>
<li><p>store 的 index.js 里：是类似的。通过Vue.use引入了Vuex，也通过一个 new Vuex.Store 的方式,创建了一个Vuex的实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)<span class="comment">//通过Vue.use引入了Vuex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过一个 new Vuex.Store 的方式,创建了一个Vuex的实例。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><ul>
<li><p>最终呢这两个(router、store)导出的文件，在我们的入口 main.js 里面做了一个引入。并且在new Vue 实例的时候，也相应的传入了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">//引入router</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>   <span class="comment">//引入store</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建和挂载根实例。</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,<span class="comment">//通过 router 配置参数注入路由，从而整个应用都有路由功能</span></span><br><span class="line">  store, <span class="comment">//是一种配置项，与el,data等同级</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="comment">// 现在，应用已经启动了！</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>通过注入路由器，我们可以在任何组件内通过 <code>this.$router</code> 访问路由器，也可以通过 <code>this.$route</code> 访问当前路由。</p>
<p>该文档通篇都常使用 <code>router</code> 实例。 <code>this.$router</code> 和 <code>router</code> 使用起来完全一样。使用 <code>this.$router</code> 的原因是我们并不想在每个独立需要封装路由的组件中都导入路由。</p>
<h2 id="App-vue导航切换"><a href="#App-vue导航切换" class="headerlink" title="App.vue导航切换"></a>App.vue导航切换</h2><p>你如何进行切换的操作，是靠着两个按钮的点击做切换。</p>
<ul>
<li><p>App.vue 里有一个 router-link 的标签，然后写了一个 to, to里面有路径。通过这个标签就可以帮助我们去修改当前的一个路由地址，以达到最终的一个组件切换效果。<a href="https://v3.router.vuejs.org/zh/api/#router-link">API 参考 | router-link</a></p>
</li>
<li><p>还有一个叫 router-view 的标签，就表示你这个组件要显示在哪上面。切换哪个组件就会在这个地方做一个相应的显示。</p>
<ul>
<li><strong>router-view</strong> 当你的路由<strong>path 与访问的地址相符时</strong>，会<strong>将指定的组件</strong>替换该 router-view。（如果写2个 router-view就会展示双份）</li>
</ul>
</li>
<li><p>这就是vue router给我们提供的两个组件，一个叫router-link，一个叫router-view 。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span>   </span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;about&#x27;&#125;&quot;</span>&gt;</span>About22<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在操作的时候，除了可以使用path（to）的方式以外，还可以使用name的方式来做操作。</p>
<ul>
<li>使用name的方式的话，用冒号的方式做一个属性绑定，然后在里边写一个对象name 。</li>
</ul>
<h2 id="一个路由案例"><a href="#一个路由案例" class="headerlink" title="一个路由案例"></a>一个路由案例</h2><p>那下边我们自己来写一个组件</p>
<ul>
<li>1、首先你需要去配置一个相应的页面，然后里边配置一些记录信息。（views\VideoView.vue）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是VideoView.vue里面的一个视频信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;VideoView&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2、然后配置路由信息，先import引入，再定义路由信息 path name component（router\index.js）<ul>
<li>这样后，你可以通过路由path访问到组件，但首页没有它的导航。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VideoView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/VideoView.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span> <span class="comment">// 引入了 vue-router 的库</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>) <span class="comment">// 通过 Vue.use 的方式引入Vue的官方插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [ <span class="comment">// 定义路由：每个路由应映射一个组件。</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/video&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;video&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">VideoView</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123; <span class="comment">// new VueRouter创建了一个Vue实例</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>, <span class="comment">// mode:使用history模式创建路由</span></span><br><span class="line">  <span class="attr">base</span>: process.<span class="property">env</span>.<span class="property">BASE_URL</span>,</span><br><span class="line">  routes <span class="comment">// 是操作Vue Router的重点的位置</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router <span class="comment">// new VueRouter创建了一个Vue实例</span></span><br></pre></td></tr></table></figure>

<ul>
<li>3、之后在App.vue里面，使用 router-link 的标签进行组件导航。<ul>
<li>有导航，点击导航中的，会跳转to的路径。有了path后，由于配置了路由信息，直接可以访问到相应的组件。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span>   </span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="comment">&lt;!-- &lt;router-link :to=&quot;&#123;name:&#x27;about&#x27;&#125;&quot;&gt;About22 &lt;/router-link&gt;| --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;router-link to=&quot;/video&quot;&gt;Video&lt;/router-link&gt; --&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;video&#x27;&#125;&quot;</span>&gt;</span>Videoy呀<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>路由使用技巧。</p>
<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p><a href="https://v3.router.vuejs.org/zh/guide/essentials/dynamic-matching.html">动态路由匹配 | Vue Router (vuejs.org)</a></p>
<p>对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 <code>vue-router</code> 的路由路径中使用“<strong>动态路径参数</strong>”(dynamic segment) 来达到这个效果：</p>
<blockquote>
<p>动态路径参数 以冒号开头。</p>
</blockquote>
<p>希望在一个path匹配的时候能够将不同的ID，做统一匹配的话，就在path上以冒号的方式来书写。（加冒号了它就是动态的。<br>那这个动态路由设置好以后呢，如果你希望<strong>在组件内部可以访问到这个动态路由的ID的值</strong>的话，我们可以在路由配置上加props:true , 那在相应组件内部就可以通过props的方式来做一个接收了。</p>
<p>导航组件的 to 属性可以以path的方式，也可以通过name的方式写（通过params）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router\index.js</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/video/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;video&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">VideoView</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//views\VideoView.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是VideoView.vue里面的一个视频信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>获取到的视频Id为：&#123;&#123; id &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;VideoView&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//App.vue里</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span></span><br><span class="line"><span class="language-xml"> <span class="comment">&lt;!-- 参数值以path的方式 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/video/30&quot;</span>&gt;</span>Video<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span></span><br><span class="line"><span class="language-xml"> <span class="comment">&lt;!--  参数值以name的方式 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;video&#x27;, params:&#123;id:28&#125;&#125;&quot;</span>&gt;</span>Videoy呀<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p><a href="https://v3.router.vuejs.org/zh/guide/essentials/nested-routes.html">嵌套路由 | Vue Router (vuejs.org)</a></p>
<p>但是我可能还会对视频有一些更加细分的子功能，我一级的这个功能里边还会有二级功能，即就可能会有二级的路由子组件。</p>
<ul>
<li><p>那么这时的配置方式就需要在这router的index.js里加一个叫做children的配置项，children是个数组，需要包含多条子路由。在子路由里，需要变的只有后边的部分。实际是先从父路由开始看（是父+子的路径）。</p>
</li>
<li><p>操作切换的时候：因为videoview这个组件里面要有二级路由，就在父组件VideoView里配置导航路由的切换。</p>
<ul>
<li>注意： router-view是做相应的展示。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router\index.js</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/video/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;video&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">VideoView</span>, <span class="comment">// 嵌套2级路由</span></span><br><span class="line">    <span class="comment">// 当/video/:id/info1 匹配成功，</span></span><br><span class="line">    <span class="comment">// VideoInfo1 会被渲染在 VideoView 的 &lt;router-view&gt; 中</span></span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;info1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;video-info1&#x27;</span>, <span class="attr">component</span>: <span class="title class_">VideoInfo1</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;info2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>, <span class="attr">component</span>: <span class="title class_">VideoInfo2</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// views\video\VideoInfo1.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;video-info1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>点赞二级组件：video-Info1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;video-info1&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//父组件VideoView.vue里</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是VideoView.vue里面的一个视频信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;video-info1&#x27;, params:&#123;id:28&#125;&#125;&quot;</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;video-info2&#x27;, params:&#123;id:28&#125;&#125;&quot;</span>&gt;</span>互动<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="编程式的导航"><a href="#编程式的导航" class="headerlink" title="编程式的导航"></a>编程式的导航</h2><p><a href="https://v3.router.vuejs.org/zh/guide/essentials/navigation.html">编程式的导航 | Vue Router (vuejs.org)</a></p>
<p>1、在代码处理中，除了用户能够操作以外，我们希望程序自己做一些主动跳转、网页自动跳转（如：登录过期就跳转到首页）</p>
<ul>
<li><p>created：是当实例创建完毕以后，会执行的生命周期钩子。  <a href="https://v2.cn.vuejs.org/v2/api/#created">生命周期钩子。</a></p>
</li>
<li><p>this.$router：<strong>在 Vue 实例内部，你可以通过 <code>$router</code> 访问路由实例。</strong></p>
<ul>
<li>使用 <code>router.push</code> 方法可以导航到不同的 URL。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</li>
</ul>
<p>当点击 <code>&lt;router-link&gt;</code> 时，这个 <code>router.push</code> 方法会在内部调用。所以说，点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code> 等同于调用 <code>router.push(...)</code>。</p>
<table>
<thead>
<tr>
<th>声明式</th>
<th>编程式</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td>
<td><code>router.push(...)</code></td>
</tr>
</tbody></table>
<ul>
<li>可以在任何组件内通过 <code>this.$router</code> 访问路由器。也可以通过 <code>this.$route</code> 访问当前路由：</li>
<li>router是用来进行一些路由操作的工具，一些动作。</li>
<li>route：如果要看一些路由相关的数据，比如地址、一些相应的参数、就可以通过route<br>来操作。</li>
</ul>
</li>
<li><p>setTimeOut：防止跳转得太快，看不到过程。比如说3秒以后。</p>
</li>
</ul>
<p>也就意味着当我切到info1的时候，它会在3秒后把我们自动跳回到home。实际上用户虽然没有去点home，但是自动回到home的一个方式，也就是这种编程式路由的触发方式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;video-info1&#x27;</span>,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span> &#125;)<span class="comment">//导航到这个 URL。并且当用户点击浏览器后退按钮时，则回到之前的 URL。</span></span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>2、希望在跳转路由的时候，想进行一些数据的传递。</p>
<ul>
<li>可以通过query的方式进行一些数据设置，</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//================ VideoInfo1.vue ================ </span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;video-info1&#x27;</span>,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// this.$router.push(&#123; name: &#x27;home&#x27; &#125;)</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">someData</span>: <span class="string">&#x27;Info1向Info2传递的数据&#x27;</span> &#125; &#125;)</span><br><span class="line">      <span class="comment">// 这意味着在3秒后会转到 video-info2 并做一些数据传递。</span></span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//================  VideoInfo2.vue  ================ </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#123;someData: &#x27;Info1向Info2传递的数据&#x27;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>那么这样就实现了：在路由切换的过程中，能够进行一些数据的传递。</p>
<h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><p>导航守卫也意味着除了你可以干预某一次的导航操作以外，你还可以呢去给所有导航统一做设置。</p>
<blockquote>
<p>比如：加一个加载中的这种小效果。那意味着你每一次路由器的时候，其实都需要。</p>
</blockquote>
<ul>
<li><p><code>router.beforeEach</code> 注册一个全局前置守卫：是<strong>在你每一次导航被触发</strong>的之前，它都会进行这个守卫的触发。</p>
</li>
<li><p>（）中是函数，需要接受三个值 to from next 。</p>
</li>
<li><p>比如说你从a切到b，是from a toB 。然后next是让程序继续往后走的方式。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router 的 index.js 里：在 new VueRouter下方的语句</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;路由触发了&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p><a href="https://v3.vuex.vuejs.org/zh/">Vuex 是什么？ | Vuex (与 Vue 2 匹配的 Vuex 3 的文档)</a></p>
<p>Vue官方的，全局状态管理工具VueX，来进行状态的管理，集中式存储管理应用的所有组件的状态。</p>
<p>它只是一个统一的数据存储方式。</p>
<p>在 store\index.js文件里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="title function_">state</span> () &#123; <span class="comment">//全局用，不建议改变</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">loginStatus</span>: <span class="string">&#x27;用户已经登录&#x27;</span>,</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="state存"><a href="#state存" class="headerlink" title="state存"></a>state存</h2><ul>
<li><p>state 就是一个存数据的地方。可以<strong>全局存</strong>，然后其他<strong>任意组件位置都可以去访问</strong>。</p>
<ul>
<li><p>你要存的话，需要先把这个数据在这做一个声明，声明之后就可以在任意的地方去用了。建议：把这个值写成函数的方式，类似于在组件里边使用的那个data。然后这里边我们就可以写一些值了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">loginStatus</span>) <span class="comment">//进行访问</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局用的，不建议改。如果要改，只能在mutation里边操作</p>
</li>
</ul>
</li>
</ul>
<h2 id="mutation改"><a href="#mutation改" class="headerlink" title="mutation改"></a>mutation改</h2><ul>
<li><p>mutation：如果你希望在全局中去修改状态的话。</p>
<ul>
<li><p>你任意的一个修改，都在 mutation 里面去封装一次，<strong>mutation 相当于 methods</strong>，就是一个函数。</p>
</li>
<li><p>方法：这里边能接第一个参数叫 state，就是你希望去访问到state.里边的count</p>
</li>
<li><p>访问：注意它不是直接去访问那个 mutation，而是<strong>通过commit的方式做一个提交</strong>。这第一个参数 mutation的名称，比如 changeCount 。然后参数2写你的值。</p>
</li>
<li><p>mutations它必须是同步的。</p>
<ul>
<li>vue devtools 它里边可以去监测一些相关的内容，比如说我们可以看到有组件。<ul>
<li>时间线timeline这个timeline可以记录应用的在做一些操作 或者一些种状态变更的时候，你能够在这个过程中看到，在每个时间点都干了什么事，他有一个清晰的记录，但必须是同步的。（点击选择Vuex Mutations再start recording，再刷新）</li>
<li>假如是异步的，他只能记住你最终的结果。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="title function_">changeCount</span>(<span class="params">state, num</span>) &#123;</span><br><span class="line">    state.<span class="property">count</span> += num</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutation执行了，count值为&#x27;</span>, state.<span class="property">count</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>在VideoInfo2.vue里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">loginStatus</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">handelCount</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handelCount</span> () &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, <span class="number">1</span>) <span class="comment">// state.count += num</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="actions异步"><a href="#actions异步" class="headerlink" title="actions异步"></a>actions异步</h2><p>actions:这是用来做异步包装的。 异步的，只能记住你最终的结果。</p>
<ul>
<li><p>使用：就是你需要在mutation上包一层。</p>
</li>
<li><p>比如：我希望他延迟一段时间去出发，</p>
<ul>
<li>这里呢接第一个叫store，所有的state的修改都是在mutation里边去做的，你只能通过store点commit的方式，来去执行changeCount。然后再把你的NUM传进来。</li>
<li>使用：这块我们使用dispatch，就是执行的意思。</li>
</ul>
</li>
</ul>
<p>场景：如果你要用时间线工具，就要通过 actions 来做异步处理，利于在调试工具里面，去看它相关的状态。</p>
<p>如果你希望在全局中去修改状态的话</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="title function_">changeCount</span>(<span class="params">state, num</span>) &#123;</span><br><span class="line">    state.<span class="property">count</span> += num</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="title function_">delayChangeCount</span> (store, num) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, num)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>在VideoInfo2.vue里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>,</span><br><span class="line">      <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handelCount</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handelCount</span> () &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, <span class="number">1</span>) <span class="comment">// state.count += num</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;delayChangeCount&#x27;</span>, <span class="number">10</span>) <span class="comment">// 调用异步的</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="getters缓存"><a href="#getters缓存" class="headerlink" title="getters缓存"></a>getters缓存</h2><p>getters就相当于我们的计算属性啊，它是有一个缓存功能。</p>
<ul>
<li>如果调用多次，但是因为内容没有变，所以他只有一回。<ul>
<li>下面的输出结果：<ul>
<li>getters执行了（1次）</li>
<li>6（3次）</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">state</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">loginStatus</span>: <span class="string">&#x27;用户已经登录&#x27;</span>,</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">  <span class="title function_">len</span> (state) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getters执行了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">loginStatus</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>在VideoInfo2.vue里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>,</span><br><span class="line">      <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handelCount</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handelCount</span> () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">len</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">len</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">len</span>) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p><a href="https://v3.vuex.vuejs.org/zh/guide/modules.html">Module | Vuex (vuejs.org)</a></p>
<ul>
<li>Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</li>
</ul>
<p>不同的功能需要有不同的全局处理。比如说a里面全局有俩值，当然这俩值不需要被b用。<br>这种情况下为了避免混乱，让数据更好管理一些，就可以使用模块。</p>
<ul>
<li>写法：它这里边呢包含一个a，可能包含一个b。a里边有什么呢，有state、什么mutation、actions，b里边呢其实也是一样的这一堆。</li>
<li>使用：用的时候就会变成：比如变成store点a，就多包了一层。</li>
</ul>
<p><a href="https://blog.csdn.net/m0_60337445/article/details/122891271">Vuex中modules的用法_vuex中的modules创建使用-CSDN博客</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">modA</span>: &#123; <span class="comment">// 建议单独写个文件里面，moduleA.js里。</span></span><br><span class="line">      <span class="title function_">state</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">aloginStatus</span>: <span class="string">&#x27;aaa用户已经登录&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">changeCount</span>(<span class="params">state, num</span>) &#123;</span><br><span class="line">          state.<span class="property">count</span> += num</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;amutation执行了，count值为&#x27;</span>, state.<span class="property">count</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在VideoInfo2.vue里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>,</span><br><span class="line">      <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handelCount</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handelCount</span> () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">loginStatus</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">modA</span>.<span class="property">aloginStatus</span>) <span class="comment">//访问state是这样，其他参考别的。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1><p>参考这个：<a href="https://todomvc.com/examples/vue/dist/#/">TodoMVC: Vue</a></p>
<h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>直接通过create-vue的方式</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm create vue@<span class="number">2</span></span><br><span class="line">Ok to proceed? (y) y</span><br><span class="line"></span><br><span class="line">Vue.js - The Progressive JavaScript Framework</span><br><span class="line"></span><br><span class="line">? Project name: » ling-todos</span><br><span class="line"></span><br><span class="line"># 下面全选no(ESLint 也是no)</span><br><span class="line">√ Project name: ... ling-todos</span><br><span class="line">√ Add TypeScript? ... No / Yes</span><br><span class="line">√ Add JSX Support? ... No / Yes</span><br><span class="line">√ Add Vue Router <span class="keyword">for</span> Single Page Application development? ... No / Yes</span><br><span class="line">√ Add Pinia <span class="keyword">for</span> state management? ... No / Yes</span><br><span class="line">√ Add Vitest <span class="keyword">for</span> Unit Testing? ... No / Yes</span><br><span class="line">√ Add Cypress <span class="keyword">for</span> both Unit and End-to-End testing? ... No / Yes</span><br><span class="line">√ Add ESLint <span class="keyword">for</span> code quality? ... No / Yes</span><br><span class="line"></span><br><span class="line">Scaffolding project <span class="keyword">in</span> D:\soft\develop\idea\pros\my\qianlearn\vuelearn\main\wuyou\finalCase\ling-todos...</span><br><span class="line"></span><br><span class="line">Done. Now run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cd</span> ling-todos</span><br><span class="line">  npm install</span><br><span class="line">  npm run dev</span><br><span class="line"># 然后就进行上面的<span class="number">3</span>个命令了。</span><br></pre></td></tr></table></figure>

<p>好项目运行完毕我们打开一下，那这块默认的就是vue2项目</p>
<ul>
<li>基础结构：<ul>
<li>更改：而我们现在需要准备一些静态结构。</li>
<li>那这里没必要自己写那些HTML，用github的todomvc-app-template <a href="https://github.com/tastejs/todomvc-app-template">GitHub-todomvc-app-template:</a></li>
<li>替换App.vue里面的div，style，script也换。</li>
</ul>
</li>
</ul>
<h2 id="功能制作"><a href="#功能制作" class="headerlink" title="功能制作"></a>功能制作</h2><p><a href="https://todomvc.com/examples/vue/dist/#/">TodoMVC: Vue</a></p>
<p>首先需要响应式数据——data 。</p>
<ul>
<li>存很多个todo事项，用数组结构。而每个todo事项用对象。</li>
</ul>
<p>实现功能</p>
<h3 id="1勾选"><a href="#1勾选" class="headerlink" title="1勾选"></a>1勾选</h3><p>1、点击打钩后是完成状态</p>
<p>首先要v-for进行展示，完成状态：class&#x3D;”completed” 。</p>
<p>点击打钩后是完成状态：先使用v-bind，但勾选并没有改变状态。这是因为我们去进行界面操作了他并没有反向返回给数据，故使用v-model指令。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">todos</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;事项1&#x27;</span>,</span><br><span class="line">            <span class="attr">completed</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">22</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;事项2&#x27;</span>,</span><br><span class="line">            <span class="attr">completed</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,    </span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul class=&quot;todo-list&quot;&gt;</span><br><span class="line">        &lt;li </span><br><span class="line">        v-for=&quot;todo in todos&quot; </span><br><span class="line">        :key=&quot;todo.id&quot;</span><br><span class="line">        :class=&quot;&#123;completed: todo.completed&#125;&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">            &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; </span><br><span class="line">            v-model=&quot;todo.completed&quot;&gt;</span><br><span class="line">            &lt;label&gt;&#123;&#123;todo.title&#125;&#125;&lt;/label&gt;</span><br><span class="line">            &lt;button class=&quot;destroy&quot;&gt;&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;input class=&quot;edit&quot; value=&quot;Create a TodoMVC template&quot;&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<h3 id="toggleAll"><a href="#toggleAll" class="headerlink" title="toggleAll"></a>toggleAll</h3><p>2、toggleAll，全部打钩-全部是完成状态，全部取消。</p>
<p>图标的背后竟然是个checked复选框，他有选中or取消的状态。</p>
<p>点击之后有个函数，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   &lt;input @click=<span class="string">&quot;toggleAll&quot;</span></span><br><span class="line">      id=<span class="string">&quot;toggle-all&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;toggle-all&quot;</span> type=<span class="string">&quot;checkbox&quot;</span>&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;toggle-all&quot;</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">      </span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">toggleAll</span>(<span class="params">event</span>) &#123;<span class="comment">//实现点击之后全部是完成/取消状态。</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;type:&quot;</span>+ event.<span class="property">type</span>) <span class="comment">//click</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>) <span class="comment">//触发元素：&lt;input id=...class=&quot;toggle-all&quot;&gt;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;checked：&quot;</span>+ event.<span class="property">target</span>.<span class="property">checked</span>) <span class="comment">//checkbox的选中状态</span></span><br><span class="line">          <span class="comment">//对数组的每一项进行操作。遍历数组，进行操作</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">          todo.<span class="property">completed</span> = event.<span class="property">target</span>.<span class="property">checked</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;    </span><br><span class="line">&#125;,            </span><br></pre></td></tr></table></figure>

<h3 id="筛选visibility"><a href="#筛选visibility" class="headerlink" title="筛选visibility"></a>筛选visibility</h3><p>3、处理All、Active、Completed的可见性</p>
<ul>
<li><p>如果实现点击之后,对应筛选出未完成的todo ，筛选后：v-for的内容就不是todos，初始情况下怎么确定是all的状态？</p>
</li>
<li><p>应该不是简单的点击，应该是与路径有关。</p>
</li>
<li><p>url上hash值，对应筛选出不同状态的todo</p>
</li>
</ul>
<p>就需要去辨别一下当前hash的值（做一个hash值的监控），它是一个什么样的情况，然后在列表里对todos相应的做一个处理就可以了。</p>
<p>1）先辨别一下当前hash的值（做一个hash值的监控），它是一个什么样的情况。</p>
<ul>
<li><strong>监控hash值</strong>，hash的改变不会导致页面重新加载。应该是实例被挂载后就触发吧——mounted。<br>当你的元素挂载完毕以后，在mounted钩子里面做操作。</li>
<li>但处理的操作肯定不能在生命周期钩子里去写，而是应该用单独的methods来操作（获取hash值）。<ul>
<li>window.location.hash就可以获取到hash的值，但控制台打印后可发现它其实是包含一些额外部分的。去除掉不需要的部分。</li>
<li>字符串的replace替换，但是 杠&#x2F; 跟正则标识是一样的，所以加一个反斜线转义一下。写个问号就是&#x2F;是有或者是没有，有只能有一次。然后匹配完的时候变成替换成空。</li>
</ul>
</li>
</ul>
<p>2）然后在列表里对todos相应的做一个处理。</p>
<ul>
<li><p>利用visibility进行最终这个todos的筛选啊</p>
<ul>
<li>为了<u>不让它每次都重新做操作，直接给他一个计算属性</u>，这里边首先就是要根据你的this点visibility，返回的todo里面的数据也不一样。</li>
<li>这块我们直接return了，所以连break都没必要写了。</li>
</ul>
</li>
<li><p>筛选后的结果应该是在初始v-for的时候就取得，就使用。。</p>
</li>
</ul>
<p>如果是active了，那就需要从todos里面遍历，就通过filter（是一个数组方法）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">todos</span>: [...],</span><br><span class="line">        <span class="attr">visibility</span>: <span class="string">&#x27;all&#x27;</span> <span class="comment">//默认是all的状态。</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">hashChangeDeal</span>(<span class="params"></span>)&#123; <span class="comment">// hash值变化了：</span></span><br><span class="line">        <span class="comment">// 获取url的hash值。当前的可见性用visibility（全局存作为属性，因为要用它。）</span></span><br><span class="line">        <span class="keyword">const</span> ahash = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>; <span class="comment">// 将#/替换为空 </span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ahash:&#x27;</span>+ ahash) <span class="comment">// 是#/completed</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">visibility</span> = ahash.<span class="title function_">replace</span>(<span class="regexp">/#\/?/</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted:&#x27;</span>+ <span class="variable language_">this</span>.<span class="property">visibility</span>) <span class="comment">// 是completed</span></span><br><span class="line">      &#125; </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>:&#123; <span class="comment">// 利用visibility进行最终这个todos的筛选啊</span></span><br><span class="line">      <span class="title function_">filterTodos</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">visibility</span>) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;all&#x27;</span>: <span class="comment">// href=&quot;#/all&quot; 改成all （语义更强）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todos</span></span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;active&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>( <span class="function"><span class="params">todo</span> =&gt;</span> !todo.<span class="property">completed</span>)</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;completed&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>( <span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">completed</span>)</span><br><span class="line">          <span class="attr">default</span>:</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">visibility</span> = <span class="string">&#x27;all&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todos</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123; <span class="comment">// 监控hash值是否变化：</span></span><br><span class="line">      <span class="comment">// 当URL的片段标识符更改时，将触发hashchange事件，然后调用自定义函数处理。</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="variable language_">this</span>.<span class="property">hashChangeDeal</span>);</span><br><span class="line">    &#125;,   </span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">//并且li标签里改为计算属性。</span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>  <span class="attr">v-for</span>=<span class="string">&quot;todo in filterTodos&quot;</span> <span class="attr">......</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="筛选后红框框"><a href="#筛选后红框框" class="headerlink" title="筛选后红框框"></a>筛选后红框框</h3><p>3、处理All、Active、Completed选中后有红框框。</p>
<ul>
<li>红框框是 class&#x3D;selected的类。</li>
<li>v-bind绑定，利用visibility进行最终这个todos的筛选啊，也判断当前visibility是否是select的。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;filters&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;selected: visibility ==&#x27;all&#x27;&#125;&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;#/all&quot;</span>&gt;</span>All<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;selected: visibility ==&#x27;active&#x27;&#125;&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;#/active&quot;</span>&gt;</span>Active<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;selected: visibility ==&#x27;completed&#x27;&#125;&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;#/completed&quot;</span>&gt;</span>Completed<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="刷新后"><a href="#刷新后" class="headerlink" title="刷新后"></a>刷新后</h3><p>4、刷新后避免重新加载，仍然是Active或Completed的状态。</p>
<ul>
<li>现在：刷新后仍然是这个url，但是是all状态的todos 。URL没有变化，但响应不对。</li>
<li>所以为了在刷新的时候，也能够正常去进行。就在mounted的时候主动调一次hashChangeDeal函数（代表即使URL没有变化，但页面内容渲染完成后也要保持一致性。</li>
<li>使得：刷新后可以去，切换到我们这个active的一个情况。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 监控hash值是否变化：</span></span><br><span class="line">  <span class="comment">// 当URL的片段标识符更改时，将触发hashchange事件，然后调用自定义函数处理。</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="variable language_">this</span>.<span class="property">hashChangeDeal</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">hashChangeDeal</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h3><p>5、比如说我们的多少个元素。</p>
<ul>
<li>?  items left 指的是未完成的。</li>
<li>直接算，也可以用计算属性的return</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;span <span class="keyword">class</span>=<span class="string">&quot;todo-count&quot;</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; todos.filter(todo =&gt; !todo.completed).length &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span> item left&lt;/span&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//或者是计算属性的return</span></span><br><span class="line">      <span class="title function_">itemsLeft</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> !todo.<span class="property">completed</span>).<span class="property">length</span></span><br><span class="line">      &#125;</span><br><span class="line"> &lt;span <span class="keyword">class</span>=<span class="string">&quot;todo-count&quot;</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; itemsLeft &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span> item left&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><p>6、输入框新增</p>
<p><a href="https://blog.csdn.net/Hero_rong/article/details/82685423">往数组里面添加对象，往对象里面添加元素_对象数组添加元素-CSDN博客</a></p>
<ul>
<li><p>回车——调用函数。</p>
</li>
<li><p>可以百度：JavaScript 获取 input 输入框内容</p>
</li>
<li><p>注意：使用事件对象event，那定义函数使用<strong>addItem</strong>(e) {}，<strong>调用</strong>函数方式要写<strong>成不带括号</strong>的”addItem”。</p>
<blockquote>
<p>如果写成带带括号的”addItem()”，会报错。</p>
</blockquote>
</li>
</ul>
<p>！！！！注意输入的内容需要去除前后空格，并且为空时不算！！！。  </p>
<p>！！！回车后，清除输入框内容。——（仔细看操作前后的变化！！！）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// methods:里</span></span><br><span class="line">      <span class="title function_">addItem</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(e.target) // &lt;input placeholder=&quot;What...&gt;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>) <span class="comment">// 获取 input 输入框内容</span></span><br><span class="line">        <span class="comment">//注意要去除前后空格，并且为空时不算。</span></span><br><span class="line">        <span class="comment">//新增</span></span><br><span class="line">        <span class="keyword">const</span> title1= e.<span class="property">target</span>.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">if</span>(!title1)&#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> todo = &#123;<span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), <span class="attr">title</span>:title1, <span class="attr">completed</span>: <span class="literal">false</span>&#125;</span><br><span class="line">        <span class="comment">// console.log(todo) // &#123;id: 1714469430306, title: &#x27;111111&#x27;, completed: false&#125;</span></span><br><span class="line">        <span class="comment">// this.todos.push(todo) //向数组的末尾添加一个</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">unshift</span>(todo) <span class="comment">//向数组的开头添加。也可直接用大括号添加对象。</span></span><br><span class="line">        <span class="comment">//回车后，清除输入框内容。</span></span><br><span class="line">        e.<span class="property">target</span>.<span class="property">value</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment">// console.log(this.todos)</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// template里</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;new-todo&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;addItem&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;What needs to be done?&quot;</span> <span class="attr">autofocus</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="删除单个"><a href="#删除单个" class="headerlink" title="删除单个"></a>删除单个</h3><p>7、删除单个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// methods:里</span></span><br><span class="line">      <span class="title function_">deleteItem</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;deleteItem: &#x27;</span>) <span class="comment">// &lt;input placeholder=&quot;What...&gt;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(id) <span class="comment">// &lt;input placeholder=&quot;What...&gt;</span></span><br><span class="line">        <span class="comment">//使用filter()方法删除元素 </span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">todos</span> = <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>( <span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">id</span> != id)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">todos</span>)</span><br><span class="line">        <span class="comment">//需要再刷新下吗？ ——事实不需要，v-for就是实时的。</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template里</span></span><br><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">&quot;destroy&quot;</span> @click=<span class="string">&quot;deleteItem(todo.id)&quot;</span>&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>方法2：:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// methods:里</span></span><br><span class="line">      <span class="title function_">deleteItem</span>(<span class="params">todo</span>) &#123;</span><br><span class="line">        <span class="comment">//使用splice()方法 删除指定元素，需要查找下标。</span></span><br><span class="line">        <span class="comment">//下标用indexOf</span></span><br><span class="line">        <span class="keyword">let</span> idx = <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">indexOf</span>(todo)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">splice</span>(idx, <span class="number">1</span>) <span class="comment">// 从下标为idx的位置开始，删除1个元素。</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(idx) </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">todos</span>) <span class="comment">//splice直接改变原始数组。</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template里</span></span><br><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">&quot;destroy&quot;</span> @click=<span class="string">&quot;deleteItem(todo)&quot;</span>&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="clear完成的"><a href="#clear完成的" class="headerlink" title="clear完成的"></a>clear完成的</h3><p>8、清除已经完成的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// methods:里</span></span><br><span class="line">      <span class="title function_">clearCompleted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 清除已经完成的。</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">todos</span> = <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>( <span class="function"><span class="params">todo</span> =&gt;</span> !todo.<span class="property">completed</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template里</span></span><br><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">&quot;clear-completed&quot;</span> @click=<span class="string">&quot;clearCompleted&quot;</span>&gt;<span class="title class_">Clear</span> completed&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="底部效果"><a href="#底部效果" class="headerlink" title="底部效果"></a>底部效果</h3><p>9、当你所有的这个项目都被清除掉的话，底部的折叠效果 应该是不显示的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//data() 里。</span></span><br><span class="line"><span class="attr">footerShow</span>: <span class="literal">false</span>  </span><br><span class="line"><span class="comment">// computed：里  （是个属性。计算属性，来放逻辑。）</span></span><br><span class="line">      <span class="title function_">footerIsShow</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//默认页脚应隐藏，并在有待办事项时显示</span></span><br><span class="line">        <span class="comment">// len =0，不展示。</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">todos</span>.<span class="property">length</span> == <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">footerShow</span> = <span class="literal">false</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">footerShow</span> = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">footerShow</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template里。（不仅包括样式，还包括整体内的元素也不显示）</span></span><br><span class="line">    &lt;footer :<span class="keyword">class</span>=<span class="string">&quot;&#123;footer: footerIsShow&#125;&quot;</span> v-show=<span class="string">&quot;footerIsShow&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="items"><a href="#items" class="headerlink" title="items"></a>items</h3><p>10:&gt;1项会变成items</p>
<p>未完成的为0： 0 items left! 。未完成的为1： 1 item left! 。未完成的为2： 2 items left! 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//data() 里。</span></span><br><span class="line">        <span class="attr">leftItem</span>: <span class="string">&#x27;items&#x27;</span></span><br><span class="line"><span class="comment">// computed：里  （是个属性。计算属性，来放逻辑。）</span></span><br><span class="line">      <span class="title function_">leftItems</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// if(this.todos.filter(todo =&gt; !todo.completed).length &lt;= 1)&#123;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> !todo.<span class="property">completed</span>).<span class="property">length</span> == <span class="number">1</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">leftItem</span> = <span class="string">&#x27;item&#x27;</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">leftItem</span> = <span class="string">&#x27;items&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">leftItem</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template里。（不仅包括样式，还包括整体内的元素也不显示）</span></span><br><span class="line">      &lt;!-- <span class="title class_">This</span> should be <span class="string">`0 items left`</span> by <span class="keyword">default</span> --&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;todo-count&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; itemsLeft &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> &#123;&#123;leftItems&#125;&#125; left<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="双击编辑"><a href="#双击编辑" class="headerlink" title="双击编辑"></a>双击编辑</h3><p>11：双击后可以做编辑。用dblclick进行内容的更改，然后再通过v-model做一个内容的控制。</p>
<blockquote>
<p>通过操作todomvc的官网，可以看到在双击编辑时类为editing。</p>
<p><img src="/posts/VueNote/830bd2954788092beaffc106faac772.png" alt="830bd2954788092beaffc106faac772" loading="lazy"></p>
</blockquote>
<ul>
<li>已经完成的也可以修改。</li>
<li>v-show使这个类双击使才展示input框。</li>
<li>尚未实现：VUE 点击其它区域触发事件 。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//data() 里。</span></span><br><span class="line">        <span class="attr">todos</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;事项1&#x27;</span>,</span><br><span class="line">            <span class="attr">completed</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">editing</span>: <span class="literal">false</span></span><br><span class="line">          &#125;],</span><br><span class="line"><span class="comment">// methods:里</span></span><br><span class="line">      <span class="title function_">editItem</span>(<span class="params">todo</span>)&#123; <span class="comment">//实现回车后保存，不可编辑</span></span><br><span class="line">        <span class="comment">//保存到数组里</span></span><br><span class="line">        <span class="comment">//v-model 已经实时修改了。只需改变状态。</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(todo.<span class="property">title</span>) </span><br><span class="line">        todo.<span class="property">editing</span>=<span class="literal">false</span></span><br><span class="line">        <span class="comment">// console.log(this.todos)</span></span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">editText</span>(<span class="params">todo</span>) &#123;<span class="comment">//实现双击后可编辑</span></span><br><span class="line">        <span class="comment">//  console.log(&#x27;editText&#x27;) </span></span><br><span class="line">        <span class="comment">//  console.log(todo.title) </span></span><br><span class="line">         todo.<span class="property">editing</span>=<span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// template里</span></span><br><span class="line">&lt;ul class=&quot;todo-list&quot;&gt;</span><br><span class="line">  &lt;!-- 显示列表项的结构列表项在编辑时应获得类“editing”，在标记为已完成时应获得“completed” 。所以应该是个属性,不然全部可编辑应该不对--&gt;</span><br><span class="line">  &lt;li </span><br><span class="line">  v-for=&quot;todo in filterTodos&quot; </span><br><span class="line">  :key=&quot;todo.id&quot;</span><br><span class="line">  :class=&quot;&#123;completed: todo.completed, editing:todo.editing&#125;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">      &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; </span><br><span class="line">      v-model=&quot;todo.completed&quot;&gt;</span><br><span class="line">      &lt;label @dblclick=&quot;editText(todo)&quot; &gt;&#123;&#123;todo.title&#125;&#125; &lt;/label&gt;</span><br><span class="line">      &lt;button class=&quot;destroy&quot; @click=&quot;deleteItem(todo)&quot;&gt;&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;input :class=&quot;&#123;edit:todo.editing&#125;&quot; v-model=&quot;todo.title&quot; @keyup.enter=&quot;editItem(todo)&quot; v-show=&quot;todo.editing&quot;&gt;</span><br><span class="line">//&lt;input @dblclick=&quot;editText&quot; :class=&quot;&#123;edit:isEditing&#125;&quot;  v-show=&quot;isEditing&quot; value=&quot;Create a TodoMVC template&quot;&gt;</span><br><span class="line">  &lt;/li&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过操作官网，可以看到在双击编辑时类为editing，&lt;li class&#x3D;”editing”，<br>对应这个&lt;input @dblclick&#x3D;”editText” class&#x3D;”edit” value&#x3D;”Create a TodoMVC template”&gt;</p>
<p>天哪，duplicate attribute: :class，说明v-bind不能绑定2个。</p>
<ul>
<li>双击，显示todo的内容，出现编辑框。<br>回车后保存todo的内容。</li>
</ul>
<p>在编辑时应获得类“editing”，在标记为已完成时应获得“completed”</p>
<p>默认情况下是completed类，双击下是另一个类。</p>
<p>:class&#x3D;”{completed: todo.completed, editing:isEditing}”</p>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记</title>
    <url>/posts/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="vue核心语法"><a href="#vue核心语法" class="headerlink" title="vue核心语法"></a>vue核心语法</h1><p><img src="/posts/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7e7d013ec57818bd9e0b93afee147ee13decdbe94401a0-DfOpXx.png" alt="7e7d013ec57818bd9e0b93afee147ee13decdbe94401a0-DfOpXx" loading="lazy"></p>
<h2 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Vue.js Example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!-- 插值表达式 --&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; title &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; content &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; output() &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; output() &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; output() &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;!-- computed不用加() --&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; outputCon &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; outputCon &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; outputCon &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;!-- 4.指令 --&gt;</span><br><span class="line">         &lt;!-- 内容指令   --&gt;&lt;!-- text,html都会覆盖原始内容 --&gt;</span><br><span class="line">         &lt;p v-text=&quot;htmlContent&quot;&gt;123&lt;/p&gt;</span><br><span class="line">         &lt;p v-html=&quot;htmlContent&quot;&gt;123&lt;/p&gt;</span><br><span class="line">         </span><br><span class="line">          &lt;!-- 渲染指令 --&gt;</span><br><span class="line">        &lt;p v-for=&quot;item in 3&quot;&gt;Elaina&lt;/p&gt;</span><br><span class="line">        &lt;p v-for=&quot;item in arr&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p v-for=&quot;(item,key,index) in obj&quot;&gt;&#123;&#123;item&#125;&#125;&amp;nbsp;&#123;&#123;key&#125;&#125;&amp;nbsp;&#123;&#123;index&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p v-if=&quot;&quot;&gt;1017&lt;/p&gt;</span><br><span class="line">        &lt;p v-show=&quot;&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 属性指令 --&gt;</span><br><span class="line">         &lt;p v-bind:title=&quot;title&quot;&gt;123&lt;/p&gt;</span><br><span class="line">         &lt;p :title=&quot;title&quot;&gt;123&lt;/p&gt;</span><br><span class="line">            &lt;!-- v-bind可以简写成: --&gt;</span><br><span class="line"></span><br><span class="line">         &lt;!-- 事件指令 --&gt;</span><br><span class="line">          &lt;button v-on:click=&quot;output&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">          &lt;button @click=&quot;output&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">          &lt;!-- v-on简写成@ --&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- 表单指令 --&gt;</span><br><span class="line">          &lt;hr&gt; </span><br><span class="line">          &lt;p&gt;表单指令&lt;/p&gt;</span><br><span class="line">           &lt;input type=&quot;text&quot; v-model=&quot;inputValue&quot;&gt;</span><br><span class="line">           &lt;p v-text=&quot;inputValue&quot;&gt;&lt;/p&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">           &lt;!-- 5.修饰符 --&gt;</span><br><span class="line">            &lt;p&gt;修饰符&lt;/p&gt;</span><br><span class="line">           &lt;input type=&quot;text&quot; v-model.trim=&quot;inputValue&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 1. 响应式数据与插值表达式</span><br><span class="line">        const vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    title: &#x27;这是文本&#x27;,</span><br><span class="line">                    content: &#x27;这是内容&#x27;,</span><br><span class="line">                    htmlContent: &#x27;&lt;h1&gt;这是html内容&lt;/h1&gt;&#x27;,</span><br><span class="line">                    arr:[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;],</span><br><span class="line">                    obj:&#123;a:1,b:2,c:3&#125;,</span><br><span class="line">                    inputValue:&#x27;默认内容&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //1.3函数methods属性</span><br><span class="line">            methods: &#123;</span><br><span class="line">                output()&#123;</span><br><span class="line">                    console.log(&quot;output&quot;);</span><br><span class="line">                    return &quot;Test&quot;+this.title + this.content;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //2计算属性computed属性:具有缓存性质，只有当计算属性的值发生变化时，才会重新计算</span><br><span class="line">            computed: &#123;</span><br><span class="line">                outputCon()&#123;</span><br><span class="line">                    console.log(&quot;computed&quot;);</span><br><span class="line">                    return &quot;Test&quot;+this.title + this.content;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //3.侦听器watch属性:监听数据的变化，并执行相应的函数</span><br><span class="line">            watch: &#123;</span><br><span class="line">                title(newVal, oldVal)&#123;</span><br><span class="line">                    console.log(&quot;title changed&quot;, newVal, oldVal);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>在 Vue.js 中，响应式数据、插值表达式、计算属性、侦听器和指令是关键概念。以下是详细讲解和知识笔记：</p>
<h2 id="1-响应式数据-Reactive-Data"><a href="#1-响应式数据-Reactive-Data" class="headerlink" title="1. 响应式数据 (Reactive Data)"></a>1. 响应式数据 (Reactive Data)</h2><p>Vue.js 中的数据对象是响应式的，即当数据发生变化时，视图会自动更新。通过 <code>data</code> 定义的数据是响应式的，Vue.js 使用<strong>依赖追踪</strong>来检测数据的变化并更新 DOM。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;这是标题&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;这是内容&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在模板中使用 <code>&#123;&#123; title &#125;&#125;</code>，当 <code>title</code> 变化时，DOM 会自动更新。</p>
<h2 id="2-插值表达式-Interpolation"><a href="#2-插值表达式-Interpolation" class="headerlink" title="2. 插值表达式 (Interpolation)"></a>2. 插值表达式 (Interpolation)</h2><p>插值表达式用于将数据绑定到 HTML 中。使用 <code>&#123;&#123; &#125;&#125;</code> 可以直接在模板中显示数据。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="comment">&lt;!-- 显示 title 的值 --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-计算属性-Computed-Properties"><a href="#3-计算属性-Computed-Properties" class="headerlink" title="3. 计算属性 (Computed Properties)"></a>3. 计算属性 (Computed Properties)</h2><p>计算属性是依赖其他数据计算得到的值，具有<strong>缓存</strong>的功能，只有相关依赖变化时才会重新计算。和方法不同，计算属性不会重复执行，除非依赖的数据改变。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">outputCon</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Test &quot;</span> + <span class="variable language_">this</span>.<span class="property">title</span> + <span class="variable language_">this</span>.<span class="property">content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>title</code> 或 <code>content</code> 变化时，<code>outputCon</code> 会被重新计算，否则将直接返回缓存的值。</p>
<h2 id="4-侦听器-Watchers"><a href="#4-侦听器-Watchers" class="headerlink" title="4. 侦听器 (Watchers)"></a>4. 侦听器 (Watchers)</h2><p>侦听器用于监听数据的变化，并在数据变化时执行特定操作，常用于异步任务或需要手动执行额外逻辑时。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="title function_">title</span>(<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Title changed from&#x27;</span>, oldVal, <span class="string">&#x27;to&#x27;</span>, newVal);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每当 <code>title</code> 改变时，侦听器会记录新旧值。</p>
<h2 id="5-指令-Directives"><a href="#5-指令-Directives" class="headerlink" title="5. 指令 (Directives)"></a>5. 指令 (Directives)</h2><p>Vue 提供了很多指令来操作 DOM，常见的有 <code>v-text</code>, <code>v-html</code>, <code>v-if</code>, <code>v-show</code>, <code>v-for</code>, <code>v-bind</code>, <code>v-on</code> 等。</p>
<h3 id="内容指令"><a href="#内容指令" class="headerlink" title="内容指令"></a>内容指令</h3><ul>
<li><code>v-text</code>：替换元素的文本内容。</li>
<li><code>v-html</code>：将数据作为 HTML 插入，允许解析 HTML 标签。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="渲染指令"><a href="#渲染指令" class="headerlink" title="渲染指令"></a>渲染指令</h3><ul>
<li><code>v-for</code>：循环渲染列表。</li>
<li><code>v-if</code>：根据条件渲染元素，元素不存在于 DOM 中。</li>
<li><code>v-show</code>：根据条件显示&#x2F;隐藏元素，元素仍然存在于 DOM 中。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in arr&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;showItem&quot;</span>&gt;</span>显示内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;showItem&quot;</span>&gt;</span>显示或隐藏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="属性指令"><a href="#属性指令" class="headerlink" title="属性指令"></a>属性指令</h3><ul>
<li><code>v-bind</code>：动态绑定元素的属性，可以简写为 <code>:</code>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 简写 --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件指令"><a href="#事件指令" class="headerlink" title="事件指令"></a>事件指令</h3><ul>
<li><code>v-on</code>：绑定事件监听器，可以简写为 <code>@</code>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- 简写 --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表单指令"><a href="#表单指令" class="headerlink" title="表单指令"></a>表单指令</h3><ul>
<li><code>v-model</code>：双向绑定表单元素的数据。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; inputValue &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-修饰符-Modifiers"><a href="#6-修饰符-Modifiers" class="headerlink" title="6. 修饰符 (Modifiers)"></a>6. 修饰符 (Modifiers)</h2><p>修饰符是对指令的附加操作，常见于事件处理和表单输入中。例如：</p>
<ul>
<li><code>.trim</code>：去除输入框两端的空白。</li>
<li><code>.lazy</code>：在 <code>input</code> 失焦时更新数据，而不是在每次输入时更新。</li>
</ul>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;inputValue&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 输入时自动去除两端空格 --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="知识笔记总结："><a href="#知识笔记总结：" class="headerlink" title="知识笔记总结："></a>知识笔记总结：</h2><ol>
<li><strong>响应式数据</strong>让 Vue.js 能够自动追踪数据变化并更新 DOM。</li>
<li><strong>插值表达式</strong>用于将数据直接显示在 HTML 中。</li>
<li><strong>计算属性</strong>具有缓存功能，用于处理复杂的逻辑计算。</li>
<li><strong>侦听器</strong>适合监听数据变化并执行额外逻辑，尤其是异步任务。</li>
<li><strong>指令</strong>提供了强大的模板功能，如条件渲染、列表渲染、事件处理等。</li>
<li><strong>修饰符</strong>为指令增加额外的功能，如去除空白字符、事件捕获等。</li>
</ol>
<p>希望这能帮助你更深入了解 Vue.js 的响应式数据与核心功能。如果有其他问题，欢迎随时讨论！</p>
<h1 id="脚手架与组件化开发"><a href="#脚手架与组件化开发" class="headerlink" title="脚手架与组件化开发"></a>脚手架与组件化开发</h1><p><img src="/posts/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WXS7VQMlCQOoZYm.jpeg" alt="WXS7VQMlCQOoZYm" loading="lazy"></p>
<hr>
<h2 id="一、脚手架（Vue-CLI）"><a href="#一、脚手架（Vue-CLI）" class="headerlink" title="一、脚手架（Vue CLI）"></a>一、脚手架（Vue CLI）</h2><h3 id="1-什么是脚手架？"><a href="#1-什么是脚手架？" class="headerlink" title="1. 什么是脚手架？"></a>1. 什么是脚手架？</h3><p><strong>脚手架</strong>（Scaffolding）是指用于快速搭建项目基础结构的工具。在 Vue.js 中，官方提供了 <strong>Vue CLI</strong>（Command Line Interface），它是一个基于 Node.js 的命令行工具，用于快速创建 Vue.js 项目，集成了现代前端开发所需的各种功能和配置。</p>
<h3 id="2-Vue-CLI-的功能和优势"><a href="#2-Vue-CLI-的功能和优势" class="headerlink" title="2. Vue CLI 的功能和优势"></a>2. Vue CLI 的功能和优势</h3><ul>
<li><strong>快速搭建项目</strong>：通过简单的命令即可生成一个带有预设配置的 Vue.js 项目。</li>
<li><strong>可定制化</strong>：支持自定义配置，满足不同项目的特殊需求。</li>
<li><strong>插件系统</strong>：提供了丰富的官方和社区插件，如路由（Vue Router）、状态管理（Vuex）、TypeScript 支持等。</li>
<li><strong>热重载</strong>：内置开发服务器，支持模块热替换（HMR），提高开发效率。</li>
<li><strong>优化的生产构建</strong>：自动进行代码分割、压缩、优化，提升应用性能。</li>
<li><strong>单元测试和端到端测试</strong>：集成了 Jest、Mocha 等测试框架，支持编写测试用例。</li>
</ul>
<h3 id="3-安装和使用-Vue-CLI"><a href="#3-安装和使用-Vue-CLI" class="headerlink" title="3. 安装和使用 Vue CLI"></a>3. 安装和使用 Vue CLI</h3><h4 id="3-1-安装-Vue-CLI"><a href="#3-1-安装-Vue-CLI" class="headerlink" title="3.1 安装 Vue CLI"></a>3.1 安装 Vue CLI</h4><p>确保已安装 Node.js 和 npm，然后在命令行中全局安装 Vue CLI：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<p>安装完成后，可以使用以下命令查看版本，验证安装是否成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure>

<h4 id="3-2-创建新项目"><a href="#3-2-创建新项目" class="headerlink" title="3.2 创建新项目"></a>3.2 创建新项目</h4><p>使用 <code>vue create</code> 命令创建新项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create my-project</span><br></pre></td></tr></table></figure>

<p>系统会提示选择预设配置：</p>
<ul>
<li><strong>默认预设</strong>：包含 Babel、ESLint 等基本配置。</li>
<li><strong>手动选择特性</strong>：可以根据需要添加路由、Vuex、CSS 预处理器等。</li>
</ul>
<h4 id="3-3-运行项目"><a href="#3-3-运行项目" class="headerlink" title="3.3 运行项目"></a>3.3 运行项目</h4><p>进入项目目录，启动开发服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<p>默认情况下，开发服务器运行在 <code>http://localhost:8080</code>。</p>
<h3 id="4-Vue-CLI-项目结构"><a href="#4-Vue-CLI-项目结构" class="headerlink" title="4. Vue CLI 项目结构"></a>4. Vue CLI 项目结构</h3><p>Vue CLI 生成的项目结构通常如下：</p>
<ul>
<li><code>public/</code>：公共静态资源目录，存放未被 Webpack 处理的文件。</li>
<li><code>src/</code>：源代码目录。<ul>
<li><code>main.js</code>：应用的入口文件。</li>
<li><code>App.vue</code>：根组件。</li>
<li><code>assets/</code>：资源文件夹，存放图片、字体等。</li>
<li><code>components/</code>：存放全局或通用组件。</li>
</ul>
</li>
<li><code>babel.config.js</code>：Babel 配置文件。</li>
<li><code>package.json</code>：项目元数据和依赖项。</li>
<li><code>vue.config.js</code>：可选的 Vue CLI 配置文件，用于修改默认设置。</li>
</ul>
<h3 id="5-配置和自定义"><a href="#5-配置和自定义" class="headerlink" title="5. 配置和自定义"></a>5. 配置和自定义</h3><p>可以在 <code>vue.config.js</code> 中对项目进行自定义配置，如修改端口、配置代理、添加别名等。</p>
<p><strong>示例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8081</span>, <span class="comment">// 修改端口</span></span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&#x27;http://api.example.com&#x27;</span> <span class="comment">// 配置代理</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">      <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/&#x27;</span>) <span class="comment">// 添加路径别名</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="6-使用插件"><a href="#6-使用插件" class="headerlink" title="6. 使用插件"></a>6. 使用插件</h3><p>Vue CLI 提供了插件系统，可以在创建项目时或之后添加插件。</p>
<p><strong>添加插件示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue add router</span><br><span class="line">vue add vuex</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二、组件化开发"><a href="#二、组件化开发" class="headerlink" title="二、组件化开发"></a>二、组件化开发</h2><h3 id="1-什么是组件化？"><a href="#1-什么是组件化？" class="headerlink" title="1. 什么是组件化？"></a>1. 什么是组件化？</h3><p><strong>组件化</strong>是将界面划分为独立、可复用的组件，每个组件包含自己的模板、逻辑和样式。Vue.js 强烈鼓励组件化开发，以提高代码的可维护性和复用性。</p>
<h3 id="2-组件的基本概念"><a href="#2-组件的基本概念" class="headerlink" title="2. 组件的基本概念"></a>2. 组件的基本概念</h3><ul>
<li><strong>组件实例</strong>：每个组件都是一个 Vue 实例，拥有自己的数据、方法、生命周期等。</li>
<li><strong>父子关系</strong>：组件可以嵌套，父组件可以传递数据给子组件。</li>
<li><strong>封装性</strong>：组件内部的实现细节对外部是透明的。</li>
</ul>
<h3 id="3-创建组件"><a href="#3-创建组件" class="headerlink" title="3. 创建组件"></a>3. 创建组件</h3><h4 id="3-1-单文件组件（-vue-文件）"><a href="#3-1-单文件组件（-vue-文件）" class="headerlink" title="3.1 单文件组件（.vue 文件）"></a>3.1 单文件组件（.vue 文件）</h4><p>这是 Vue.js 推荐的组件书写方式，包含 <code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 三个部分。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- MyComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-component&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; content &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;MyComponent&#x27;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    title: String,</span><br><span class="line">    content: String</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.my-component &#123;</span><br><span class="line">  /* 样式定义 */</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-注册组件"><a href="#3-2-注册组件" class="headerlink" title="3.2 注册组件"></a>3.2 注册组件</h4><p><strong>局部注册：</strong></p>
<p>在使用组件的父组件中导入并注册：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;my-component :title=&quot;title&quot; :content=&quot;content&quot;&gt;&lt;/my-component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyComponent from &#x27;./components/MyComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyComponent</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: &#x27;组件标题&#x27;,</span><br><span class="line">      content: &#x27;组件内容&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>全局注册：</strong></p>
<p>在 <code>main.js</code> 中注册，全局组件可在任何地方使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyComponent.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyComponent&#x27;</span>, <span class="title class_">MyComponent</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-组件之间的通信"><a href="#4-组件之间的通信" class="headerlink" title="4. 组件之间的通信"></a>4. 组件之间的通信</h3><h4 id="4-1-父子组件通信"><a href="#4-1-父子组件通信" class="headerlink" title="4.1 父子组件通信"></a>4.1 父子组件通信</h4><ul>
<li><p><strong>父组件传递数据给子组件</strong>：使用 <code>props</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件定义 props --&gt;</span><br><span class="line">props: &#123;</span><br><span class="line">  message: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>子组件触发事件通知父组件</strong>：使用 <code>$emit</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件中 --&gt;</span><br><span class="line">this.$emit(&#x27;eventName&#x27;, payload);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件中 --&gt;</span><br><span class="line">&lt;child-component @eventName=&quot;handleEvent&quot;&gt;&lt;/child-component&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-2-兄弟组件通信"><a href="#4-2-兄弟组件通信" class="headerlink" title="4.2 兄弟组件通信"></a>4.2 兄弟组件通信</h4><ul>
<li><p><strong>通过父组件中转</strong>：将数据提升到共同的父组件，由父组件管理和传递。</p>
</li>
<li><p><strong>事件总线（Event Bus）</strong>：创建一个空的 Vue 实例作为事件总线，但在 Vue 3 中不推荐使用。</p>
</li>
<li><p><strong>Vuex 状态管理</strong>：对于复杂的应用，使用 Vuex 统一管理状态。</p>
</li>
</ul>
<h4 id="4-3-跨级组件通信"><a href="#4-3-跨级组件通信" class="headerlink" title="4.3 跨级组件通信"></a>4.3 跨级组件通信</h4><ul>
<li><p><strong>Provide&#x2F;Inject</strong>：祖先组件提供数据，后代组件注入数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 祖先组件</span></span><br><span class="line"><span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">dataKey</span>: <span class="variable language_">this</span>.<span class="property">dataValue</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后代组件</span></span><br><span class="line"><span class="attr">inject</span>: [<span class="string">&#x27;dataKey&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-插槽（Slots）"><a href="#5-插槽（Slots）" class="headerlink" title="5. 插槽（Slots）"></a>5. 插槽（Slots）</h3><p>插槽用于在组件中插入父组件的内容，增强组件的灵活性。</p>
<h4 id="5-1-默认插槽"><a href="#5-1-默认插槽" class="headerlink" title="5.1 默认插槽"></a>5.1 默认插槽</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;child-component&gt;</span><br><span class="line">  &lt;p&gt;插入的内容&lt;/p&gt;</span><br><span class="line">&lt;/child-component&gt;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-具名插槽"><a href="#5-2-具名插槽" class="headerlink" title="5.2 具名插槽"></a>5.2 具名插槽</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt; &lt;!-- 默认插槽 --&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;child-component&gt;</span><br><span class="line">  &lt;template v-slot:header&gt;</span><br><span class="line">    &lt;h1&gt;标题内容&lt;/h1&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;p&gt;主要内容&lt;/p&gt;</span><br><span class="line">  &lt;template v-slot:footer&gt;</span><br><span class="line">    &lt;p&gt;页脚内容&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/child-component&gt;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-作用域插槽"><a href="#5-3-作用域插槽" class="headerlink" title="5.3 作用域插槽"></a>5.3 作用域插槽</h4><p>用于将子组件的数据传递给父组件的插槽内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot :user=&quot;userData&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userData: &#123; name: &#x27;Alice&#x27;, age: 25 &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;child-component v-slot:default=&quot;slotProps&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; slotProps.user.name &#125;&#125; - &#123;&#123; slotProps.user.age &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/child-component&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-动态组件和异步组件"><a href="#6-动态组件和异步组件" class="headerlink" title="6. 动态组件和异步组件"></a>6. 动态组件和异步组件</h3><h4 id="6-1-动态组件"><a href="#6-1-动态组件" class="headerlink" title="6.1 动态组件"></a>6.1 动态组件</h4><p>使用 <code>&lt;component&gt;</code> 标签和 <code>:is</code> 属性，根据条件渲染不同的组件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;component :is=&quot;currentComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;button @click=&quot;toggleComponent&quot;&gt;切换组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      currentComponent: &#x27;ComponentA&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA,</span><br><span class="line">    ComponentB</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    toggleComponent() &#123;</span><br><span class="line">      this.currentComponent = this.currentComponent === &#x27;ComponentA&#x27; ? &#x27;ComponentB&#x27; : &#x27;ComponentA&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="6-2-异步组件"><a href="#6-2-异步组件" class="headerlink" title="6.2 异步组件"></a>6.2 异步组件</h4><p>对于大型组件，可以使用异步加载，优化首屏加载速度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">AsyncComponent</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./components/AsyncComponent.vue&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="7-组件生命周期"><a href="#7-组件生命周期" class="headerlink" title="7. 组件生命周期"></a>7. 组件生命周期</h3><p>组件在创建、更新、销毁的过程中，会触发一系列的生命周期钩子函数，可以在这些函数中执行相应的逻辑。</p>
<ul>
<li><p><strong>常用生命周期钩子：</strong></p>
<ul>
<li><code>beforeCreate</code>：实例初始化之后，数据观测和事件配置之前。</li>
<li><code>created</code>：实例已创建，完成数据观测、属性和方法的运算，尚未挂载。</li>
<li><code>beforeMount</code>：在挂载开始之前调用。</li>
<li><code>mounted</code>：实例挂载到 DOM 上后调用。</li>
<li><code>beforeUpdate</code>：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li>
<li><code>updated</code>：由于数据更改导致的虚拟 DOM 重新渲染和打补丁之后调用。</li>
<li><code>beforeDestroy</code>：实例销毁之前调用。</li>
<li><code>destroyed</code>：实例销毁后调用。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="知识笔记总结"><a href="#知识笔记总结" class="headerlink" title="知识笔记总结"></a>知识笔记总结</h2><h3 id="脚手架（Vue-CLI）"><a href="#脚手架（Vue-CLI）" class="headerlink" title="脚手架（Vue CLI）"></a>脚手架（Vue CLI）</h3><ul>
<li><strong>安装与创建项目</strong>：<code>npm install -g @vue/cli</code>，<code>vue create project-name</code>。</li>
<li><strong>项目结构</strong>：了解 Vue CLI 项目的基本目录结构和文件作用。</li>
<li><strong>配置与插件</strong>：使用 <code>vue.config.js</code> 进行自定义配置，使用插件系统扩展功能。</li>
<li><strong>命令</strong>：<ul>
<li><code>npm run serve</code>：启动开发服务器。</li>
<li><code>npm run build</code>：构建生产环境代码。</li>
<li><code>npm run test</code>：运行测试。</li>
</ul>
</li>
</ul>
<h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3><ul>
<li><strong>组件创建</strong>：使用单文件组件 <code>.vue</code>，包含模板、脚本和样式。</li>
<li><strong>组件注册</strong>：区分全局注册和局部注册，推荐使用局部注册管理组件。</li>
<li><strong>组件通信</strong>：<ul>
<li><strong>父子通信</strong>：<code>props</code> 和 <code>$emit</code>。</li>
<li><strong>兄弟通信</strong>：通过共同的父组件或状态管理（Vuex）。</li>
<li><strong>跨级通信</strong>：<code>provide</code> 和 <code>inject</code>。</li>
</ul>
</li>
<li><strong>插槽（Slots）</strong>：使用默认插槽、具名插槽和作用域插槽增强组件的灵活性。</li>
<li><strong>动态组件</strong>：使用 <code>&lt;component :is=&quot;componentName&quot;&gt;</code> 动态渲染组件。</li>
<li><strong>生命周期钩子</strong>：理解各个生命周期的作用，合理使用钩子函数。</li>
</ul>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li><strong>组件命名</strong>：遵循命名规范，使用大驼峰或短横线命名法。</li>
<li><strong>单一职责</strong>：每个组件只负责完成一个功能，保持组件的高内聚低耦合。</li>
<li><strong>样式作用域</strong>：使用 <code>scoped</code> 或 CSS Modules，防止样式污染。</li>
<li><strong>性能优化</strong>：使用异步组件、路由懒加载等手段优化性能。</li>
<li><strong>代码规范</strong>：遵循 ESLint 规则，保持代码风格一致。</li>
</ul>
<hr>
<p>希望以上内容能帮助你深入理解 Vue.js 中的脚手架和组件化开发。如果你还有其他问题，欢迎继续提问！</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>inori</title>
    <url>/posts/inori/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=31649312&auto=1&height=66"></iframe>
]]></content>
      <tags>
        <tag>动漫</tag>
      </tags>
  </entry>
  <entry>
    <title>扫雷</title>
    <url>/posts/saolei/</url>
    <content><![CDATA[<iframe src="./扫雷.html" width="100%" height="600px"></iframe>

]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>空之境界</title>
    <url>/posts/%E7%A9%BA%E4%B9%8B%E5%A2%83%E7%95%8C/</url>
    <content><![CDATA[<p><img src="/posts/%E7%A9%BA%E4%B9%8B%E5%A2%83%E7%95%8C/d437d1dddb0c30c851e1741af02585236ee8758b.jpg" alt="d437d1dddb0c30c851e1741af02585236ee8758b" loading="lazy"></p>
<p>《空之境界》是由日本作家奈须蘑菇所著的一系列轻小说，原作是奈须蘑菇在1998年至1999年间于个人主页上连载的同人小说。后来由武内崇负责插画，并且被Type-Moon正式出版。这部作品以其深刻的主题、复杂的叙事结构以及丰富的象征意义而闻名，在读者中拥有很高的评价。</p>
<h3 id="故事概要"><a href="#故事概要" class="headerlink" title="故事概要"></a>故事概要</h3><p>《空之境界》的故事围绕着两仪家的继承者——两仪式（Ryougi Shiki）展开。故事开始时，式刚刚从长达两年的昏迷中醒来，她发现自己拥有了可以看到事物“死相”的能力。随着故事的发展，式与她的青梅竹马黑桐干也（Kokutou Mikiya）以及其他角色一起经历了一系列超自然事件，这些事件揭示了关于生命、死亡、自我认知等深层次的主题。</p>
<h3 id="深度分析"><a href="#深度分析" class="headerlink" title="深度分析"></a>深度分析</h3><h4 id="一、生死观与存在主义"><a href="#一、生死观与存在主义" class="headerlink" title="一、生死观与存在主义"></a>一、生死观与存在主义</h4><p>《空之境界》深入探讨了生死的意义。通过两仪式的眼睛，我们可以看到一个不同于常人的世界：每个物体都有其“线”，即生命的轨迹；当这些线断裂时，则意味着死亡的到来。这种设定不仅仅是一种视觉上的创新，更重要的是它反映了作者对于生死界限模糊化的一种思考方式。同时，《空之境界》也涉及到了个体如何面对自身存在的问题，特别是当主角们面临选择生存还是牺牲的时候，他们对自我价值的认知成为了推动剧情发展的重要因素之一。</p>
<h4 id="二、双重人格与身份认同"><a href="#二、双重人格与身份认同" class="headerlink" title="二、双重人格与身份认同"></a>二、双重人格与身份认同</h4><p>另一个值得关注的主题是关于身份认同和个人成长。两仪式拥有两个截然不同的人格：“男性”的冷静理性面和“女性”的温柔感性面。这两种性格之间的冲突及最终融合过程象征着一个人内心深处不同方面之间的斗争与和谐。此外，其他角色如荒耶宗莲等人也在探索自己真正的自我过程中扮演了重要角色，体现了寻找真实自我的艰难旅程。</p>
<h4 id="三、记忆与遗忘"><a href="#三、记忆与遗忘" class="headerlink" title="三、记忆与遗忘"></a>三、记忆与遗忘</h4><p>记忆与遗忘也是贯穿整个系列的关键主题之一。无论是因为某种原因失去记忆的角色，还是主动选择忘记某些痛苦回忆的人物，都在某种程度上反映了人类对于过去经历的态度。《空之境界》通过对记忆这一概念的独特诠释，引导读者思考记忆对我们塑造自我形象的重要性以及遗忘背后可能隐藏的情感创伤。</p>
<h4 id="四、哲学思辨与文学艺术"><a href="#四、哲学思辨与文学艺术" class="headerlink" title="四、哲学思辨与文学艺术"></a>四、哲学思辨与文学艺术</h4><p>除了上述提到的内容之外，《空之境界》还包含了大量的哲学讨论和文学引用。例如，“起源”、“无意识”等概念频繁出现于文本之中，显示出作者深厚的哲学功底。同时，书中也不乏对经典文学作品的致敬，如《爱丽丝梦游仙境》中的元素就被巧妙地融入到了故事情节里，为整部作品增添了几分神秘色彩。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>《空之境界》不仅是一部充满奇幻色彩的小说，更是一次深刻的精神之旅。通过细腻的心理描写、复杂的人物关系以及富有哲理性的对话，《空之境界》成功构建了一个既独立又相互联系的世界观体系。它挑战了传统意义上的善恶观念，鼓励人们勇敢地面对内心的黑暗面，并从中找到成长的力量。</p>
]]></content>
      <categories>
        <category>动漫</category>
      </categories>
      <tags>
        <tag>动漫</tag>
      </tags>
  </entry>
  <entry>
    <title>「新」动计划·编程入门Java</title>
    <url>/posts/%E3%80%8C%E6%96%B0%E3%80%8D%E5%8A%A8%E8%AE%A1%E5%88%92%20%C2%B7%20%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8Java/</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=22826401&auto=1&height=66"></iframe>

<h1 id="「新」动计划-·-编程入门"><a href="#「新」动计划-·-编程入门" class="headerlink" title="「新」动计划 · 编程入门"></a><strong>「新」动计划 · 编程入门</strong></h1><p><img src="/posts/%E3%80%8C%E6%96%B0%E3%80%8D%E5%8A%A8%E8%AE%A1%E5%88%92%20%C2%B7%20%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8Java/20201004141034_de14c.jpeg" alt="20201004141034_de14c" loading="lazy"></p>
<h2 id="基础语法-数据类型"><a href="#基础语法-数据类型" class="headerlink" title="基础语法 &amp; 数据类型"></a>基础语法 &amp; 数据类型</h2><h3 id="2235-两整数相加"><a href="#2235-两整数相加" class="headerlink" title="2235. 两整数相加"></a><a href="https://leetcode.cn/problems/add-two-integers/">2235. 两整数相加</a></h3><blockquote>
<p>给你两个整数 <code>num1</code> 和 <code>num2</code>，返回这两个整数的和。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：num1 = 12, num2 = 5</span><br><span class="line">输出：17</span><br><span class="line">解释：num1 是 12，num2 是<span class="number"> 5 </span>，它们的和是<span class="number"> 12 </span>+<span class="number"> 5 </span>=<span class="number"> 17 </span>，因此返回<span class="number"> 17 </span>。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">输入：<span class="symbol">num1</span> = <span class="number">-10</span>, <span class="symbol">num2</span> = <span class="number">4</span></span><br><span class="line">输出：<span class="number">-6</span></span><br><span class="line">解释：<span class="symbol">num1</span> + <span class="symbol">num2</span> = <span class="number">-6</span> ，因此返回 <span class="number">-6</span> 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>-100 &lt;= num1, num2 &lt;= 100</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1+num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2469-温度转换"><a href="#2469-温度转换" class="headerlink" title="2469. 温度转换"></a><a href="https://leetcode.cn/problems/convert-the-temperature/">2469. 温度转换</a></h3><blockquote>
<p>给你一个四舍五入到两位小数的非负浮点数 <code>celsius</code> 来表示温度，以 <strong>摄氏度</strong>（<strong>Celsius</strong>）为单位。</p>
<p>你需要将摄氏度转换为 <strong>开氏度</strong>（<strong>Kelvin</strong>）和 <strong>华氏度</strong>（<strong>Fahrenheit</strong>），并以数组 <code>ans = [kelvin, fahrenheit]</code> 的形式返回结果。</p>
<p>返回数组 <em><code>ans</code></em> 。与实际答案误差不超过 <code>10-5</code> 的会视为正确答案<strong>。</strong></p>
<p><strong>注意：</strong></p>
<ul>
<li><code>开氏度 = 摄氏度 + 273.15</code></li>
<li><code>华氏度 = 摄氏度 * 1.80 + 32.00</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span>[] convertTemperature(<span class="type">double</span> celsius) &#123;</span><br><span class="line">        <span class="type">double</span>[] ans=<span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">2</span>];</span><br><span class="line">        ans[<span class="number">0</span>]=celsius+<span class="number">273.15</span>;</span><br><span class="line">        ans[<span class="number">1</span>]=celsius*<span class="number">1.80</span>+<span class="number">32.00</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="2413-最小偶倍数"><a href="#2413-最小偶倍数" class="headerlink" title="2413. 最小偶倍数"></a><a href="https://leetcode.cn/problems/smallest-even-multiple/">2413. 最小偶倍数</a></h3><p>给你一个正整数 <code>n</code> ，返回 <code>2</code> 和 <code>n</code> 的最小公倍数（正整数）。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：n = 5</span><br><span class="line">输出：10</span><br><span class="line">解释：5 和<span class="number"> 2 </span>的最小公倍数是<span class="number"> 10 </span>。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：n = 6</span><br><span class="line">输出：6</span><br><span class="line">解释：6 和<span class="number"> 2 </span>的最小公倍数是<span class="number"> 6 </span>。注意数字会是它自身的倍数。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 150</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">smallestEvenMultiple</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*n; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2236-判断根结点是否等于子结点之和"><a href="#2236-判断根结点是否等于子结点之和" class="headerlink" title="2236. 判断根结点是否等于子结点之和"></a><a href="https://leetcode.cn/problems/root-equals-sum-of-children/">2236. 判断根结点是否等于子结点之和</a></h3><blockquote>
<p>给你一个 <strong>二叉树</strong> 的根结点 <code>root</code>，该二叉树由恰好 <code>3</code> 个结点组成：根结点、左子结点和右子结点。</p>
<p>如果根结点值等于两个子结点值之和，返回 <code>true</code> ，否则返回 <code>false</code> 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/posts/%E3%80%8C%E6%96%B0%E3%80%8D%E5%8A%A8%E8%AE%A1%E5%88%92%20%C2%B7%20%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8Java/graph3drawio.png" alt="img" loading="lazy"></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：root = [10,4,6]</span><br><span class="line">输出：true</span><br><span class="line">解释：根结点、左子结点和右子结点的值分别是<span class="number"> 10 </span>、4 和<span class="number"> 6 </span>。</span><br><span class="line">由于<span class="number"> 10 </span>等于<span class="number"> 4 </span>+<span class="number"> 6 </span>，因此返回 true 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="/posts/%E3%80%8C%E6%96%B0%E3%80%8D%E5%8A%A8%E8%AE%A1%E5%88%92%20%C2%B7%20%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8Java/graph3drawio-1.png" alt="img" loading="lazy"></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：root = [5,3,1]</span><br><span class="line">输出：false</span><br><span class="line">解释：根结点、左子结点和右子结点的值分别是<span class="number"> 5 </span>、3 和<span class="number"> 1 </span>。</span><br><span class="line">由于<span class="number"> 5 </span>不等于<span class="number"> 3 </span>+<span class="number"> 1 </span>，因此返回 false 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树只包含根结点、左子结点和右子结点</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.val==root.left.val+root.right.val?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="循环-循环嵌套"><a href="#循环-循环嵌套" class="headerlink" title="循环 &amp; 循环嵌套"></a>循环 &amp; 循环嵌套</h2><h3 id="1486-数组异或操作"><a href="#1486-数组异或操作" class="headerlink" title="1486. 数组异或操作"></a><a href="https://leetcode.cn/problems/xor-operation-in-an-array/">1486. 数组异或操作</a></h3><blockquote>
<p>给你两个整数，<code>n</code> 和 <code>start</code> 。</p>
<p>数组 <code>nums</code> 定义为：<code>nums[i] = start + 2*i</code>（下标从 0 开始）且 <code>n == nums.length</code> 。</p>
<p>请返回 <code>nums</code> 中所有元素按位异或（<strong>XOR</strong>）后得到的结果。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：n = 5, start = 0</span><br><span class="line">输出：8</span><br><span class="line">解释：数组 nums 为 [0, 2, 4, 6, 8]，其中 (0 ^<span class="number"> 2 </span>^<span class="number"> 4 </span>^<span class="number"> 6 </span>^ 8) =<span class="number"> 8 </span>。</span><br><span class="line">     &quot;^&quot; 为按位异或 XOR 运算符。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：n = 4, start = 3</span><br><span class="line">输出：8</span><br><span class="line">解释：数组 nums 为 [3, 5, 7, 9]，其中 (3 ^<span class="number"> 5 </span>^<span class="number"> 7 </span>^ 9) = 8.</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">1</span>, <span class="literal">start</span> = <span class="number">7</span></span><br><span class="line">输出：<span class="number">7</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">10</span>, <span class="literal">start</span> = <span class="number">5</span></span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 1000</code></li>
<li><code>0 &lt;= start &lt;= 1000</code></li>
<li><code>n == nums.length</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">xorOperation</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            x ^= start + <span class="number">2</span> * i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在异或操作中，两个数的对应位进行比较：</p>
<ul>
<li><p>如果位相同，则结果为 <code>0</code></p>
</li>
<li><p>如果位不同，则结果为 <code>1</code></p>
<p>示例分析</p>
<h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><p>输入：<code>n = 5</code>, <code>start = 0</code></p>
<ol>
<li><p>生成数组 <code>nums</code>：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">css</span>复制代码nums[<span class="number">0</span>] = <span class="number">0</span> + <span class="number">2</span> * <span class="number">0</span> = <span class="number">0</span></span><br><span class="line"><span class="attribute">nums</span>[<span class="number">1</span>] = <span class="number">0</span> + <span class="number">2</span> * <span class="number">1</span> = <span class="number">2</span></span><br><span class="line"><span class="attribute">nums</span>[<span class="number">2</span>] = <span class="number">0</span> + <span class="number">2</span> * <span class="number">2</span> = <span class="number">4</span></span><br><span class="line"><span class="attribute">nums</span>[<span class="number">3</span>] = <span class="number">0</span> + <span class="number">2</span> * <span class="number">3</span> = <span class="number">6</span></span><br><span class="line"><span class="attribute">nums</span>[<span class="number">4</span>] = <span class="number">0</span> + <span class="number">2</span> * <span class="number">4</span> = <span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>因此，<code>nums = [0, 2, 4, 6, 8]</code>。</p>
</li>
<li><p>对所有元素按位异或：</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">复制代码0 ^<span class="number"> 2 </span>= 2</span><br><span class="line">2 ^<span class="number"> 4 </span>= 6</span><br><span class="line">6 ^<span class="number"> 6 </span>= 0</span><br><span class="line">0 ^<span class="number"> 8 </span>= 8</span><br></pre></td></tr></table></figure>

<p>因此，返回的结果是 <code>8</code>。</p>
</li>
</ol>
<h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><p>输入：<code>n = 4</code>, <code>start = 3</code></p>
<ol>
<li><p>生成数组 <code>nums</code>：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">css</span>复制代码nums[<span class="number">0</span>] = <span class="number">3</span> + <span class="number">2</span> * <span class="number">0</span> = <span class="number">3</span></span><br><span class="line"><span class="attribute">nums</span>[<span class="number">1</span>] = <span class="number">3</span> + <span class="number">2</span> * <span class="number">1</span> = <span class="number">5</span></span><br><span class="line"><span class="attribute">nums</span>[<span class="number">2</span>] = <span class="number">3</span> + <span class="number">2</span> * <span class="number">2</span> = <span class="number">7</span></span><br><span class="line"><span class="attribute">nums</span>[<span class="number">3</span>] = <span class="number">3</span> + <span class="number">2</span> * <span class="number">3</span> = <span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>因此，<code>nums = [3, 5, 7, 9]</code>。</p>
</li>
<li><p>对所有元素按位异或：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span>^ <span class="number">5</span> = <span class="number">6</span></span><br><span class="line"><span class="symbol">6 </span>^ <span class="number">7</span> = <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span>^ <span class="number">9</span> = <span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>因此，返回的结果是 <code>8</code>。</p>
</li>
</ol>
<h3 id="详细解析："><a href="#详细解析：" class="headerlink" title="详细解析："></a>详细解析：</h3><ol>
<li><strong>变量定义</strong>：<ul>
<li><code>x</code>：用于存储当前的异或结果，初始值为 <code>0</code>。</li>
</ul>
</li>
<li><strong>循环</strong>：<ul>
<li>循环从 <code>i = 0</code> 开始，一直到 <code>i = n-1</code>。每次迭代计算当前元素 <code>start + 2 * i</code>，并将其与 <code>x</code> 进行异或操作。由于异或具有结合律和交换律，我们可以不必担心顺序。</li>
</ul>
</li>
<li><strong>返回结果</strong>：<ul>
<li>循环结束后，<code>x</code> 存储的就是数组中所有元素的异或结果。</li>
</ul>
</li>
</ol>
</li>
</ul>
</blockquote>
<h3 id="1512-好数对的数目"><a href="#1512-好数对的数目" class="headerlink" title="1512. 好数对的数目"></a><a href="https://leetcode.cn/problems/number-of-good-pairs/">1512. 好数对的数目</a></h3><blockquote>
<p>给你一个整数数组 <code>nums</code> 。</p>
<p>如果一组数字 <code>(i,j)</code> 满足 <code>nums[i]</code> &#x3D;&#x3D; <code>nums[j]</code> 且 <code>i</code> &lt; <code>j</code> ，就可以认为这是一组 <strong>好数对</strong> 。</p>
<p>返回好数对的数目。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3,1,1,3]</span><br><span class="line">输出：4</span><br><span class="line">解释：有<span class="number"> 4 </span>组好数对，分别是 (0,3), (0,4), (3,4), (2,5) ，下标从<span class="number"> 0 </span>开始</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">1,1,1,1</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：数组中的每组数字都是好数对</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight fix"><table><tr><td class="code"><pre><span class="line"><span class="attr">输入：nums </span>=<span class="string"> [1,2,3]</span></span><br><span class="line"><span class="string">输出：0</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>1 &lt;= nums[i] &lt;= 100</code></li>
</ul>
</blockquote>
<p><strong>暴力统计</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIdenticalPairs</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n=nums.length,count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]==nums[i]) count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>组合计数</strong></p>
<blockquote>
<p>用哈希表统计每个数在序列中出现的次数，假设数字 k 在序列中出现的次数为 v，那么满足题目中所说的nums[i]&#x3D;nums[j]&#x3D;k(i&lt;j) 的 (i,j) 的数量就是v(v−1)&#x2F;2，即 k 这个数值对答案的贡献是v(v−1)&#x2F;2。我们只需要把所有数值的贡献相加，即可得到答案。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIdenticalPairs</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1000</span>];</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;++i) arr[nums[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&gt;=<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res+=arr[i]*(arr[i]-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>官方</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIdenticalPairs</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个哈希表，用于存储每个数字出现的次数</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; m = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="comment">// 遍历数组中的每个数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="comment">// 将数字作为键，出现次数作为值存入哈希表</span></span><br><span class="line">            <span class="comment">// 如果数字已经存在，则将其出现次数加 1</span></span><br><span class="line">            m.put(num, m.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遍历哈希表中的每个键值对</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : m.entrySet()) &#123;</span><br><span class="line">            <span class="comment">// 获取当前数字的出现次数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            <span class="comment">// 计算当前数字可以形成的数对数量</span></span><br><span class="line">            <span class="comment">// 公式为 v * (v - 1) / 2，表示从 v 个数字中选出 2 个的组合数</span></span><br><span class="line">            ans += v * (v - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回满足条件的数对数量</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="详细解释："><a href="#详细解释：" class="headerlink" title="详细解释："></a>详细解释：</h3><ol>
<li><strong>创建哈希表</strong>：<ul>
<li><code>Map&lt;Integer, Integer&gt; m = new HashMap&lt;Integer, Integer&gt;();</code>：创建一个 <code>HashMap</code>，用于存储每个数字出现的次数。键是数字，值是该数字出现的次数。</li>
</ul>
</li>
<li><strong>遍历数组中的每个数字</strong>：<ul>
<li><code>for (int num : nums)</code>：遍历数组中的每个数字。</li>
<li><code>m.put(num, m.getOrDefault(num, 0) + 1);</code>：将数字作为键，出现次数作为值存入哈希表。如果数字已经存在，则将其出现次数加 1。<code>m.getOrDefault(num, 0)</code> 表示如果哈希表中没有该数字，则返回默认值 0。</li>
</ul>
</li>
<li><strong>计算数对数量</strong>：<ul>
<li><code>int ans = 0;</code>：初始化计数器为 0。</li>
<li><code>for (Map.Entry&lt;Integer, Integer&gt; entry : m.entrySet())</code>：遍历哈希表中的每个键值对。</li>
<li><code>int v = entry.getValue();</code>：获取当前数字的出现次数。</li>
<li><code>ans += v * (v - 1) / 2;</code>：计算当前数字可以形成的数对数量。公式 <code>v * (v - 1) / 2</code> 表示从 <code>v</code> 个数字中选出 2 个的组合数。例如，如果有 3 个相同的数字，可以形成的数对数量为 <code>3 * (3 - 1) / 2 = 3</code>。</li>
</ul>
</li>
<li><strong>返回结果</strong>：<ul>
<li><code>return ans;</code>：返回满足条件的数对数量。<br><code>getOrDefault</code> 和 <code>entrySet</code> 这两个方法。</li>
</ul>
</li>
</ol>
<h3 id="1-getOrDefault-方法"><a href="#1-getOrDefault-方法" class="headerlink" title="1. getOrDefault 方法"></a>1. <code>getOrDefault</code> 方法</h3><p><code>getOrDefault</code> 是 <code>Map</code> 接口中的一个方法，用于获取指定键的值，如果键不存在，则返回一个默认值。</p>
<h4 id="方法签名："><a href="#方法签名：" class="headerlink" title="方法签名："></a>方法签名：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">V <span class="title function_">getOrDefault</span><span class="params">(Object key, V defaultValue)</span></span><br></pre></td></tr></table></figure>

<h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><ul>
<li><code>key</code>：要获取值的键。</li>
<li><code>defaultValue</code>：如果键不存在时返回的默认值。</li>
</ul>
<h4 id="返回值："><a href="#返回值：" class="headerlink" title="返回值："></a>返回值：</h4><ul>
<li>如果键存在，返回键对应的值。</li>
<li>如果键不存在，返回指定的默认值。</li>
</ul>
<h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">&quot;One&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">&quot;Two&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.getOrDefault(<span class="number">3</span>, <span class="string">&quot;Default&quot;</span>);</span><br><span class="line">System.out.println(value);  <span class="comment">// 输出: Default</span></span><br></pre></td></tr></table></figure>

<h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><ul>
<li><code>map.getOrDefault(3, &quot;Default&quot;)</code>：尝试获取键 <code>3</code> 对应的值，由于键 <code>3</code> 不存在，返回默认值 <code>&quot;Default&quot;</code>。</li>
</ul>
<h3 id="2-entrySet-方法"><a href="#2-entrySet-方法" class="headerlink" title="2. entrySet 方法"></a>2. <code>entrySet</code> 方法</h3><p><code>entrySet</code> 是 <code>Map</code> 接口中的一个方法，用于返回一个包含所有键值对的集合视图。每个键值对都表示为一个 <code>Map.Entry</code> 对象。</p>
<h4 id="方法签名：-1"><a href="#方法签名：-1" class="headerlink" title="方法签名："></a>方法签名：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</span><br></pre></td></tr></table></figure>

<h4 id="返回值：-1"><a href="#返回值：-1" class="headerlink" title="返回值："></a>返回值：</h4><ul>
<li>返回一个包含所有键值对的 <code>Set</code>，每个元素都是一个 <code>Map.Entry</code> 对象。</li>
</ul>
<h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">&quot;One&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">&quot;Two&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Key: &quot;</span> + entry.getKey() + <span class="string">&quot;, Value: &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Key:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">Value:</span> <span class="string">One</span></span><br><span class="line"><span class="attr">Key:</span> <span class="number">2</span><span class="string">,</span> <span class="attr">Value:</span> <span class="string">Two</span></span><br></pre></td></tr></table></figure>

<h4 id="解释：-1"><a href="#解释：-1" class="headerlink" title="解释："></a>解释：</h4><ul>
<li><code>map.entrySet()</code>：返回一个包含所有键值对的 <code>Set</code>。</li>
<li><code>for (Map.Entry&lt;Integer, String&gt; entry : map.entrySet())</code>：遍历 <code>Set</code> 中的每个 <code>Map.Entry</code> 对象。</li>
<li><code>entry.getKey()</code>：获取当前键值对的键。</li>
<li><code>entry.getValue()</code>：获取当前键值对的值。</li>
</ul>
<ol>
<li><p><strong><code>getOrDefault</code> 方法</strong>：</p>
<ul>
<li><code>m.put(num, m.getOrDefault(num, 0) + 1);</code>：<ul>
<li><code>m.getOrDefault(num, 0)</code>：获取键 <code>num</code> 对应的值，如果键 <code>num</code> 不存在，返回默认值 <code>0</code>。</li>
<li><code>m.getOrDefault(num, 0) + 1</code>：将获取到的值加 1。</li>
<li><code>m.put(num, ...)</code>：将键 <code>num</code> 和更新后的值存入哈希表。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong><code>entrySet</code> 方法</strong>：</p>
<ul>
<li><code>for (Map.Entry&lt;Integer, Integer&gt; entry : m.entrySet())</code>：<ul>
<li><code>m.entrySet()</code>：返回一个包含所有键值对的 <code>Set</code>。</li>
<li><code>for (Map.Entry&lt;Integer, Integer&gt; entry : ...)</code>：遍历 <code>Set</code> 中的每个 <code>Map.Entry</code> 对象。</li>
<li><code>int v = entry.getValue();</code>：获取当前键值对的值（即数字出现的次数）。</li>
<li><code>ans += v * (v - 1) / 2;</code>：计算当前数字可以形成的数对数量，并累加到结果中。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul>
<li>**<code>getOrDefault</code>**：用于获取指定键的值，如果键不存在，返回默认值。</li>
<li>**<code>entrySet</code>**：返回一个包含所有键值对的集合视图，方便遍历和操作哈希表中的键值对。</li>
</ul>
<p>这两个方法在处理哈希表时非常有用，可以简化代码逻辑，提高代码的可读性和效率。</p>
</blockquote>
<h2 id="1534-统计好三元组"><a href="#1534-统计好三元组" class="headerlink" title="1534. 统计好三元组"></a><a href="https://leetcode.cn/problems/count-good-triplets/">1534. 统计好三元组</a></h2><blockquote>
<p>给你一个整数数组 <code>arr</code> ，以及 <code>a</code>、<code>b</code> 、<code>c</code> 三个整数。请你统计其中好三元组的数量。</p>
<p>如果三元组 <code>(arr[i], arr[j], arr[k])</code> 满足下列全部条件，则认为它是一个 <strong>好三元组</strong> 。</p>
<ul>
<li><code>0 &lt;= i &lt; j &lt; k &lt; arr.length</code></li>
<li><code>|arr[i] - arr[j]| &lt;= a</code></li>
<li><code>|arr[j] - arr[k]| &lt;= b</code></li>
<li><code>|arr[i] - arr[k]| &lt;= c</code></li>
</ul>
<p>其中 <code>|x|</code> 表示 <code>x</code> 的绝对值。</p>
<p>返回 <strong>好三元组的数量</strong> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">输入：arr = [<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">7</span>], a = <span class="number">7</span>, b = <span class="number">2</span>, c = <span class="number">3</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：一共有 <span class="number">4</span> 个好三元组：[<span class="comment">(3,0,1)</span>, <span class="comment">(3,0,1)</span>, <span class="comment">(3,1,1)</span>, <span class="comment">(0,1,1)</span>] 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">输入：arr = <span class="selector-attr">[1,1,2,2,3]</span>, <span class="selector-tag">a</span> = <span class="number">0</span>, <span class="selector-tag">b</span> = <span class="number">0</span>, c = <span class="number">1</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：不存在满足所有条件的三元组。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>3 &lt;= arr.length &lt;= 100</code></li>
<li><code>0 &lt;= arr[i] &lt;= 1000</code></li>
<li><code>0 &lt;= a, b, c &lt;= 1000</code></li>
</ul>
</blockquote>
<p><strong>枚举</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countGoodTriplets</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">2</span>;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;arr.length-<span class="number">1</span>;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=j+<span class="number">1</span>;k&lt;arr.length;++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(IsRight(arr[i],arr[j],a)&amp;&amp;IsRight(arr[j],arr[k],b)&amp;&amp;IsRight(arr[i],arr[k],c))</span><br><span class="line">                    &#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">IsRight</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> x)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> res=a-b;</span><br><span class="line">        <span class="keyword">if</span>(res&lt;<span class="number">0</span>) res=-res;</span><br><span class="line">        <span class="keyword">if</span>(res&gt;x) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优化思路与算法</strong></p>
<blockquote>
<h4 id="原始思路"><a href="#原始思路" class="headerlink" title="原始思路"></a>原始思路</h4><p>原始代码使用了三重循环来枚举所有可能的三元组 <code>(i, j, k)</code>，并检查每个三元组是否满足条件 <code>|arr[i] - arr[j]| ≤ a</code>、<code>|arr[j] - arr[k]| ≤ b</code> 和 <code>|arr[i] - arr[k]| ≤ c</code>。这种方法的时间复杂度是 O(n^3)，在数组长度较大时效率较低。</p>
<h4 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h4><p>我们可以通过减少不必要的枚举来优化算法。具体来说，我们可以先枚举 <code>j</code> 和 <code>k</code>，然后再检查 <code>i</code> 是否满足条件。这样可以减少一些不必要的枚举。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">countGoodTriplets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.size(), cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j + <span class="number">1</span>; k &lt; n; ++k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (abs(arr[j] - arr[k]) &lt;= b) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; j; ++i) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (abs(arr[i] - arr[j]) &lt;= a &amp;&amp; abs(arr[i] - arr[k]) &lt;= c) &#123;</span><br><span class="line">                            ++cnt;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释"></a>详细解释</h3><ol>
<li><strong>初始化</strong>：<ul>
<li><code>int n = arr.size(), cnt = 0;</code>：获取数组的长度 <code>n</code>，并初始化计数器 <code>cnt</code> 为 0。</li>
</ul>
</li>
<li>**枚举 <code>j</code> 和 <code>k</code>**：<ul>
<li><code>for (int j = 0; j &lt; n; ++j)</code>：遍历数组中的每个元素 <code>arr[j]</code>。</li>
<li><code>for (int k = j + 1; k &lt; n; ++k)</code>：遍历 <code>arr[j]</code> 之后的每个元素 <code>arr[k]</code>。</li>
<li><code>if (abs(arr[j] - arr[k]) &lt;= b)</code>：检查 <code>|arr[j] - arr[k]| ≤ b</code> 的条件是否满足。</li>
</ul>
</li>
<li><strong>枚举 <code>i</code>（<code>i &lt; j</code>）</strong>：<ul>
<li><code>for (int i = 0; i &lt; j; ++i)</code>：遍历 <code>arr[j]</code> 之前的每个元素 <code>arr[i]</code>。</li>
<li><code>if (abs(arr[i] - arr[j]) &lt;= a &amp;&amp; abs(arr[i] - arr[k]) &lt;= c)</code>：检查 <code>|arr[i] - arr[j]| ≤ a</code> 和 <code>|arr[i] - arr[k]| ≤ c</code> 的条件是否满足。</li>
<li><code>++cnt;</code>：如果满足所有条件，计数器加 1。</li>
</ul>
</li>
<li><strong>返回结果</strong>：<ul>
<li><code>return cnt;</code>：返回满足条件的三元组数量。</li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h2><h3 id="584-寻找用户推荐人"><a href="#584-寻找用户推荐人" class="headerlink" title="584. 寻找用户推荐人"></a><a href="https://leetcode.cn/problems/find-customer-referee/">584. 寻找用户推荐人</a></h3><blockquote>
<p>表: <code>Customer</code></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+-------------+</span>---------+</span><br><span class="line"><span class="section">| Column Name | Type    |</span></span><br><span class="line"><span class="section">+-------------+---------+</span></span><br><span class="line">| id          | int     |</span><br><span class="line">| name        | varchar |</span><br><span class="line"><span class="section">| referee_id  | int     |</span></span><br><span class="line"><span class="section">+-------------+---------+</span></span><br><span class="line">在 SQL 中，id 是该表的主键列。</span><br><span class="line">该表的每一行表示一个客户的 id、姓名以及推荐他们的客户的 id。</span><br></pre></td></tr></table></figure>

<p>找出那些 <strong>没有被</strong> <code>id = 2</code> 的客户 <strong>推荐</strong> 的客户的姓名。</p>
<p>以 <strong>任意顺序</strong> 返回结果表。</p>
<p>结果格式如下所示。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： </span><br><span class="line">Customer 表:</span><br><span class="line">+----+------+------------+</span><br><span class="line">| id | name | referee_id |</span><br><span class="line">+----+------+------------+</span><br><span class="line">| 1  | Will | null       |</span><br><span class="line">| 2  | Jane | null       |</span><br><span class="line">| 3  | Alex | 2          |</span><br><span class="line">| 4  | Bill | null       |</span><br><span class="line">| 5  | Zack | 1          |</span><br><span class="line">| 6  | Mark | 2          |</span><br><span class="line">+----+------+------------+</span><br><span class="line">输出：</span><br><span class="line">+------+</span><br><span class="line">| name |</span><br><span class="line">+------+</span><br><span class="line">| Will |</span><br><span class="line">| Jane |</span><br><span class="line">| Bill |</span><br><span class="line">| Zack |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line">SELECT name</span><br><span class="line">FROM Customer</span><br><span class="line">where referee_id != 2 OR referee_id is null;</span><br></pre></td></tr></table></figure>

<p><strong>在SQL中，<code>&lt;&gt;</code> 和 <code>!=</code> 都可以用来表示“不等于”，它们在大多数情况下是等价的，但在某些数据库系统中可能会有细微的差异。通常情况下，两者可以互换使用。</strong></p>
<h3 id="1757-可回收且低脂的产品"><a href="#1757-可回收且低脂的产品" class="headerlink" title="1757. 可回收且低脂的产品"></a><a href="https://leetcode.cn/problems/recyclable-and-low-fat-products/">1757. 可回收且低脂的产品</a></h3><blockquote>
<p>表：<code>Products</code></p>
<figure class="highlight smalltalk"><table><tr><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| <span class="type">Column</span> <span class="type">Name</span> | <span class="type">Type</span>    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| product_id  | int     |</span><br><span class="line">| low_fats    | enum    |</span><br><span class="line">| recyclable  | enum    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">product_id 是该表的主键（具有唯一值的列）。</span><br><span class="line">low_fats 是枚举类型，取值为以下两种 (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;N&#x27;</span>)，其中 <span class="string">&#x27;Y&#x27;</span> 表示该产品是低脂产品，<span class="string">&#x27;N&#x27;</span> 表示不是低脂产品。</span><br><span class="line">recyclable 是枚举类型，取值为以下两种 (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;N&#x27;</span>)，其中 <span class="string">&#x27;Y&#x27;</span> 表示该产品可回收，而 <span class="string">&#x27;N&#x27;</span> 表示不可回收。</span><br></pre></td></tr></table></figure>

<p>编写解决方案找出既是低脂又是可回收的产品编号。</p>
<p>返回结果 <strong>无顺序要求</strong> 。</p>
<p>返回结果格式如下例所示：</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Products 表：</span><br><span class="line">+-------------+----------+------------+</span><br><span class="line">| product_id  | low_fats | recyclable |</span><br><span class="line">+-------------+----------+------------+</span><br><span class="line">| 0           | Y        | N          |</span><br><span class="line">| 1           | Y        | Y          |</span><br><span class="line">| 2           | N        | Y          |</span><br><span class="line">| 3           | Y        | Y          |</span><br><span class="line">| 4           | N        | N          |</span><br><span class="line">+-------------+----------+------------+</span><br><span class="line">输出：</span><br><span class="line">+-------------+</span><br><span class="line">| product_id  |</span><br><span class="line">+-------------+</span><br><span class="line">| 1           |</span><br><span class="line">| 3           |</span><br><span class="line">+-------------+</span><br><span class="line">解释：</span><br><span class="line">只有产品 id 为 1 和 3 的产品，既是低脂又是可回收的产品。</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line">SELECT product_id</span><br><span class="line">FROM Products</span><br><span class="line">WHERE low_fats=&#x27;Y&#x27; AND recyclable=&#x27;Y&#x27;;</span><br></pre></td></tr></table></figure>



<h2 id="位运算；ASCII-码"><a href="#位运算；ASCII-码" class="headerlink" title="位运算；ASCII 码"></a>位运算；ASCII 码</h2><h3 id="709-转换成小写字母"><a href="#709-转换成小写字母" class="headerlink" title="709. 转换成小写字母"></a><a href="https://leetcode.cn/problems/to-lower-case/">709. 转换成小写字母</a></h3><blockquote>
<p>给你一个字符串 <code>s</code> ，将该字符串中的大写字母转换成相同的小写字母，返回新的字符串。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">输入：s <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line">输出：<span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">输入：s <span class="operator">=</span> <span class="string">&quot;here&quot;</span></span><br><span class="line">输出：<span class="string">&quot;here&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">输入：s <span class="operator">=</span> <span class="string">&quot;LOVELY&quot;</span></span><br><span class="line">输出：<span class="string">&quot;lovely&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 100</code></li>
<li><code>s</code> 由 ASCII 字符集中的可打印字符组成</li>
</ul>
</blockquote>
<p><em>方法一</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toLowerCase</span><span class="params">(String s)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> s.toLowerCase();</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>toLowerCase()</code> 是 Java 中 <code>String</code> 类的一个方法，用于将字符串中的所有大写字母转换为小写字母。这个方法不会修改原始字符串，而是返回一个新的字符串，其中所有的大写字母都被转换为小写字母。</p>
</blockquote>
<p><em>方法二</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toLowerCase</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个可变的字符串缓冲区来存储结果</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历输入字符串中的每个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果字符是大写字母，将其转换为小写字母</span></span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">                ch = (<span class="type">char</span>) (ch + (<span class="string">&#x27;a&#x27;</span> - <span class="string">&#x27;A&#x27;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将字符添加到结果缓冲区</span></span><br><span class="line">            result.append(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回转换后的字符串</span></span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>StringBuilder</code> 是 Java 中的一个类，用于处理可变的字符序列。与 <code>String</code> 类不同，<code>StringBuilder</code> 对象的内容可以被修改，而不需要创建新的对象。这使得 <code>StringBuilder</code> 在处理大量字符串拼接和修改时非常高效。</p>
<h3 id="主要方法："><a href="#主要方法：" class="headerlink" title="主要方法："></a>主要方法：</h3><ol>
<li><p><strong>构造方法</strong>：</p>
<ul>
<li><code>StringBuilder()</code>: 创建一个空的 <code>StringBuilder</code> 对象。</li>
<li><code>StringBuilder(int capacity)</code>: 创建一个指定初始容量的 <code>StringBuilder</code> 对象。</li>
<li><code>StringBuilder(String str)</code>: 创建一个包含指定字符串内容的 <code>StringBuilder</code> 对象。</li>
</ul>
</li>
<li><p><strong>常用方法</strong>：</p>
<ul>
<li><code>append(String str)</code>: 将指定的字符串追加到当前 <code>StringBuilder</code> 对象的末尾。</li>
<li><code>insert(int offset, String str)</code>: 在指定位置插入指定的字符串。</li>
<li><code>delete(int start, int end)</code>: 删除指定范围内的字符。</li>
<li><code>replace(int start, int end, String str)</code>: 用指定的字符串替换指定范围内的字符。</li>
<li><code>reverse()</code>: 反转 <code>StringBuilder</code> 对象中的字符序列。</li>
<li><code>toString()</code>: 将 <code>StringBuilder</code> 对象转换为 <code>String</code> 对象。</li>
</ul>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul>
<li><strong>高效性</strong>：<code>StringBuilder</code> 在处理大量字符串拼接和修改时比 <code>String</code> 更高效，因为它避免了创建多个中间字符串对象。</li>
<li><strong>可变性</strong>：<code>StringBuilder</code> 对象的内容可以被修改，而不需要创建新的对象，这使得它在处理动态字符串时非常方便。</li>
</ul>
<h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ul>
<li><strong>字符串拼接</strong>：在需要频繁拼接字符串的场景中，使用 <code>StringBuilder</code> 可以提高性能。</li>
<li><strong>动态字符串处理</strong>：在需要动态修改字符串内容的场景中，使用 <code>StringBuilder</code> 可以简化代码。</li>
<li><strong>性能优化</strong>：在处理大量字符串操作时，使用 <code>StringBuilder</code> 可以显著提高程序的性能。</li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="数学：取余"><a href="#数学：取余" class="headerlink" title="数学：取余"></a>数学：取余</h2><h3 id="258-各位相加"><a href="#258-各位相加" class="headerlink" title="258. 各位相加"></a><a href="https://leetcode.cn/problems/add-digits/">258. 各位相加</a></h3><blockquote>
<p>给定一个非负整数 <code>num</code>，反复将各个位上的数字相加，直到结果为一位数。返回这个结果。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入: num = 38</span><br><span class="line">输出:<span class="number"> 2 </span></span><br><span class="line">解释: 各位相加的过程为：</span><br><span class="line">38 --&gt;<span class="number"> 3 </span>+<span class="number"> 8 </span>--&gt; 11</span><br><span class="line">11 --&gt;<span class="number"> 1 </span>+<span class="number"> 1 </span>--&gt; 2</span><br><span class="line">由于<span class="number"> 2 </span>是一位数，所以返回 2。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: num = 0</span></span><br><span class="line"><span class="section">输出: 0</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= num &lt;= 231 - 1</code></li>
</ul>
<p><strong>进阶：</strong>你可以不使用循环或者递归，在 <code>O(1)</code> 时间复杂度内解决这个问题吗？</p>
</blockquote>
<p><em>方法一</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个非负整数的各位数字相加，直到结果为一位数。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 输入的非负整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最终的一位数结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addDigits</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="comment">// 当 num 大于等于 10 时，继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (num &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">// 调用 Sum 方法计算 num 的各位数字之和，并将结果赋值给 num</span></span><br><span class="line">            num = Sum(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回最终的一位数结果</span></span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算一个非负整数的各位数字之和。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 输入的非负整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 各位数字之和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Sum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化结果为 0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 当 num 大于 0 时，继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 将 num 的最后一位数字加到 result 中</span></span><br><span class="line">            result = num % <span class="number">10</span> + result;</span><br><span class="line">            <span class="comment">// 去掉 num 的最后一位数字</span></span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回各位数字之和</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>方法二</em></p>
<blockquote>
<h3 id="数字根公式："><a href="#数字根公式：" class="headerlink" title="数字根公式："></a>数字根公式：</h3><p>对于一个非负整数 <code>num</code>，其数字根可以通过以下公式计算：</p>
<p>digital root(num)&#x3D;1+(num−1)%9</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addDigits</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用数字根公式直接计算结果</span></span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + (num - <span class="number">1</span>) % <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="详细解释：-1"><a href="#详细解释：-1" class="headerlink" title="详细解释："></a>详细解释：</h3><ol>
<li><strong>特殊情况处理</strong>：<ul>
<li>如果 <code>num</code> 为 0，数字根为 0。</li>
</ul>
</li>
<li><strong>一般情况处理</strong>：<ul>
<li>对于 <code>num</code> 不是 0 的情况，使用公式 <code>1 + (num - 1) % 9</code> 计算数字根。</li>
<li><code>(num - 1) % 9</code> 的结果在 <code>-1</code> 到 <code>8</code> 之间。</li>
<li>加上 1 后，结果在 <code>0</code> 到 <code>9</code> 之间。</li>
<li>这样处理可以确保 <code>num</code> 是 9 的倍数时，结果为 9，而不是 0。</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="1281-整数的各位积和之差"><a href="#1281-整数的各位积和之差" class="headerlink" title="1281. 整数的各位积和之差"></a><a href="https://leetcode.cn/problems/subtract-the-product-and-sum-of-digits-of-an-integer/">1281. 整数的各位积和之差</a></h3><blockquote>
<p>给你一个整数 <code>n</code>，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：n = 234</span><br><span class="line">输出：15 </span><br><span class="line">解释：</span><br><span class="line">各位数之积 =<span class="number"> 2 </span>*<span class="number"> 3 </span>*<span class="number"> 4 </span>=<span class="number"> 24 </span></span><br><span class="line">各位数之和 =<span class="number"> 2 </span>+<span class="number"> 3 </span>+<span class="number"> 4 </span>=<span class="number"> 9 </span></span><br><span class="line">结果 =<span class="number"> 24 </span>-<span class="number"> 9 </span>= 15</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：n = 4421</span><br><span class="line">输出：21</span><br><span class="line">解释： </span><br><span class="line">各位数之积 =<span class="number"> 4 </span>*<span class="number"> 4 </span>*<span class="number"> 2 </span>*<span class="number"> 1 </span>=<span class="number"> 32 </span></span><br><span class="line">各位数之和 =<span class="number"> 4 </span>+<span class="number"> 4 </span>+<span class="number"> 2 </span>+<span class="number"> 1 </span>=<span class="number"> 11 </span></span><br><span class="line">结果 =<span class="number"> 32 </span>-<span class="number"> 11 </span>= 21</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 10^5</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算一个整数的各位数字的乘积与各位数字的和的差值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 输入的整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 各位数字的乘积与各位数字的和的差值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtractProductAndSum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 计算各位数字的乘积</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">product</span> <span class="operator">=</span> Product(n);</span><br><span class="line">        <span class="comment">// 计算各位数字的和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Sum(n);</span><br><span class="line">        <span class="comment">// 返回乘积与和的差值</span></span><br><span class="line">        <span class="keyword">return</span> product - sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算一个整数的各位数字的乘积。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 输入的整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 各位数字的乘积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Product</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化乘积为 1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 当 n 大于 0 时，继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 将 n 的最后一位数字乘到 res 中</span></span><br><span class="line">            res *= n % <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// 去掉 n 的最后一位数字</span></span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回各位数字的乘积</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算一个整数的各位数字的和。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 输入的整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 各位数字的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Sum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化和为 0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 当 n 大于 0 时，继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 将 n 的最后一位数字加到 res 中</span></span><br><span class="line">            res += n % <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// 去掉 n 的最后一位数字</span></span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回各位数字的和</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>官方解</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算一个整数的各位数字的乘积与各位数字的和的差值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 输入的整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 各位数字的乘积与各位数字的和的差值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtractProductAndSum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化乘积 m 为 1，和 s 为 0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>, s = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 当 n 不为 0 时，继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取 n 的最后一位数字</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> n % <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// 去掉 n 的最后一位数字</span></span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// 将最后一位数字乘到乘积 m 中</span></span><br><span class="line">            m *= x;</span><br><span class="line">            <span class="comment">// 将最后一位数字加到和 s 中</span></span><br><span class="line">            s += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回乘积与和的差值</span></span><br><span class="line">        <span class="keyword">return</span> m - s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数学：因数与倍数"><a href="#数学：因数与倍数" class="headerlink" title="数学：因数与倍数"></a>数学：因数与倍数</h2><h3 id="231-2-的幂"><a href="#231-2-的幂" class="headerlink" title="231. 2 的幂"></a><a href="https://leetcode.cn/problems/power-of-two/">231. 2 的幂</a></h3><blockquote>
<p>给你一个整数 <code>n</code>，请你判断该整数是否是 2 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>如果存在一个整数 <code>x</code> 使得 <code>n == 2x</code> ，则认为 <code>n</code> 是 2 的幂次方。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">输入：n <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">输出：true</span><br><span class="line">解释：<span class="number">20</span> <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">输入：n <span class="operator">=</span> <span class="number">16</span></span><br><span class="line">输出：true</span><br><span class="line">解释：<span class="number">24</span> <span class="operator">=</span> <span class="number">16</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">n</span> = <span class="number">3</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>-231 &lt;= n &lt;= 231 - 1</code></li>
</ul>
<p><strong>进阶：</strong>你能够不使用循环&#x2F;递归解决此问题吗？</p>
</blockquote>
<p><em>方法一</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">1</span>,target=n;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            a*=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(a==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>方法二</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算以 2 为底的对数</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">log2</span> <span class="operator">=</span> Math.log(n) / Math.log(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 判断 log2 是否为整数</span></span><br><span class="line">        <span class="keyword">return</span> log2 == Math.floor(log2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>让我们分析一下为什么在某些情况下，使用 <code>Math.log(n) / Math.log(2)</code> 可能会导致错误的结果。</p>
<h3 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h3><p>在计算机中，浮点数的计算可能会引入舍入误差。即使理论上 <code>Math.log(n) / Math.log(2)</code> 应该是一个整数，由于浮点数的精度限制，实际计算结果可能会略微偏离整数值，导致判断失败。</p>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>为了避免浮点数计算的舍入误差，我们可以使用位运算来判断一个数是否是 2 的幂。这种方法不仅效率高，而且不会受到浮点数精度的影响。</p>
</blockquote>
<p><em>方法三</em></p>
<blockquote>
<h3 id="位运算方法："><a href="#位运算方法：" class="headerlink" title="位运算方法："></a>位运算方法：</h3><p>一个数 <code>n</code> 是 2 的幂，当且仅当 <code>n</code> 是正数，并且 <code>n</code> 的二进制表示中只有一个 1。例如：</p>
<ul>
<li>1 的二进制表示是 <code>0001</code></li>
<li>2 的二进制表示是 <code>0010</code></li>
<li>4 的二进制表示是 <code>0100</code></li>
<li>8 的二进制表示是 <code>1000</code></li>
</ul>
<p>我们可以通过以下位运算来判断一个数是否是 2 的幂：</p>
<ul>
<li><code>n &amp; (n - 1)</code> 的结果为 0。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 确保 n 是正数，并且 n 的二进制表示中只有一个 1</span></span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="解释：-2"><a href="#解释：-2" class="headerlink" title="解释："></a>解释：</h3><ol>
<li>**<code>n &gt; 0</code>**：确保 <code>n</code> 是正数。</li>
<li>**<code>(n &amp; (n - 1)) == 0</code>**：判断 <code>n</code> 的二进制表示中是否只有一个 1。</li>
</ol>
<h3 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h3><p>假设输入 <code>n</code> 为 536870912，我们来验证这个方法：</p>
<ul>
<li><code>n = 536870912</code></li>
<li><code>n - 1 = 536870911</code></li>
<li><code>n &amp; (n - 1) = 536870912 &amp; 536870911 = 0</code></li>
</ul>
<p>所以，536870912 是 2 的幂。</p>
</blockquote>
<h3 id="326-3-的幂"><a href="#326-3-的幂" class="headerlink" title="326. 3 的幂"></a><a href="https://leetcode.cn/problems/power-of-three/">326. 3 的幂</a></h3><blockquote>
<p>给定一个整数，写一个函数来判断它是否是 3 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>整数 <code>n</code> 是 3 的幂次方需满足：存在整数 <code>x</code> 使得 <code>n == 3x</code></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">n</span> = <span class="number">27</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">n</span> = <span class="number">0</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">n</span> = <span class="number">9</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">n</span> = <span class="number">45</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>-231 &lt;= n &lt;= 231 - 1</code></li>
</ul>
<p><strong>进阶：</strong>你能不使用循环或者递归来完成本题吗？</p>
</blockquote>
<p><em>解法</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断一个整数是否是 3 的幂。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 输入的整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果 n 是 3 的幂，返回 true；否则返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfThree</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果 n 小于或等于 0，直接返回 false，因为 3 的幂必须是正数</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 初始化 x 为 1，tag 为 n</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>, tag = n;</span><br><span class="line">        <span class="comment">// 如果 n 等于 1，直接返回 true，因为 1 是 3 的 0 次幂</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 当 n 大于 0 时，继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果 x 等于 tag，返回 true，表示 n 是 3 的幂</span></span><br><span class="line">            <span class="keyword">if</span> (x == tag) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 将 x 乘以 3</span></span><br><span class="line">            x *= <span class="number">3</span>;</span><br><span class="line">            <span class="comment">// 将 n 除以 3</span></span><br><span class="line">            n /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果循环结束时 x 不等于 tag，返回 false，表示 n 不是 3 的幂</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>优化</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfThree</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span> &amp;&amp; n % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            n /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="263-丑数"><a href="#263-丑数" class="headerlink" title="263. 丑数"></a><a href="https://leetcode.cn/problems/ugly-number/">263. 丑数</a></h3><blockquote>
<p><strong>丑数</strong> 就是只包含质因数 <code>2</code>、<code>3</code> 和 <code>5</code> 的正整数。</p>
<p>给你一个整数 <code>n</code> ，请你判断 <code>n</code> 是否为 <strong>丑数</strong> 。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">输入：n = 6</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">输出：<span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">解释：6 = 2 × 3</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">输入：n = 1</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">输出：<span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">解释：1 没有质因数，因此它的全部质因数是 &#123;2, 3, 5&#125; 的空集。习惯上将其视作第一个丑数。</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">输入：n = 14</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">输出：<span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">解释：14 不是丑数，因为它包含了另外一个质因数 7 。</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>-231 &lt;= n &lt;= 231 - 1</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUgly</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(n%<span class="number">2</span>==<span class="number">0</span>||n%<span class="number">3</span>==<span class="number">0</span>||n%<span class="number">5</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) n/=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (n%<span class="number">3</span>==<span class="number">0</span>) n/=<span class="number">3</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (n%<span class="number">5</span>==<span class="number">0</span>) n/=<span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n==<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>优化解法</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUgly</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] factors = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> factor : factors) &#123;</span><br><span class="line">            <span class="keyword">while</span> (n % factor == <span class="number">0</span>) &#123;</span><br><span class="line">                n /= factor;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组-矩阵"><a href="#数组-矩阵" class="headerlink" title="数组 &amp; 矩阵"></a>数组 &amp; 矩阵</h2><h3 id="1470-重新排列数组"><a href="#1470-重新排列数组" class="headerlink" title="1470. 重新排列数组"></a><a href="https://leetcode.cn/problems/shuffle-the-array/">1470. 重新排列数组</a></h3><blockquote>
<p>给你一个数组 <code>nums</code> ，数组中有 <code>2n</code> 个元素，按 <code>[x1,x2,...,xn,y1,y2,...,yn]</code> 的格式排列。</p>
<p>请你将数组按 <code>[x1,y1,x2,y2,...,xn,yn]</code> 格式重新排列，返回重排后的数组。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,5,1,3,4,7], n = 3</span><br><span class="line">输出：[2,3,5,4,1,7] </span><br><span class="line">解释：由于 <span class="attribute">x1</span>=2, <span class="attribute">x2</span>=5, <span class="attribute">x3</span>=1, <span class="attribute">y1</span>=3, <span class="attribute">y2</span>=4, <span class="attribute">y3</span>=7 ，所以答案为 [2,3,5,4,1,7]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">1,2,3,4</span>,<span class="number">4,3,2,1</span>], n = <span class="number">4</span></span><br><span class="line">输出：[<span class="number">1,4,2,3</span>,<span class="number">3,2,4,1</span>]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">1,1,2,2</span>], n = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1,2,1,2</span>]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 500</code></li>
<li><code>nums.length == 2n</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^3</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] shuffle(<span class="type">int</span>[] nums, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>*n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;n;i++,j+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[j]=nums[i];</span><br><span class="line">            arr[j+<span class="number">1</span>]=nums[i+n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="867-转置矩阵"><a href="#867-转置矩阵" class="headerlink" title="867. 转置矩阵"></a><a href="https://leetcode.cn/problems/transpose-matrix/">867. 转置矩阵</a></h3><blockquote>
<p>给你一个二维整数数组 <code>matrix</code>， 返回 <code>matrix</code> 的 <strong>转置矩阵</strong> 。</p>
<p>矩阵的 <strong>转置</strong> 是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。</p>
<p><img src="/posts/%E3%80%8C%E6%96%B0%E3%80%8D%E5%8A%A8%E8%AE%A1%E5%88%92%20%C2%B7%20%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8Java/hint_transpose.png" alt="img" loading="lazy"></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">输入：matrix = <span class="string">[[1,2,3],[4,5,6],[7,8,9]]</span></span><br><span class="line">输出：<span class="string">[[1,4,7],[2,5,8],[3,6,9]]</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">输入：matrix = <span class="string">[[1,2,3],[4,5,6]]</span></span><br><span class="line">输出：<span class="string">[[1,4],[2,5],[3,6]]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>m == matrix.length</code></li>
<li><code>n == matrix[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 1000</code></li>
<li><code>1 &lt;= m * n &lt;= 10^5</code></li>
<li><code>-10^9 &lt;= matrix[i][j] &lt;= 10^9</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个矩阵进行转置。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matrix 输入的矩阵</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转置后的矩阵</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] transpose(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line">        <span class="comment">// 获取矩阵的行数和列数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// 创建一个新的矩阵，用于存储转置后的结果</span></span><br><span class="line">        <span class="type">int</span>[][] transposed = <span class="keyword">new</span> <span class="title class_">int</span>[n][m];</span><br><span class="line">        <span class="comment">// 遍历原矩阵的每个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="comment">// 将原矩阵的元素 (i, j) 放到转置矩阵的 (j, i) 位置</span></span><br><span class="line">                transposed[j][i] = matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回转置后的矩阵</span></span><br><span class="line">        <span class="keyword">return</span> transposed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="解释：-3"><a href="#解释：-3" class="headerlink" title="解释："></a>解释：</h3><ol>
<li><p><strong>方法注释</strong>：</p>
<ul>
<li><strong>功能</strong>：将一个矩阵进行转置。</li>
<li><strong>参数</strong>：<code>matrix</code> 输入的矩阵。</li>
<li><strong>返回值</strong>：转置后的矩阵。</li>
</ul>
</li>
<li><p><strong>获取矩阵的行数和列数</strong>：</p>
<ul>
<li><code>int m = matrix.length;</code>：获取矩阵的行数。</li>
<li><code>int n = matrix[0].length;</code>：获取矩阵的列数。</li>
</ul>
</li>
<li><p><strong>创建转置矩阵</strong>：</p>
<ul>
<li><code>int[][] transposed = new int[n][m];</code>：创建一个新的矩阵 <code>transposed</code>，用于存储转置后的结果。转置矩阵的行数等于原矩阵的列数，列数等于原矩阵的行数。</li>
</ul>
</li>
<li><p><strong>遍历原矩阵的每个元素</strong>：</p>
<ul>
<li><code>for (int i = 0; i &lt; m; i++)</code>：遍历原矩阵的每一行。</li>
<li><code>for (int j = 0; j &lt; n; j++)</code>：遍历原矩阵的每一列。</li>
<li><code>transposed[j][i] = matrix[i][j];</code>：将原矩阵的元素 <code>(i, j)</code> 放到转置矩阵的 <code>(j, i)</code> 位置。</li>
</ul>
</li>
<li><p><strong>返回转置后的矩阵</strong>：</p>
<ul>
<li><code>return transposed;</code>：返回转置后的矩阵。</li>
</ul>
<h3 id="解释：-4"><a href="#解释：-4" class="headerlink" title="解释："></a>解释：</h3><ul>
<li>原矩阵的元素 <code>(0, 0)</code> 为 1，转置后放到 <code>(0, 0)</code> 位置。</li>
<li>原矩阵的元素 <code>(0, 1)</code> 为 2，转置后放到 <code>(1, 0)</code> 位置。</li>
<li>原矩阵的元素 <code>(0, 2)</code> 为 3，转置后放到 <code>(2, 0)</code> 位置。</li>
<li>原矩阵的元素 <code>(1, 0)</code> 为 4，转置后放到 <code>(0, 1)</code> 位置。</li>
<li>原矩阵的元素 <code>(1, 1)</code> 为 5，转置后放到 <code>(1, 1)</code> 位置。</li>
<li>原矩阵的元素 <code>(1, 2)</code> 为 6，转置后放到 <code>(2, 1)</code> 位置。</li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="数组-字符串"><a href="#数组-字符串" class="headerlink" title="数组 &amp; 字符串"></a>数组 &amp; 字符串</h2><h3 id="1422-分割字符串的最大得分"><a href="#1422-分割字符串的最大得分" class="headerlink" title="1422. 分割字符串的最大得分"></a><a href="https://leetcode.cn/problems/maximum-score-after-splitting-a-string/">1422. 分割字符串的最大得分</a></h3><blockquote>
<p>给你一个由若干 0 和 1 组成的字符串 <code>s</code> ，请你计算并返回将该字符串分割成两个 <strong>非空</strong> 子字符串（即 <strong>左</strong> 子字符串和 <strong>右</strong> 子字符串）所能获得的最大得分。</p>
<p>「分割字符串的得分」为 <strong>左</strong> 子字符串中 <strong>0</strong> 的数量加上 <strong>右</strong> 子字符串中 <strong>1</strong> 的数量。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;011101&quot;</span><br><span class="line">输出：5 </span><br><span class="line">解释：</span><br><span class="line">将字符串 s 划分为两个非空子字符串的可行方案有：</span><br><span class="line">左子字符串 = &quot;0&quot; 且 右子字符串 = &quot;11101&quot;，得分 =<span class="number"> 1 </span>+<span class="number"> 4 </span>=<span class="number"> 5 </span></span><br><span class="line">左子字符串 = &quot;01&quot; 且 右子字符串 = &quot;1101&quot;，得分 =<span class="number"> 1 </span>+<span class="number"> 3 </span>=<span class="number"> 4 </span></span><br><span class="line">左子字符串 = &quot;011&quot; 且 右子字符串 = &quot;101&quot;，得分 =<span class="number"> 1 </span>+<span class="number"> 2 </span>=<span class="number"> 3 </span></span><br><span class="line">左子字符串 = &quot;0111&quot; 且 右子字符串 = &quot;01&quot;，得分 =<span class="number"> 1 </span>+<span class="number"> 1 </span>=<span class="number"> 2 </span></span><br><span class="line">左子字符串 = &quot;01110&quot; 且 右子字符串 = &quot;1&quot;，得分 =<span class="number"> 2 </span>+<span class="number"> 1 </span>= 3</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;00111&quot;</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：当 左子字符串 = <span class="string">&quot;00&quot;</span> 且 右子字符串 = <span class="string">&quot;111&quot;</span> 时，我们得到最大得分 = <span class="number">2</span> + <span class="number">3</span> = <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">输入：s <span class="operator">=</span> <span class="string">&quot;1111&quot;</span></span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= s.length &lt;= 500</code></li>
<li>字符串 <code>s</code> 仅由字符 <code>&#39;0&#39;</code> 和 <code>&#39;1&#39;</code> 组成。</li>
</ul>
</blockquote>
<p><strong>字符串定位用.charAt(i)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxScore</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i+<span class="number">1</span>&amp;&amp;i+<span class="number">1</span>&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(j)==<span class="string">&#x27;0&#x27;</span>) flag++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=n-<span class="number">1</span>;j&gt;i;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(j)==<span class="string">&#x27;1&#x27;</span>) flag++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag&gt;max) max=flag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxScore</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(j) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                    score++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(j) == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    score++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, score);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2586-统计范围内的元音字符串数"><a href="#2586-统计范围内的元音字符串数" class="headerlink" title="2586. 统计范围内的元音字符串数"></a><a href="https://leetcode.cn/problems/count-the-number-of-vowel-strings-in-range/">2586. 统计范围内的元音字符串数</a></h3><blockquote>
<p>给你一个下标从 <strong>0</strong> 开始的字符串数组 <code>words</code> 和两个整数：<code>left</code> 和 <code>right</code> 。</p>
<p>如果字符串以元音字母开头并以元音字母结尾，那么该字符串就是一个 <strong>元音字符串</strong> ，其中元音字母是 <code>&#39;a&#39;</code>、<code>&#39;e&#39;</code>、<code>&#39;i&#39;</code>、<code>&#39;o&#39;</code>、<code>&#39;u&#39;</code> 。</p>
<p>返回 <code>words[i]</code> 是元音字符串的数目，其中 <code>i</code> 在闭区间 <code>[left, right]</code> 内。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">输入：<span class="keyword">words</span> = [<span class="string">&quot;are&quot;</span>,<span class="string">&quot;amy&quot;</span>,<span class="string">&quot;u&quot;</span>], left = <span class="number">0</span>, <span class="literal">right</span> = <span class="number">2</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：</span><br><span class="line">- <span class="string">&quot;are&quot;</span> 是一个元音字符串，因为它以 <span class="string">&#x27;a&#x27;</span> 开头并以 <span class="string">&#x27;e&#x27;</span> 结尾。</span><br><span class="line">- <span class="string">&quot;amy&quot;</span> 不是元音字符串，因为它没有以元音字母结尾。</span><br><span class="line">- <span class="string">&quot;u&quot;</span> 是一个元音字符串，因为它以 <span class="string">&#x27;u&#x27;</span> 开头并以 <span class="string">&#x27;u&#x27;</span> 结尾。</span><br><span class="line">在上述范围中的元音字符串数目为 <span class="number">2</span> 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">输入：<span class="keyword">words</span> = [<span class="string">&quot;hey&quot;</span>,<span class="string">&quot;aeo&quot;</span>,<span class="string">&quot;mu&quot;</span>,<span class="string">&quot;ooo&quot;</span>,<span class="string">&quot;artro&quot;</span>], left = <span class="number">1</span>, <span class="literal">right</span> = <span class="number">4</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：</span><br><span class="line">- <span class="string">&quot;aeo&quot;</span> 是一个元音字符串，因为它以 <span class="string">&#x27;a&#x27;</span> 开头并以 <span class="string">&#x27;o&#x27;</span> 结尾。</span><br><span class="line">- <span class="string">&quot;mu&quot;</span> 不是元音字符串，因为它没有以元音字母开头。</span><br><span class="line">- <span class="string">&quot;ooo&quot;</span> 是一个元音字符串，因为它以 <span class="string">&#x27;o&#x27;</span> 开头并以 <span class="string">&#x27;o&#x27;</span> 结尾。</span><br><span class="line">- <span class="string">&quot;artro&quot;</span> 是一个元音字符串，因为它以 <span class="string">&#x27;a&#x27;</span> 开头并以 <span class="string">&#x27;o&#x27;</span> 结尾。</span><br><span class="line">在上述范围中的元音字符串数目为 <span class="number">3</span> 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= words.length &lt;= 1000</code></li>
<li><code>1 &lt;= words[i].length &lt;= 10</code></li>
<li><code>words[i]</code> 仅由小写英文字母组成</li>
<li><code>0 &lt;= left &lt;= right &lt; words.length</code></li>
</ul>
</blockquote>
<p><strong>暴力破解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">vowelStrings</span><span class="params">(String[] words, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x=words[left].length()-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>((words[left].charAt(<span class="number">0</span>)==<span class="string">&#x27;a&#x27;</span>||words[left].charAt(<span class="number">0</span>)==<span class="string">&#x27;e&#x27;</span>||words[left].charAt(<span class="number">0</span>)==<span class="string">&#x27;u&#x27;</span>||words[left].charAt(<span class="number">0</span>)==<span class="string">&#x27;i&#x27;</span>||words[left].charAt(<span class="number">0</span>)==<span class="string">&#x27;o&#x27;</span>)&amp;&amp;(words[left].charAt(x)==<span class="string">&#x27;a&#x27;</span>||words[left].charAt(x)==<span class="string">&#x27;e&#x27;</span>||words[left].charAt(x)==<span class="string">&#x27;u&#x27;</span>||words[left].charAt(x)==<span class="string">&#x27;i&#x27;</span>||words[left].charAt(x)==<span class="string">&#x27;o&#x27;</span>))</span><br><span class="line">            flag++;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>官方</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算字符串数组中从 left 到 right 范围内的每个字符串是否以元音字母开头和结尾。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> words 字符串数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  起始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 结束索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 符合条件的字符串数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">vowelStrings</span><span class="params">(String[] words, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 HashSet 存储元音字母</span></span><br><span class="line">        Set&lt;Character&gt; vowels = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Character&gt;() &#123;&#123;</span><br><span class="line">            add(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            add(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">            add(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">            add(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">            add(<span class="string">&#x27;u&#x27;</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        <span class="comment">// 初始化计数器</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遍历字符串数组中从 left 到 right 范围内的每个字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; ++i) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> words[i];</span><br><span class="line">            <span class="comment">// 检查字符串的第一个字符和最后一个字符是否都在元音字母集合中</span></span><br><span class="line">            <span class="keyword">if</span> (vowels.contains(word.charAt(<span class="number">0</span>)) &amp;&amp; vowels.contains(word.charAt(word.length() - <span class="number">1</span>))) &#123;</span><br><span class="line">                <span class="comment">// 如果是，计数器加 1</span></span><br><span class="line">                ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回符合条件的字符串数量</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="代码思路："><a href="#代码思路：" class="headerlink" title="代码思路："></a>代码思路：</h3><p>这个代码的思路是通过使用一个 <code>Set</code> 来存储元音字母，然后遍历字符串数组 <code>words</code> 中从 <code>left</code> 到 <code>right</code> 范围内的每个字符串，检查字符串的第一个字符和最后一个字符是否都在 <code>Set</code> 中。如果是，则计数器加 1。解释：</p>
<ol>
<li><strong>方法注释</strong>：<ul>
<li><strong>功能</strong>：计算字符串数组中从 <code>left</code> 到 <code>right</code> 范围内的每个字符串是否以元音字母开头和结尾。</li>
<li><strong>参数</strong>：<ul>
<li><code>words</code>：字符串数组。</li>
<li><code>left</code>：起始索引。</li>
<li><code>right</code>：结束索引。</li>
</ul>
</li>
<li><strong>返回值</strong>：符合条件的字符串数量。</li>
</ul>
</li>
<li><strong>使用 <code>HashSet</code> 存储元音字母</strong>：<ul>
<li><code>Set&lt;Character&gt; vowels = new HashSet&lt;Character&gt;() &#123;&#123; add('a'); add('e'); add('i'); add('o'); add('u'); &#125;&#125;;</code>：创建一个 <code>HashSet</code>，并初始化元音字母 <code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;u&#39;</code>。</li>
</ul>
</li>
<li><strong>初始化计数器</strong>：<ul>
<li><code>int ans = 0;</code>：初始化计数器为 0。</li>
</ul>
</li>
<li><strong>遍历字符串数组中从 <code>left</code> 到 <code>right</code> 范围内的每个字符串</strong>：<ul>
<li><code>for (int i = left; i &lt;= right; ++i)</code>：遍历从 <code>left</code> 到 <code>right</code> 范围内的每个字符串。</li>
<li><code>String word = words[i];</code>：获取当前字符串。</li>
</ul>
</li>
<li><strong>检查字符串的第一个字符和最后一个字符是否都在元音字母集合中</strong>：<ul>
<li><code>if (vowels.contains(word.charAt(0)) &amp;&amp; vowels.contains(word.charAt(word.length() - 1)))</code>：检查字符串的第一个字符和最后一个字符是否都在 <code>vowels</code> 集合中。</li>
<li><code>++ans;</code>：如果是，计数器加 1。</li>
</ul>
</li>
<li><strong>返回符合条件的字符串数量</strong>：<ul>
<li><code>return ans;</code>：返回计数器的值。</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="852-山脉数组的峰顶索引"><a href="#852-山脉数组的峰顶索引" class="headerlink" title="852. 山脉数组的峰顶索引"></a><a href="https://leetcode.cn/problems/peak-index-in-a-mountain-array/">852. 山脉数组的峰顶索引</a></h3><blockquote>
<p>给定一个长度为 <code>n</code> 的整数 <strong>山脉</strong> 数组 <code>arr</code> ，其中的值递增到一个 <strong>峰值元素</strong> 然后递减。</p>
<p>返回峰值元素的下标。</p>
<p>你必须设计并实现时间复杂度为 <code>O(log(n))</code> 的解决方案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight fix"><table><tr><td class="code"><pre><span class="line"><span class="attr">输入：arr </span>=<span class="string"> [0,1,0]</span></span><br><span class="line"><span class="string">输出：1</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">输入：arr = [<span class="number">0,2,1,0</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">输入：arr = [<span class="number">0,10,5,2</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>3 &lt;= arr.length &lt;= 105</code></li>
<li><code>0 &lt;= arr[i] &lt;= 106</code></li>
<li>题目数据 <strong>保证</strong> <code>arr</code> 是一个山脉数组</li>
</ul>
</blockquote>
<p><strong>枚举</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peakIndexInMountainArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> max_index=<span class="number">0</span>,n=arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// if(arr.charAt(i)&lt;arr.charAt(i+1)) max=i+1;</span></span><br><span class="line">            <span class="comment">// else</span></span><br><span class="line">             <span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>])&#123; max_index=i; <span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>二分查找</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peakIndexInMountainArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>, right = n - <span class="number">2</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt; arr[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>魔女之旅</title>
    <url>/posts/%E9%AD%94%E5%A5%B3%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Custom Audio Player with Play Button</title>
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background-color: #f0f0f0;
      margin: 0;
    }
    .audio-container {
      text-align: center;
      background-color: #fff;
      border-radius: 20px;
      padding: 20px;
      box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    }
    .audio-container img {
      width: 200px;
      height: 200px;
      border-radius: 50%;
      margin-bottom: 20px;
      transition: transform 0.5s ease-in-out;
    }
    .rotating {
      animation: rotate 5s linear infinite; /* 图片旋转动画 */
    }
    audio {
      display: none; /* 隐藏原生播放器 */
    }
    .play-btn {
      display: inline-block;
      padding: 10px 20px;
      background-color: grey; /* 按钮灰色 */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
      margin-top: 10px;
    }
    .play-btn:focus {
      outline: none;
    }
    /* 定义旋转动画 */
    @keyframes rotate {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }
  </style>
</head>
<body>
  <div class="audio-container">
    <img src="/posts/%E9%AD%94%E5%A5%B3%E4%B9%8B%E6%97%85/elaina01.jpg" alt="Album Art" id="albumArt" loading="lazy">
    <button class="play-btn" id="playBtn">开始</button>
    <audio id="audioPlayer">
      <source src="/audio/OP.mp3" type="audio/mpeg">
    </audio>
  </div>

  <script>
    const audioPlayer = document.getElementById('audioPlayer');
    const albumArt = document.getElementById('albumArt');
    const playBtn = document.getElementById('playBtn');
    let isPlaying = false;

    // 点击按钮播放或暂停音频
    playBtn.addEventListener('click', () => {
      if (isPlaying) {
        audioPlayer.pause();
        playBtn.textContent = '开始';
        albumArt.classList.remove('rotating'); // 停止旋转
      } else {
        audioPlayer.play();
        playBtn.textContent = '停止';
        albumArt.classList.add('rotating'); // 开始旋转
      }
    });
    
    // 音频播放/暂停时同步按钮状态
    audioPlayer.onplay = () => {
      isPlaying = true;
    };
    
    audioPlayer.onpause = () => {
      isPlaying = false;
    };
  </script>
</body>
</html>



<h1 id="请别在意。我是旅人，得继续旅行才行"><a href="#请别在意。我是旅人，得继续旅行才行" class="headerlink" title="请别在意。我是旅人，得继续旅行才行!"></a>请别在意。我是旅人，得继续旅行才行!</h1><p><img src="/posts/%E9%AD%94%E5%A5%B3%E4%B9%8B%E6%97%85/Elaina.jpg" alt="Elaina" loading="lazy"></p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">《魔女之旅》（日语：魔女の旅々）是由白石定规创作、あずーる插画的一部轻小说，并有Drama <span class="built_in">CD</span>、漫画等衍生作品。</span><br><span class="line"></span><br><span class="line">原作介绍</span><br><span class="line"><span class="number">2014</span>年在Amazon Kindle首次公开，<span class="number">2016</span>年修正后单行本化。</span><br><span class="line"></span><br><span class="line">剧情简介</span><br><span class="line">某个地方有个正在旅行的魔女，她的名字是伊蕾娜。</span><br><span class="line">身为旅人，在很长很长的旅途中，她与形形色色的国家与人们邂逅。</span><br><span class="line"></span><br><span class="line">只允许魔法师入境的国家、</span><br><span class="line">最喜欢肌肉的壮汉、</span><br><span class="line">在死亡深渊等待恋人归来的青年、</span><br><span class="line">独自留守国家早已灭亡的公主…</span><br><span class="line"></span><br><span class="line">最后，还有她身为魔女的至今为止与从今以后。</span><br><span class="line">和莫名其妙、滑稽可笑的人们相遇，接触某人美丽的日常生活，魔女日复一日编织出相逢与离别的故事。</span><br><span class="line"></span><br><span class="line">——《第一卷导语》</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>动漫</category>
      </categories>
      <tags>
        <tag>动漫</tag>
      </tags>
  </entry>
  <entry>
    <title>C++算法基础</title>
    <url>/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="算法基础课"><a href="#算法基础课" class="headerlink" title="算法基础课"></a>算法基础课</h1><hr>
<h1 id="第一讲：前缀和与差分"><a href="#第一讲：前缀和与差分" class="headerlink" title="第一讲：前缀和与差分"></a>第一讲：前缀和与差分</h1><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/kotomi.webp" alt="kotomi" loading="lazy"></p>
<hr>
<h2 id="竞赛语法"><a href="#竞赛语法" class="headerlink" title="竞赛语法"></a>竞赛语法</h2><ol>
<li>cin和cout</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ios::<span class="built_in">sycn_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">清除cin和cout的同步流</span><br><span class="line">尽量不要用endl,endl=<span class="string">&#x27;\n&#x27;</span>+刷新同步流</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>开long long</li>
</ol>
<blockquote>
<p>用#define int long long时,int main()要改成signed main()</p>
<p>常用using ll &#x3D; long long;</p>
</blockquote>
<ol start="3">
<li>确定N不要用define</li>
</ol>
<blockquote>
<p>#define N 1e5+10要加大括号,即,#define N (1e5+10)</p>
<p>尽量用const int N &#x3D; 1e5+10;</p>
</blockquote>
<ol start="3">
<li>输入的循环尽量单独写</li>
</ol>
<blockquote>
<p>for(int i&#x3D;0;i&lt;n;++i)cin&gt;&gt;a[i];</p>
</blockquote>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p>前缀和（Prefix Sum）是一种常用的算法技巧，主要用于快速计算数组中某个区间的和。通过构建一个前缀和数组，可以将多次求和的时间复杂度从 O(N) 降低到 O(1)。下面将详细讲解前缀和的概念、构建方法以及应用示例。</p>
<h3 id="1-什么是前缀和？"><a href="#1-什么是前缀和？" class="headerlink" title="1. 什么是前缀和？"></a>1. 什么是前缀和？</h3><p>前缀和数组是一个派生数组，其中每个元素表示原始数组中从开始到当前索引的所有元素的累积和。具体来说，对于一个数组 <code>arr</code>，其前缀和数组 <code>prefix</code> 定义如下：</p>
<ul>
<li><code>prefix[0] = 0</code>（为了方便计算）</li>
<li><code>prefix[i] = arr[0] + arr[1] + ... + arr[i-1]</code>（1-indexed）</li>
</ul>
<h3 id="2-如何构建前缀和数组？"><a href="#2-如何构建前缀和数组？" class="headerlink" title="2. 如何构建前缀和数组？"></a>2. 如何构建前缀和数组？</h3><p>构建前缀和数组的步骤如下：</p>
<ol>
<li>初始化一个与原数组大小相同的数组 <code>prefix</code>。</li>
<li>设置 <code>prefix[0] = 0</code>。</li>
<li>遍历原数组，从 <code>1</code> 到 <code>N</code>，计算每个 <code>prefix[i]</code> 的值。</li>
</ol>
<p>它的每一个元素意义是：<strong>前原数组n个元素的总和</strong>。也就是说下标为3的元素，是原来前三个元素的和。（也可以理解为除了自己以外的前面元素的和）</p>
<blockquote>
<blockquote>
<p>公式: <code>p[i]=p[i-1]+a[i]</code></p>
</blockquote>
</blockquote>
<p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241019233204362.png" alt="image-20241019233204362" loading="lazy"></p>
<h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><p>二维前缀和（2D Prefix Sum）是前缀和的扩展，用于快速计算二维数组中任意矩形区域的和。通过构建一个二维前缀和数组，可以将多次求和的时间复杂度从 O(N*M) 降低到 O(1)。下面将详细讲解二维前缀和的概念、构建方法以及应用示例。</p>
<h4 id="1-什么是二维前缀和？"><a href="#1-什么是二维前缀和？" class="headerlink" title="1. 什么是二维前缀和？"></a>1. 什么是二维前缀和？</h4><p>二维前缀和数组是一个派生数组，其中每个元素表示原始二维数组中从左上角 (0,0) 到当前坐标 (i,j) 的所有元素的累积和。具体来说，对于一个二维数组 <code>arr</code>，其二维前缀和数组 <code>prefix</code> 定义如下：</p>
<ul>
<li><code>prefix[i][j]</code> 表示从 (0,0) 到 (i-1,j-1) 的所有元素的和。</li>
</ul>
<h4 id="2-如何构建二维前缀和数组？"><a href="#2-如何构建二维前缀和数组？" class="headerlink" title="2. 如何构建二维前缀和数组？"></a>2. 如何构建二维前缀和数组？</h4><p>构建二维前缀和数组的步骤如下：</p>
<ol>
<li>初始化一个与原数组大小相同的二维数组 <code>prefix</code>，其大小为 <code>(rows + 1) x (cols + 1)</code>，以便处理边界情况。</li>
<li>遍历原数组，计算每个 <code>prefix[i][j]</code> 的值。</li>
</ol>
<p>它每个元素的意义是：<strong>下标为(x,y)的求和数组的元素，是原数组下标（0,0）到(x-1,y-1)子矩阵内元素的和</strong>。</p>
<blockquote>
<p> 公式: <code>p[i][j]=p[i-1][j]+p[i][j-1]-p[i-1][j-1]+a[i][j]</code></p>
</blockquote>
<p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241019233012873.png" alt="image-20241019233012873" loading="lazy"></p>
<h3 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h3><p>差分（Difference Array）是一种用于高效处理区间更新和查询的算法技巧。它通过将更新操作转化为对差分数组的简单操作，从而实现快速的区间更新。下面将详细讲解差分的概念、构建方法、应用示例以及其优缺点。</p>
<h4 id="1-什么是差分数组？"><a href="#1-什么是差分数组？" class="headerlink" title="1. 什么是差分数组？"></a>1. 什么是差分数组？</h4><p>差分数组是一种辅助数组，用于表示原始数组中相邻元素之间的差值。对于一个给定的数组 <code>arr</code>，其差分数组 <code>diff</code> 定义如下：</p>
<ul>
<li><code>diff[i] = arr[i] - arr[i-1]</code>（对于 <code>i &gt; 0</code>）</li>
<li><code>diff[0] = arr[0]</code>（第一个元素直接赋值）</li>
</ul>
<p>通过差分数组，可以在 O(1) 的时间内对原数组的某个区间进行加法更新。</p>
<h4 id="2-如何构建差分数组？"><a href="#2-如何构建差分数组？" class="headerlink" title="2. 如何构建差分数组？"></a>2. 如何构建差分数组？</h4><p>构建差分数组的步骤如下：</p>
<ol>
<li>初始化一个与原数组大小相同的数组 <code>diff</code>。</li>
<li>计算每个 <code>diff[i]</code> 的值。</li>
</ol>
<h4 id="3-区间更新"><a href="#3-区间更新" class="headerlink" title="3. 区间更新"></a>3. 区间更新</h4><p>对于原数组 <code>arr</code> 的区间更新操作，例如将区间 <code>[l, r]</code> 的每个元素加上一个值 <code>x</code>，可以通过以下步骤实现：</p>
<ol>
<li>在差分数组中执行 <code>diff[l] += x</code>。</li>
<li>在差分数组中执行 <code>diff[r + 1] -= x</code>（确保 <code>r + 1</code> 不越界）。</li>
<li>解释:</li>
</ol>
<ul>
<li>将 <code>D[l]</code> 加上 <code>x</code>，表示从 <code>A[l]</code> 开始的所有元素都加上 <code>x</code>。</li>
<li>将 <code>D[r+1]</code> 减去 <code>x</code>，表示从 <code>A[r+1]</code> 开始的所有元素都减去 <code>x</code>，从而抵消之前的影响。</li>
</ul>
<h3 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h3><p>二维差分（2D Difference Array）是差分数组的扩展，用于高效处理二维数组的区间更新和查询。通过构建一个二维差分数组，可以在 O(1) 的时间内对二维数组的某个矩形区域进行加法更新。下面将详细讲解二维差分的概念、构建方法、应用示例以及其优缺点。</p>
<h3 id="1-什么是二维差分数组？"><a href="#1-什么是二维差分数组？" class="headerlink" title="1. 什么是二维差分数组？"></a>1. 什么是二维差分数组？</h3><p>二维差分数组是一个辅助数组，用于表示原始二维数组中相邻元素之间的差值。对于一个给定的二维数组 <code>arr</code>，其二维差分数组 <code>diff</code> 定义如下：</p>
<p><code>diff[i][j]</code>表示原数组<code>arr</code>中的更新值，具体计算如下：</p>
<ul>
<li><code>diff[i][j] = arr[i][j] - arr[i-1][j] - arr[i][j-1] + arr[i-1][j-1]</code>（对于 <code>i &gt; 0</code> 和 <code>j &gt; 0</code>）</li>
<li><code>diff[i][0] = arr[i][0]</code>（第一列直接赋值）</li>
<li><code>diff[0][j] = arr[0][j]</code>（第一行直接赋值）</li>
</ul>
<p>通过二维差分数组，可以在 O(1) 的时间内对原数组的某个矩形区域进行加法更新。</p>
<h3 id="2-如何构建二维差分数组？"><a href="#2-如何构建二维差分数组？" class="headerlink" title="2. 如何构建二维差分数组？"></a>2. 如何构建二维差分数组？</h3><p>构建二维差分数组的步骤如下：</p>
<ol>
<li>初始化一个与原数组大小相同的二维数组 <code>diff</code>，其大小为 <code>(rows + 1) x (cols + 1)</code>，以便处理边界情况。</li>
<li>计算每个 <code>diff[i][j]</code> 的值。</li>
</ol>
<h3 id="3-区间更新-1"><a href="#3-区间更新-1" class="headerlink" title="3. 区间更新"></a>3. 区间更新</h3><p>对于原数组 <code>arr</code> 的区间更新操作，例如将矩形区域 <code>[(x1, y1), (x2, y2)]</code> 的每个元素加上一个值 <code>x</code>，可以通过以下步骤实现：</p>
<ol>
<li>在差分数组中执行 <code>diff[x1][y1] += x</code>。</li>
<li>在差分数组中执行 <code>diff[x1][y2 + 1] -= x</code>（确保 <code>y2 + 1</code> 不越界）。</li>
<li>在差分数组中执行 <code>diff[x2 + 1][y1] -= x</code>（确保 <code>x2 + 1</code> 不越界）。</li>
<li>在差分数组中执行 <code>diff[x2 + 1][y2 + 1] += x</code>（确保 <code>x2 + 1</code> 和 <code>y2 + 1</code> 不越界）。</li>
</ol>
<p><em>解释</em></p>
<ul>
<li>将 <code>D[x1][y1]</code> 加上 <code>x</code>，表示从 <code>A[x1][y1]</code> 开始的所有元素都加上 <code>x</code>。</li>
<li>将 <code>D[x1][y2+1]</code> 减去 <code>x</code>，表示从 <code>A[x1][y2+1]</code> 开始的所有元素都减去 <code>x</code>。</li>
<li>将 <code>D[x2+1][y1]</code> 减去 <code>x</code>，表示从 <code>A[x2+1][y1]</code> 开始的所有元素都减去 <code>x</code>。</li>
<li>将 <code>D[x2+1][y2+1]</code> 加上 <code>x</code>，表示从 <code>A[x2+1][y2+1]</code> 开始的所有元素都加上 <code>x</code>。</li>
</ul>
<h2 id="习题1前缀和"><a href="#习题1前缀和" class="headerlink" title="习题1前缀和"></a>习题1<strong>前缀和</strong></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定义一个数组a，有q+1次询问，对于每次询问：</p>
<p>给定两个整数l,r，求出a<del>l</del>+a<del>l+1</del>+…+a<del>r</del>的结果。</p>
</blockquote>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><blockquote>
<p>第一行一个整数表示样例个数T(1≤T≤10)。</p>
<p>对于每组样例：</p>
<p>第一行2个整数n(1≤n≤10^5^),q(1≤q≤10^5^)，分别表示数组长度和询问次数。</p>
<p>第二行n个整数，表示数组a(−10^9^≤a<del>i</del>≤10^9^)。</p>
<p>接下来q行，每行两个整数l,r(1≤l≤r≤n)表示询问的区间。</p>
</blockquote>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>对于每组样例，一行一个整数表示答案。</p>
</blockquote>
<h4 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">5 3</span><br><span class="line">1<span class="number"> 2 </span>3<span class="number"> 4 </span>5</span><br><span class="line">1 2</span><br><span class="line">2 5</span><br><span class="line">3 4</span><br><span class="line">7 2</span><br><span class="line">-1<span class="number"> 9 </span>-10<span class="number"> 8 </span>2<span class="number"> 6 </span>11</span><br><span class="line">1 5</span><br><span class="line">2 7</span><br></pre></td></tr></table></figure>

<h4 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">14</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">26</span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">// 定义常量 N，表示数组的最大长度</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 定义数组 a 和前缀和数组 pr</span></span><br><span class="line">ll a[N], pr[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 关闭同步流，加快输入输出速度</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 读取测试用例的数量 T</span></span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="comment">// 处理每个测试用例</span></span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="comment">// 读取数组长度 n 和查询次数 q</span></span><br><span class="line">        <span class="type">int</span> n, q;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">        <span class="comment">// 读取数组 a 的元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">        <span class="comment">// 构建前缀和数组 pr</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) pr[i] = pr[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        <span class="comment">// 处理 q 次区间查询操作</span></span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            <span class="type">int</span> l, r;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            <span class="comment">// 通过前缀和数组计算区间和并输出</span></span><br><span class="line">            cout &lt;&lt; pr[r] - pr[l - <span class="number">1</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="知识点讲解"><a href="#知识点讲解" class="headerlink" title="知识点讲解"></a>知识点讲解</h3><h4 id="1-前缀和"><a href="#1-前缀和" class="headerlink" title="1. 前缀和"></a>1. 前缀和</h4><p>前缀和（Prefix Sum）是一种用于快速计算数组中某个区间和的技术。对于一个数组 <code>a</code>，其前缀和数组 <code>pr</code> 定义如下：</p>
<ul>
<li><code>pr[i]</code> 表示数组 <code>a</code> 中从第 0 个元素到第 <code>i</code> 个元素的和，即 <code>pr[i] = a[0] + a[1] + ... + a[i]</code>。</li>
</ul>
<p>通过前缀和数组，可以在常数时间内计算任意区间的和：</p>
<ul>
<li><code>sum[l, r] = pr[r] - pr[l-1]</code>（假设 <code>l &gt; 0</code>）。</li>
<li>如果 <code>l = 0</code>，则 <code>sum[0, r] = pr[r]</code>。</li>
</ul>
<h4 id="2-代码逻辑"><a href="#2-代码逻辑" class="headerlink" title="2. 代码逻辑"></a>2. 代码逻辑</h4><ol>
<li><strong>输入处理</strong>：<ul>
<li>读取测试用例的数量 <code>T</code>。</li>
<li>对于每个测试用例，读取数组长度 <code>n</code> 和查询次数 <code>q</code>。</li>
<li>读取数组 <code>a</code> 的元素。</li>
</ul>
</li>
<li><strong>构建前缀和数组</strong>：<ul>
<li>通过数组 <code>a</code> 构建前缀和数组 <code>pr</code>。</li>
</ul>
</li>
<li><strong>区间查询</strong>：<ul>
<li>对于每个区间查询操作 <code>[l, r]</code>，通过前缀和数组计算区间和并输出。</li>
</ul>
</li>
</ol>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul>
<li><strong>时间复杂度</strong>：<ul>
<li>构建前缀和数组的时间复杂度为 <code>O(n)</code>。</li>
<li>区间查询的时间复杂度为 <code>O(1)</code>。</li>
<li>因此，总的时间复杂度为 <code>O(T * (n + q))</code>，其中 <code>T</code> 是测试用例的数量。</li>
</ul>
</li>
<li><strong>空间复杂度</strong>：<ul>
<li>使用了一个前缀和数组 <code>pr</code>，空间复杂度为 <code>O(n)</code>。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="习题2差分"><a href="#习题2差分" class="headerlink" title="习题2差分"></a>习题2<strong>差分</strong></h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定一个长度为n的数组a，和两个整数p,q。</p>
<p>先进行p次区间加操作：将区间[l,r]的数字都加上x。</p>
<p>再进行q次区间查询操作：求出[l,r]的数字之和。</p>
<p>对于每次区间查询操作，输出结果。</p>
</blockquote>
<h4 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述"></a>输入描述</h4><blockquote>
<p>第一行三个整数n,p,q。(1≤n≤10^5^,0≤p≤10^5^,0≤10^5^≤q)</p>
<p>第二行n个整数表示数组a。(−10^9^≤a<del>i</del>≤10^9^)</p>
<p>接下来p行，每行三个整数l,r,x。(1≤l≤r≤n,−10^9^≤x≤10^9^)</p>
<p>接下来q行，每行两个整数l,r。(1≤l≤r≤n)</p>
</blockquote>
<h4 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>对于每次区间查询操作，输出结果。</p>
</blockquote>
<h4 id="输入样例1-1"><a href="#输入样例1-1" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-1"><a href="#输出样例1-1" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">15</span><br></pre></td></tr></table></figure>

<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">// 定义常量 N，表示数组的最大长度</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 定义数组 a, d, pre</span></span><br><span class="line">ll a[N], d[N], pre[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 关闭同步流，加快输入输出速度</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 读取输入的 n, p, q</span></span><br><span class="line">    <span class="type">int</span> n, p, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; p &gt;&gt; q;</span><br><span class="line">    <span class="comment">// 读取数组 a 的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="comment">// 构建差分数组 d</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) d[i] = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 处理 p 次区间修改操作</span></span><br><span class="line">    <span class="keyword">while</span> (p--) &#123;</span><br><span class="line">        <span class="type">int</span> l, r, x;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">        <span class="comment">// 在差分数组上进行区间修改</span></span><br><span class="line">        d[l] += x;</span><br><span class="line">        d[r + <span class="number">1</span>] -= x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过差分数组还原数组 a</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i] = a[i - <span class="number">1</span>] + d[i];</span><br><span class="line">    <span class="comment">// 构建前缀和数组 pre</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) pre[i] = pre[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    <span class="comment">// 处理 q 次区间查询操作</span></span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="comment">// 通过前缀和数组计算区间和</span></span><br><span class="line">        cout &lt;&lt; pre[r] - pre[l - <span class="number">1</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="知识点讲解-1"><a href="#知识点讲解-1" class="headerlink" title="知识点讲解"></a>知识点讲解</h3><h4 id="1-差分数组"><a href="#1-差分数组" class="headerlink" title="1. 差分数组"></a>1. 差分数组</h4><p>差分数组（Difference Array）是一种用于快速对数组进行区间修改的技术。对于一个数组 <code>a</code>，其差分数组 <code>d</code> 定义如下：</p>
<ul>
<li><code>d[i] = a[i] - a[i-1]</code>（假设 <code>i &gt; 0</code>）。</li>
<li><code>d[0] = a[0]</code>。</li>
</ul>
<p>差分数组的优点在于，可以通过对差分数组进行简单的修改来实现对原数组的区间修改。例如，对区间 <code>[l, r]</code> 加上 <code>x</code>，只需要在差分数组上进行如下操作：</p>
<ul>
<li><code>d[l] += x</code></li>
<li><code>d[r+1] -= x</code></li>
</ul>
<p>然后通过差分数组还原原数组：</p>
<ul>
<li><code>a[i] = a[i-1] + d[i]</code></li>
</ul>
<h4 id="2-前缀和"><a href="#2-前缀和" class="headerlink" title="2. 前缀和"></a>2. 前缀和</h4><p>前缀和（Prefix Sum）是一种用于快速计算数组中某个区间和的技术。对于一个数组 <code>a</code>，其前缀和数组 <code>pre</code> 定义如下：</p>
<ul>
<li><code>pre[i]</code> 表示数组 <code>a</code> 中从第 0 个元素到第 <code>i</code> 个元素的和，即 <code>pre[i] = a[0] + a[1] + ... + a[i]</code>。</li>
</ul>
<p>通过前缀和数组，可以在常数时间内计算任意区间的和：</p>
<ul>
<li><code>sum[l, r] = pre[r] - pre[l-1]</code>（假设 <code>l &gt; 0</code>）。</li>
<li>如果 <code>l = 0</code>，则 <code>sum[0, r] = pre[r]</code>。</li>
</ul>
<h4 id="3-代码逻辑"><a href="#3-代码逻辑" class="headerlink" title="3. 代码逻辑"></a>3. 代码逻辑</h4><ol>
<li><strong>输入处理</strong>：<ul>
<li>读取数组长度 <code>n</code>，区间修改操作次数 <code>p</code>，区间查询操作次数 <code>q</code>。</li>
<li>读取数组 <code>a</code> 的元素。</li>
</ul>
</li>
<li><strong>构建差分数组</strong>：<ul>
<li>通过数组 <code>a</code> 构建差分数组 <code>d</code>。</li>
</ul>
</li>
<li><strong>区间修改</strong>：<ul>
<li>对于每个区间修改操作 <code>[l, r]</code> 加上 <code>x</code>，在差分数组上进行相应修改。</li>
</ul>
</li>
<li><strong>还原数组</strong>：<ul>
<li>通过差分数组 <code>d</code> 还原数组 <code>a</code>。</li>
</ul>
</li>
<li><strong>构建前缀和数组</strong>：<ul>
<li>通过数组 <code>a</code> 构建前缀和数组 <code>pre</code>。</li>
</ul>
</li>
<li><strong>区间查询</strong>：<ul>
<li>对于每个区间查询操作 <code>[l, r]</code>，通过前缀和数组计算区间和并输出。</li>
</ul>
</li>
</ol>
<h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul>
<li><strong>时间复杂度</strong>：<ul>
<li>构建差分数组和前缀和数组的时间复杂度为 <code>O(n)</code>。</li>
<li>区间修改和区间查询的时间复杂度为 <code>O(1)</code>。</li>
<li>因此，总的时间复杂度为 <code>O(n + p + q)</code>。</li>
</ul>
</li>
<li><strong>空间复杂度</strong>：<ul>
<li>使用了一个差分数组 <code>d</code> 和一个前缀和数组 <code>pre</code>，空间复杂度为 <code>O(n)</code>。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="习题3二维前缀和"><a href="#习题3二维前缀和" class="headerlink" title="习题3二维前缀和"></a>习题3<strong>二维前缀和</strong></h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定一个n行m列的整数矩阵。</p>
<p>有q个询问，每个询问格式为：x<del>1</del>,y<del>1</del>,x<del>2</del>,y<del>2</del>，表示一个子矩阵的左上角和右下角的坐标。</p>
<p>对于每个询问，请回答子矩阵的所有数之和。</p>
</blockquote>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><blockquote>
<p>第一行包括三个整数n,m,q（1≤n,m≤10^3^，1≤q≤10^5^）。</p>
<p>接下来n行，每行包括m<em>m</em>个整数，表示整数矩阵（每个整数的取值范围为[1,10^5^]）。</p>
<p>接下来q行，每行包括四个整数x<del>1</del>,y<del>1</del>,x<del>2</del>,y<del>2</del>（1≤x<del>1</del>≤x<del>2</del>≤n，1≤y<del>1</del>≤y<del>2</del>≤m），表示一个询问的左上角、右下角坐标。</p>
</blockquote>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><blockquote>
<p>共q行，第i（1≤i≤q）行输出第i个询问的结果。</p>
</blockquote>
<h4 id="样例输入1"><a href="#样例输入1" class="headerlink" title="样例输入1"></a>样例输入1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">7 </span><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="symbol">6 </span><span class="number">2</span> <span class="number">4</span> </span><br><span class="line"><span class="symbol">7 </span><span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="symbol">4 </span><span class="number">3</span> <span class="number">6</span> </span><br><span class="line"><span class="symbol">3 </span><span class="number">9</span> <span class="number">9</span> </span><br><span class="line"><span class="symbol">6 </span><span class="number">10</span> <span class="number">1</span> </span><br><span class="line"><span class="symbol">9 </span><span class="number">10</span> <span class="number">4</span> </span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h4 id="样例输出1"><a href="#样例输出1" class="headerlink" title="样例输出1"></a>样例输出1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">77</span><br><span class="line">31</span><br></pre></td></tr></table></figure>

<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">// 定义常量 N，表示二维数组的最大维度</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">9</span>;</span><br><span class="line"><span class="comment">// 定义二维数组 a 和二维前缀和数组 p</span></span><br><span class="line">ll a[N][N], p[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 读取输入的 n, m, q</span></span><br><span class="line">    <span class="type">int</span> n, m, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="comment">// 读取二维数组 a 的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构建二维前缀和数组 p</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            p[i][j] = p[i - <span class="number">1</span>][j] + p[i][j - <span class="number">1</span>] - p[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理 q 次区间查询操作</span></span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">        <span class="comment">// 通过二维前缀和数组计算子矩阵的和并输出</span></span><br><span class="line">        cout &lt;&lt; p[x2][y2] - p[x1 - <span class="number">1</span>][y2] - p[x2][y1 - <span class="number">1</span>] + p[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="知识点讲解-2"><a href="#知识点讲解-2" class="headerlink" title="知识点讲解"></a>知识点讲解</h3><h4 id="1-二维前缀和"><a href="#1-二维前缀和" class="headerlink" title="1. 二维前缀和"></a>1. 二维前缀和</h4><p>二维前缀和（2D Prefix Sum）是一种用于快速计算二维数组中某个子矩阵和的技术。对于一个二维数组 <code>a</code>，其二维前缀和数组 <code>p</code> 定义如下：</p>
<ul>
<li><code>p[i][j]</code> 表示从 <code>(0, 0)</code> 到 <code>(i, j)</code> 的子矩阵的和。</li>
</ul>
<p>构建二维前缀和数组的公式如下：</p>
<ul>
<li><code>p[i][j] = p[i-1][j] + p[i][j-1] - p[i-1][j-1] + a[i][j]</code></li>
</ul>
<p>通过二维前缀和数组，可以在常数时间内计算任意子矩阵的和：</p>
<ul>
<li><code>sum[x1, y1, x2, y2] = p[x2][y2] - p[x1-1][y2] - p[x2][y1-1] + p[x1-1][y1-1]</code></li>
</ul>
<h4 id="2-代码逻辑-1"><a href="#2-代码逻辑-1" class="headerlink" title="2. 代码逻辑"></a>2. 代码逻辑</h4><ol>
<li><strong>输入处理</strong>：<ul>
<li>读取二维数组的维度 <code>n</code> 和 <code>m</code>，以及查询次数 <code>q</code>。</li>
<li>读取二维数组 <code>a</code> 的元素。</li>
</ul>
</li>
<li><strong>构建二维前缀和数组</strong>：<ul>
<li>通过二维数组 <code>a</code> 构建二维前缀和数组 <code>p</code>。</li>
</ul>
</li>
<li><strong>区间查询</strong>：<ul>
<li>对于每个区间查询操作 <code>[x1, y1, x2, y2]</code>，通过二维前缀和数组计算子矩阵的和并输出。</li>
</ul>
</li>
</ol>
<h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul>
<li><strong>时间复杂度</strong>：<ul>
<li>构建二维前缀和数组的时间复杂度为 <code>O(n * m)</code>。</li>
<li>区间查询的时间复杂度为 <code>O(1)</code>。</li>
<li>因此，总的时间复杂度为 <code>O(n * m + q)</code>。</li>
</ul>
</li>
<li><strong>空间复杂度</strong>：<ul>
<li>使用了一个二维前缀和数组 <code>p</code>，空间复杂度为 <code>O(n * m)</code>。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="习题4鼠鼠我鸭"><a href="#习题4鼠鼠我鸭" class="headerlink" title="习题4鼠鼠我鸭"></a>习题4<strong>鼠鼠我鸭</strong></h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>在一个叫做酱西功爷枝叶鸡树学院的地方有n只小动物，要么是鼠鼠，要么是鸭鸭，从1到n编号，每只小动物有个体重a<del>i</del>。</p>
<p>在这个学校里，存在一种神奇的魔法，可以将编号位于某个区间[l,r]内的所有鼠鼠都变为鸭鸭，鸭鸭都变为鼠鼠（魔法并不会改变体重）。</p>
<p>现在你可以施放这个魔法至多1次。（也可以不施放）</p>
<p>问最终鸭鸭的总重量最多是多少？</p>
</blockquote>
<h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><blockquote>
<p>第一行一个整数T表示样例个数。(1≤T≤10)</p>
<p>对于每个样例：</p>
<p>第一行一个整数n表示小动物的个数。(1≤n≤10^5^)</p>
<p>第二行n个整数，表示第i个小动物的类型。0表示鼠鼠，1表示鸭鸭。</p>
<p>第三行n个整数，表示第i个小动物的体重a<del>i</del>。(1≤a<del>i</del>≤10^9^)</p>
</blockquote>
<h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><blockquote>
<p>对于每个样例一行一个整数表示答案。</p>
</blockquote>
<h4 id="样例输入1-1"><a href="#样例输入1-1" class="headerlink" title="样例输入1"></a>样例输入1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">5</span> <span class="number">6</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h4 id="样例输出1-1"><a href="#样例输出1-1" class="headerlink" title="样例输出1"></a>样例输出1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">16</span><br></pre></td></tr></table></figure>

<blockquote>
<p>解释：第二个样例中，翻转区间[3,4]，使得结果最大为5+6+5&#x3D;16。</p>
</blockquote>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">// 定义常量 N，表示数组的最大长度</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">9</span>;</span><br><span class="line"><span class="comment">// 定义数组 a, p, w</span></span><br><span class="line">ll a[N], p[N], w[N];</span><br><span class="line"><span class="comment">// 解决问题的主函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">// 读取数组 a 和权重数组 w</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; w[i];</span><br><span class="line">    <span class="comment">// 计算数组 a 中元素为 1 和 0 的权重和</span></span><br><span class="line">    ll ess = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ess += a[i] * w[i];</span><br><span class="line">    <span class="comment">// 初始化最小值 mi 和最大修正值 fix</span></span><br><span class="line">    ll mi = <span class="number">0</span>, fix = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 构建前缀和数组 p，并计算最大修正值 fix</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] + (a[i] ? <span class="number">-1</span> : <span class="number">1</span>) * w[i];</span><br><span class="line">        fix = <span class="built_in">max</span>(fix, p[i] - mi);</span><br><span class="line">        mi = <span class="built_in">min</span>(mi, p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    cout &lt;&lt; ess + fix &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 关闭同步流，加快输入输出速度</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 读取测试用例的数量 _</span></span><br><span class="line">    <span class="type">int</span> _;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="comment">// 处理每个测试用例</span></span><br><span class="line">    <span class="keyword">while</span> (_--) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="知识点讲解-3"><a href="#知识点讲解-3" class="headerlink" title="知识点讲解"></a>知识点讲解</h3><h4 id="1-前缀和-1"><a href="#1-前缀和-1" class="headerlink" title="1. 前缀和"></a>1. 前缀和</h4><p>前缀和（Prefix Sum）是一种用于快速计算数组中某个区间和的技术。对于一个数组 <code>a</code>，其前缀和数组 <code>p</code> 定义如下：</p>
<ul>
<li><code>p[i]</code> 表示数组 <code>a</code> 中从第 0 个元素到第 <code>i</code> 个元素的和，即 <code>p[i] = a[0] + a[1] + ... + a[i]</code>。</li>
</ul>
<p>通过前缀和数组，可以在常数时间内计算任意区间的和：</p>
<ul>
<li><code>sum[l, r] = p[r] - p[l-1]</code>（假设 <code>l &gt; 0</code>）。</li>
<li>如果 <code>l = 0</code>，则 <code>sum[0, r] = p[r]</code>。</li>
</ul>
<h4 id="2-代码逻辑-2"><a href="#2-代码逻辑-2" class="headerlink" title="2. 代码逻辑"></a>2. 代码逻辑</h4><ol>
<li><strong>输入处理</strong>：<ul>
<li>读取数组长度 <code>n</code>。</li>
<li>读取数组 <code>a</code> 和权重数组 <code>w</code>。</li>
</ul>
</li>
<li><strong>计算权重和</strong>：<ul>
<li>计算数组 <code>a</code> 中元素为 <code>1</code> 和 <code>0</code> 的权重和 <code>ess</code>。</li>
</ul>
</li>
<li><strong>构建前缀和数组</strong>：<ul>
<li>构建前缀和数组 <code>p</code>，其中 <code>p[i]</code> 表示从第 1 个元素到第 <code>i</code> 个元素的权重和。</li>
<li>如果 <code>a[i]</code> 为 <code>1</code>，则权重为 <code>-w[i]</code>；如果 <code>a[i]</code> 为 <code>0</code>，则权重为 <code>w[i]</code>。</li>
</ul>
</li>
<li><strong>计算最大修正值</strong>：<ul>
<li>通过前缀和数组 <code>p</code> 计算最大修正值 <code>fix</code>，即 <code>p[i] - mi</code> 的最大值，其中 <code>mi</code> 是 <code>p[i]</code> 的最小值。</li>
</ul>
</li>
<li><strong>输出结果</strong>：<ul>
<li>输出 <code>ess + fix</code>，即最终结果。</li>
</ul>
</li>
</ol>
<h3 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul>
<li><strong>时间复杂度</strong>：<ul>
<li>构建前缀和数组的时间复杂度为 <code>O(n)</code>。</li>
<li>计算最大修正值的时间复杂度为 <code>O(n)</code>。</li>
<li>因此，总的时间复杂度为 <code>O(n)</code>。</li>
</ul>
</li>
<li><strong>空间复杂度</strong>：<ul>
<li>使用了一个前缀和数组 <code>p</code>，空间复杂度为 <code>O(n)</code>。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="习题5二维差分"><a href="#习题5二维差分" class="headerlink" title="习题5二维差分"></a>习题5<strong>二维差分</strong></h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定一个n行m列的整数矩阵。</p>
<p>有q个操作，每个操作格式为：x<del>1</del>，y<del>1</del>，x<del>2</del>，y<del>2</del>，c，其中(x<del>1</del>,y<del>1</del>)、(x<del>2</del>，y<del>2</del>)分别表示一个子矩阵的左上角和右下角的坐标，每个操作将对应的子矩阵的每个元素加上c。</p>
<p>请输出进行完所有操作后的矩阵。</p>
</blockquote>
<h4 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述"></a>输入描述</h4><blockquote>
<p>第一行包括三个整数n,m,q（1≤n,m≤10^3^,1≤q≤10^5^）。</p>
</blockquote>
<h4 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>共n行，每行包括m个整数，表示进行完所有操作后的矩阵。</p>
</blockquote>
<h4 id="输入样例1-2"><a href="#输入样例1-2" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="symbol">3 </span><span class="number">3</span> <span class="number">2</span> </span><br><span class="line"><span class="symbol">5 </span><span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="symbol">4 </span><span class="number">4</span> <span class="number">2</span> </span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-2"><a href="#输出样例1-2" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">7</span> <span class="number">1</span> </span><br><span class="line"><span class="symbol">5 </span><span class="number">5</span> <span class="number">4</span> </span><br><span class="line"><span class="symbol">5 </span><span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="symbol">4 </span><span class="number">5</span> <span class="number">3</span> </span><br></pre></td></tr></table></figure>

<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">// 定义常量 N，表示二维数组的最大维度</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">9</span>;</span><br><span class="line"><span class="comment">// 定义二维数组 a, p, d</span></span><br><span class="line">ll a[N][N], p[N][N], d[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 读取输入的 n, m, q</span></span><br><span class="line">    <span class="type">int</span> n, m, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="comment">// 读取二维数组 a 的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构建二维差分数组 d</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            d[i][j] += a[i][j];</span><br><span class="line">            d[i + <span class="number">1</span>][j] -= a[i][j];</span><br><span class="line">            d[i][j + <span class="number">1</span>] -= a[i][j];</span><br><span class="line">            d[i + <span class="number">1</span>][j + <span class="number">1</span>] += a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理 q 次区间修改操作</span></span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2, v;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; v;</span><br><span class="line">        d[x1][y1] += v;</span><br><span class="line">        d[x1][y2 + <span class="number">1</span>] -= v;</span><br><span class="line">        d[x2 + <span class="number">1</span>][y1] -= v;</span><br><span class="line">        d[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过差分数组还原二维数组 a，并输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            a[i][j] = a[i - <span class="number">1</span>][j] + a[i][j - <span class="number">1</span>] - a[i - <span class="number">1</span>][j - <span class="number">1</span>] + d[i][j];</span><br><span class="line">            cout &lt;&lt; a[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="知识点讲解-4"><a href="#知识点讲解-4" class="headerlink" title="知识点讲解"></a>知识点讲解</h3><h4 id="1-二维差分数组"><a href="#1-二维差分数组" class="headerlink" title="1. 二维差分数组"></a>1. 二维差分数组</h4><p>二维差分数组（2D Difference Array）是一种用于快速对二维数组进行区间修改的技术。对于一个二维数组 <code>a</code>，其二维差分数组 <code>d</code> 定义如下：</p>
<ul>
<li><code>d[i][j]</code> 表示从 <code>(i, j)</code> 到 <code>(i+1, j+1)</code> 的子矩阵的差值。</li>
</ul>
<p>构建二维差分数组的公式如下：</p>
<ul>
<li><code>d[i][j] += a[i][j]</code></li>
<li><code>d[i+1][j] -= a[i][j]</code></li>
<li><code>d[i][j+1] -= a[i][j]</code></li>
<li><code>d[i+1][j+1] += a[i][j]</code></li>
</ul>
<p>通过二维差分数组，可以在常数时间内对二维数组进行区间修改。例如，对子矩阵 <code>[x1, y1, x2, y2]</code> 加上 <code>v</code>，只需要在差分数组上进行如下操作：</p>
<ul>
<li><code>d[x1][y1] += v</code></li>
<li><code>d[x1][y2+1] -= v</code></li>
<li><code>d[x2+1][y1] -= v</code></li>
<li><code>d[x2+1][y2+1] += v</code></li>
</ul>
<p>然后通过差分数组还原二维数组：</p>
<ul>
<li><code>a[i][j] = a[i-1][j] + a[i][j-1] - a[i-1][j-1] + d[i][j]</code></li>
</ul>
<h4 id="2-代码逻辑-3"><a href="#2-代码逻辑-3" class="headerlink" title="2. 代码逻辑"></a>2. 代码逻辑</h4><ol>
<li><strong>输入处理</strong>：<ul>
<li>读取二维数组的维度 <code>n</code> 和 <code>m</code>，以及区间修改操作次数 <code>q</code>。</li>
<li>读取二维数组 <code>a</code> 的元素。</li>
</ul>
</li>
<li><strong>构建二维差分数组</strong>：<ul>
<li>通过二维数组 <code>a</code> 构建二维差分数组 <code>d</code>。</li>
</ul>
</li>
<li><strong>区间修改</strong>：<ul>
<li>对于每个区间修改操作 <code>[x1, y1, x2, y2]</code> 加上 <code>v</code>，在差分数组上进行相应修改。</li>
</ul>
</li>
<li><strong>还原二维数组</strong>：<ul>
<li>通过差分数组 <code>d</code> 还原二维数组 <code>a</code>，并输出。</li>
</ul>
</li>
</ol>
<h3 id="复杂度分析-4"><a href="#复杂度分析-4" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul>
<li><strong>时间复杂度</strong>：<ul>
<li>构建二维差分数组的时间复杂度为 <code>O(n * m)</code>。</li>
<li>区间修改的时间复杂度为 <code>O(1)</code>。</li>
<li>还原二维数组的时间复杂度为 <code>O(n * m)</code>。</li>
<li>因此，总的时间复杂度为 <code>O(n * m + q)</code>。</li>
</ul>
</li>
<li><strong>空间复杂度</strong>：<ul>
<li>使用了一个二维差分数组 <code>d</code>，空间复杂度为 <code>O(n * m)</code>。</li>
</ul>
</li>
</ul>
<hr>
<hr>
<h1 id="第二讲：位运算双指针排序二分"><a href="#第二讲：位运算双指针排序二分" class="headerlink" title="第二讲：位运算双指针排序二分"></a>第二讲：位运算双指针排序二分</h1><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/hoshinoai.png" alt="hoshinoai" loading="lazy"></p>
<h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><h2 id="习题二进制中1的个数"><a href="#习题二进制中1的个数" class="headerlink" title="习题二进制中1的个数"></a>习题<em>二进制中1的个数</em></h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定一个长度为n的整数数组a<em>a</em>，你需要求出每个元素的二进制表示中11的个数。</p>
</blockquote>
<h4 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">第一行：一个整数<span class="built_in">n</span>（<span class="number">1</span>≤<span class="built_in">n</span>≤<span class="number">2</span>×<span class="number">10</span>^<span class="number">5</span>）。</span><br><span class="line">第二行：<span class="built_in">n</span>个整数，表示数组a（<span class="number">0</span>≤a_i ≤<span class="number">2</span>×<span class="number">10</span>^<span class="number">9</span> ，其中<span class="number">1</span>≤i≤<span class="built_in">n</span>）。</span><br></pre></td></tr></table></figure>

<h4 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>共一行，输出n个整数，其中第i个数为ai的二进制中1的个数。</p>
</blockquote>
<h4 id="输入样例1-3"><a href="#输入样例1-3" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">10</span> <span class="number">6</span> </span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-3"><a href="#输出样例1-3" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">2</span> </span><br></pre></td></tr></table></figure>

<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+9</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> a[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&amp;<span class="number">1</span>)count++;<span class="comment">//1是掩码</span></span><br><span class="line">            a[i]&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;count&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="习题-我们需要0"><a href="#习题-我们需要0" class="headerlink" title="习题 我们需要0"></a>习题 <em>我们需要0</em></h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定一个大小为n的非负整数数组a。</p>
<p>你可以选定一个<code>非负整数</code>x，并令bi&#x3D;ai⊕x,其中1≤i≤n,请问是否存在x，使得b1⊕b2⊕⋯⊕bn&#x3D;0?</p>
</blockquote>
<h4 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241020220045672.png" alt="image-20241020220045672" loading="lazy"></p>
<h4 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>对于每个案例：</p>
<p>若存在这样的x<em>x</em>，则输出x<em>x</em>；否则，输出−1−1。</p>
</blockquote>
<h4 id="输入样例1-4"><a href="#输入样例1-4" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">5</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-4"><a href="#输出样例1-4" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+9</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x;cin&gt;&gt;x;</span><br><span class="line">            ans^=x;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="习题二进制中1的个数-1"><a href="#习题二进制中1的个数-1" class="headerlink" title="习题二进制中1的个数"></a>习题<em>二进制中1的个数</em></h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定一个长度为n的整数数组a<em>a</em>，你需要求出每个元素的二进制表示中11的个数。</p>
</blockquote>
<h4 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241020160436526.png" alt="image-20241020160436526" loading="lazy"></p>
<h4 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述"></a>输出描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241020160456871.png" alt="image-20241020160456871" loading="lazy"></p>
<h4 id="输入样例1-5"><a href="#输入样例1-5" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">5</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-5"><a href="#输出样例1-5" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+9</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x;cin&gt;&gt;x;</span><br><span class="line">            ans^=x;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="习题-【模板】排序（1）"><a href="#习题-【模板】排序（1）" class="headerlink" title="习题 【模板】排序（1）"></a>习题 <em>【模板】排序（1）</em></h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定一个大小为<em>n</em>的整型数组a<em>a</em>，你需要对其按照升序排序并进行去重。</p>
</blockquote>
<h4 id="输入描述-6"><a href="#输入描述-6" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241020220147070.png" alt="image-20241020220147070" loading="lazy"></p>
<h4 id="输出描述-6"><a href="#输出描述-6" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>共一行，<em>n</em>个整数，表示进行升序排序并进行去重后的数组。</p>
</blockquote>
<h4 id="输入样例1-6"><a href="#输入样例1-6" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">0</span> <span class="number">2</span> <span class="number">3</span> <span class="number">0</span> <span class="number">7</span> <span class="number">1</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-6"><a href="#输出样例1-6" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>

<h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+9</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;cin&gt;&gt;x;</span><br><span class="line">        a.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">    a.<span class="built_in">erase</span>(<span class="built_in">unique</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>()),a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; i:a)cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="习题二进制中1的个数-2"><a href="#习题二进制中1的个数-2" class="headerlink" title="习题二进制中1的个数"></a>习题<em>二进制中1的个数</em></h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定一个长度为n的整数数组a<em>a</em>，你需要求出每个元素的二进制表示中11的个数。</p>
</blockquote>
<h4 id="输入描述-7"><a href="#输入描述-7" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241020161045051.png" alt="image-20241020161045051" loading="lazy"></p>
<h4 id="输出描述-7"><a href="#输出描述-7" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>共一行,n个整数，表示进行升序排序并进行去重后的数组。</p>
</blockquote>
<h4 id="输入样例1-7"><a href="#输入样例1-7" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">0</span> <span class="number">2</span> <span class="number">3</span> <span class="number">0</span> <span class="number">7</span> <span class="number">1</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-7"><a href="#输出样例1-7" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>

<h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+9</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;cin&gt;&gt;x;</span><br><span class="line">        a.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">    a.<span class="built_in">erase</span>(<span class="built_in">unique</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>()),a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; i:a)cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="习题【模板】排序（2）"><a href="#习题【模板】排序（2）" class="headerlink" title="习题【模板】排序（2）"></a>习题<em>【模板】排序（2）</em></h2><h3 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>Jakon家里有一堆未整理的书籍，胡乱地摆在书架上。有一天，身为强迫症的他终于看不下去了，于是他决定整理这堆图书，使其变得整齐一些。</p>
<p>他有n<em>n</em>本高度、厚度、宽度确定的书籍，他决定按照高度、厚度、宽度分别作为第一、第二、第三关键字，把这些书籍降序地排列成一排。</p>
</blockquote>
<h4 id="输入描述-8"><a href="#输入描述-8" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241020163811841.png" alt="image-20241020163811841" loading="lazy"></p>
<h4 id="输出描述-8"><a href="#输出描述-8" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>共<em>n</em>行，根据题意将所有书籍进行排序后，按照顺序，每行输出一本书籍的高度、厚度、宽度。</p>
</blockquote>
<h4 id="输入样例1-8"><a href="#输入样例1-8" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span> <span class="number">7</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="symbol">10 </span><span class="number">10</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-8"><a href="#输出样例1-8" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span> <span class="number">7</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">5</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+9</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Book</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Book &amp;o) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a==o.a&amp;&amp;b==o.b)<span class="keyword">return</span> c&lt;o.c;</span><br><span class="line">        <span class="keyword">if</span>(a==o.a)<span class="keyword">return</span> b&lt;o.b;</span><br><span class="line">        <span class="keyword">return</span> a&lt;o.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)cin&gt;&gt;p[i].a&gt;&gt;p[i].b&gt;&gt;p[i].c;</span><br><span class="line">    <span class="built_in">sort</span>(p,p+n);</span><br><span class="line">    <span class="built_in">reverse</span>(p,p+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        cout&lt;&lt;p[i].a&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;p[i].b&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;p[i].c&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">// for(auto&amp; i:p)cout&lt;&lt;i.a&lt;&lt;&#x27; &#x27;&lt;&lt;i.b&lt;&lt;&#x27; &#x27;&lt;&lt;i.c&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="习题-【模板】排序（3）"><a href="#习题-【模板】排序（3）" class="headerlink" title="习题 【模板】排序（3）"></a>习题 <em>【模板】排序（3）</em></h2><h3 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定一个大小为<em>n</em>的整型数组<em>a</em>，你需要对该数组进行升序排序，并输出排序后的结果。</p>
</blockquote>
<h4 id="输入描述-9"><a href="#输入描述-9" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241020192955049.png" alt="image-20241020192955049" loading="lazy"></p>
<h4 id="输出描述-9"><a href="#输出描述-9" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>共一行，<em>n</em>个整数，表示进行升序排序后的数组。</p>
</blockquote>
<h4 id="输入样例1-9"><a href="#输入样例1-9" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">1000 </span><span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-9"><a href="#输出样例1-9" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure>

<h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">// 定义常量 N，表示数据的最大大小为 2e5 + 9</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">9</span>;</span><br><span class="line"><span class="comment">// 定义一个数组 a，用于存储每个数字出现的次数</span></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 优化输入输出性能</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 读取输入的整数 n，表示接下来有 n 个数字</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">// 读取 n 个数字，并统计每个数字出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="comment">// 将数字 x 的出现次数加 1</span></span><br><span class="line">        a[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出每个数字，按照它们出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2e5</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 对于每个数字 i，输出它出现的次数次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; a[i]; ++j) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出换行符，使输出格式更清晰</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="习题最长连续不重复子序列"><a href="#习题最长连续不重复子序列" class="headerlink" title="习题最长连续不重复子序列"></a>习题<em>最长连续不重复子序列</em></h2><h3 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>本题有<em>T</em>组测试样例，对于每组样例：</p>
<p>给定一个长度为<em>n</em>的数组，求其中最长的连续且无重复数字的子序列的长度。</p>
</blockquote>
<h4 id="输入描述-10"><a href="#输入描述-10" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241020203309498.png" alt="image-20241020203309498" loading="lazy"></p>
<h4 id="输出描述-10"><a href="#输出描述-10" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>一个整数表示答案。</p>
</blockquote>
<h4 id="输入样例1-10"><a href="#输入样例1-10" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-10"><a href="#输出样例1-10" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<p>解释：[2,3,5]为答案。</p>
<h4 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">9</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>解释：[1,5,7,8,9]为答案。</p>
<h3 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span><span class="number">+9</span>;</span><br><span class="line"><span class="type">int</span> a[N],c[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="comment">//memset(c,0,sizeof(int)*(n+1));等价于下面的式子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)c[a[i]]=<span class="number">0</span>;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;n&amp;&amp;!c[a[j<span class="number">+1</span>]])c[a[++j]]++;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,j-i<span class="number">+1ll</span>);<span class="comment">//ans为longlong类型</span></span><br><span class="line">        c[a[i]]--;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> _;cin&gt;&gt;_;</span><br><span class="line">    <span class="keyword">while</span>(_--)<span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="习题查找"><a href="#习题查找" class="headerlink" title="习题查找"></a>习题<em>查找</em></h2><h3 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定一个大小为<em>n</em>的单调不减的非负整数序列<em>a</em>（下标从1开始），再给出<em>q</em>个询问。</p>
<p>对于每个询问，给出一个整数<em>x</em>，你需要回答出，<em>x</em>第一次在给定序列<em>a</em>中出现的下标。</p>
</blockquote>
<h4 id="输入描述-11"><a href="#输入描述-11" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241020205225099.png" alt="image-20241020205225099" loading="lazy"></p>
<h4 id="输出描述-11"><a href="#输出描述-11" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>共一行，<em>q</em>个整数，表示每个询问数字在序列中第一次出现的下标，若不存在，则为−1。</p>
<p>请注意，每个整数后为空格，而不是换行。</p>
</blockquote>
<h4 id="输入样例1-11"><a href="#输入样例1-11" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">7 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">5</span> <span class="number">7</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-11"><a href="#输出样例1-11" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3 </span><span class="number">4</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">// 定义常量N，表示数组的最大长度</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span><span class="number">+9</span>;</span><br><span class="line"><span class="comment">// 定义一个全局数组a，用于存储输入的整数序列</span></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="comment">// 解决问题的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 读取输入的整数n和q</span></span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="comment">// 读取n个整数并存储到数组a中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="comment">// 处理q次查询</span></span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 读取查询的整数x</span></span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="comment">// 初始化二分查找的左右边界</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">        <span class="comment">// 二分查找过程</span></span><br><span class="line">        <span class="keyword">while</span>(l + <span class="number">1</span> != r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 计算中间位置</span></span><br><span class="line">            <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 如果中间位置的值小于x，则将左边界移动到mid</span></span><br><span class="line">            <span class="keyword">if</span>(a[mid] &lt; x)</span><br><span class="line">                l = mid;</span><br><span class="line">            <span class="comment">// 否则将右边界移动到mid</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查最终找到的位置r是否等于x</span></span><br><span class="line">        <span class="keyword">if</span>(a[r] == x)</span><br><span class="line">            cout &lt;&lt; r &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 如果相等，输出位置r</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 如果不相等，输出-1表示未找到</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 优化输入输出流</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 设置默认测试用例数量为1</span></span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 如果需要，可以读取多个测试用例</span></span><br><span class="line">    <span class="comment">// cin &gt;&gt; _;</span></span><br><span class="line">    <span class="comment">// 循环处理每个测试用例</span></span><br><span class="line">    <span class="keyword">while</span>(_--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="comment">// 返回程序执行成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="习题进击的奶牛"><a href="#习题进击的奶牛" class="headerlink" title="习题进击的奶牛"></a>习题<em>进击的奶牛</em></h2><h3 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241020211327547.png" alt="image-20241020211327547" loading="lazy"></p>
<h4 id="输入描述-12"><a href="#输入描述-12" class="headerlink" title="输入描述"></a>输入描述</h4><blockquote>
<p>第 1 行：两个用空格隔开的数字N和<em>C</em>。</p>
<p>第 2∼<em>N</em>+1 行：每行一个整数，表示每个隔间的坐标。</p>
</blockquote>
<h4 id="输出描述-12"><a href="#输出描述-12" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>输出只有一行，即相邻两头牛最大的最近距离。</p>
</blockquote>
<h4 id="输入样例1-12"><a href="#输入样例1-12" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-12"><a href="#输出样例1-12" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h3 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">// 定义常量N，表示数组的最大长度</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span><span class="number">+9</span>;</span><br><span class="line"><span class="comment">// 定义全局变量a、n、c</span></span><br><span class="line"><span class="type">int</span> a[N], n, c;</span><br><span class="line"><span class="comment">// 定义函数f，用于计算在给定最小距离mid下，最多能放多少头牛</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, pre = <span class="number">-1e9</span>; <span class="comment">// res表示当前已放的牛的数量，pre表示上一个放了牛的位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果当前位置与上一个放牛位置的距离大于等于mid，则可以放牛</span></span><br><span class="line">        <span class="keyword">if</span>(a[i] - pre &gt;= mid)</span><br><span class="line">        &#123;</span><br><span class="line">            res++; <span class="comment">// 放一头牛</span></span><br><span class="line">            pre = a[i]; <span class="comment">// 更新上一个放牛的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res; <span class="comment">// 返回最多能放的牛的数量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解决问题的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 读取输入的整数n和c</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line">    <span class="comment">// 读取n个整数并存储到数组a中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="comment">// 对数组a进行排序</span></span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="comment">// 初始化二分查找的左右边界</span></span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 二分查找过程</span></span><br><span class="line">    <span class="keyword">while</span>(l + <span class="number">1</span> != r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算中间位置</span></span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果当前mid下能放的牛的数量大于等于c，则尝试更大的mid</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">f</span>(mid) &gt;= c)</span><br><span class="line">            l = mid;</span><br><span class="line">        <span class="comment">// 否则尝试更小的mid</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出最终找到的最小距离</span></span><br><span class="line">    cout &lt;&lt; l &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 优化输入输出流</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 设置默认测试用例数量为1</span></span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 循环处理每个测试用例</span></span><br><span class="line">    <span class="keyword">while</span>(_--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    <span class="comment">// 返回程序执行成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="习题Mex-and-Xor"><a href="#习题Mex-and-Xor" class="headerlink" title="习题Mex and Xor"></a>习题<em>Mex and Xor</em></h2><h3 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241021100326320.png" alt="image-20241021100326320" loading="lazy"></p>
<h4 id="输入描述-13"><a href="#输入描述-13" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241021100338624.png" alt="image-20241021100338624" loading="lazy"></p>
<h4 id="输出描述-13"><a href="#输出描述-13" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>共t<em>t</em>行：第i<em>i</em>行为第i<em>i</em>个测试用例的答案。</p>
</blockquote>
<h4 id="输入样例1-13"><a href="#输入样例1-13" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">0</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">10000</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">10000</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-13"><a href="#输出样例1-13" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h3 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span> <span class="comment">// 引入所有标准库</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; <span class="comment">// 使用标准命名空间</span></span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>; <span class="comment">// 定义 ll 为 long long 的别名</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span><span class="number">+9</span>; <span class="comment">// 定义常量 N，表示数组的大小</span></span><br><span class="line"><span class="type">int</span> prexor[N]; <span class="comment">// 声明一个整型数组 prexor，用于存储前缀异或值</span></span><br><span class="line"><span class="comment">// 解决函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b; <span class="comment">// 声明两个整型变量 a 和 b</span></span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b; <span class="comment">// 从输入中读取 a 和 b 的值</span></span><br><span class="line">    <span class="comment">// 计算 prexor[a-1] 和 b 的异或值</span></span><br><span class="line">    <span class="type">int</span> y = prexor[a<span class="number">-1</span>] ^ b; </span><br><span class="line">    <span class="comment">// 根据 y 的值进行不同的输出</span></span><br><span class="line">    <span class="keyword">if</span> (y == a) <span class="comment">// 如果 y 等于 a</span></span><br><span class="line">        cout &lt;&lt; a + <span class="number">2</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 输出 a + 2</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">0</span>) <span class="comment">// 如果 y 等于 0</span></span><br><span class="line">        cout &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 输出 a</span></span><br><span class="line">    <span class="keyword">else</span> <span class="comment">// 其他情况</span></span><br><span class="line">        cout &lt;&lt; a + <span class="number">1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 输出 a + 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>); <span class="comment">// 提高输入输出效率</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>); <span class="comment">// 解除 cin 和 cout 的绑定</span></span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>); <span class="comment">// 解除 cout 和 cin 的绑定</span></span><br><span class="line">    <span class="comment">// 计算前缀异或值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2e5</span>; ++i)</span><br><span class="line">        prexor[i] = prexor[i - <span class="number">1</span>] ^ i; <span class="comment">// prexor[i] 存储从 1 到 i 的异或值</span></span><br><span class="line">    <span class="type">int</span> _; <span class="comment">// 声明整型变量 _</span></span><br><span class="line">    cin &gt;&gt; _; <span class="comment">// 从输入中读取测试用例的数量</span></span><br><span class="line">    <span class="keyword">while</span> (_) <span class="comment">// 当还有测试用例时</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>(); <span class="comment">// 调用 solve 函数处理每个测试用例</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回 0，表示程序正常结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<h1 id="第三讲-栈、优先队列、map、set、bitset"><a href="#第三讲-栈、优先队列、map、set、bitset" class="headerlink" title="第三讲:栈、优先队列、map、set、bitset"></a>第三讲:栈、优先队列、map、set、bitset</h1><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/120881948_p0.png" alt="120881948_p0" loading="lazy"></p>
<h2 id="习题火车轨道"><a href="#习题火车轨道" class="headerlink" title="习题火车轨道"></a>习题<em><strong>火车轨道</strong></em></h2><h3 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>现在有n<em>部火车，每一部火车都有一个1∼</em>n*的编号且各不相同（火车编号构成一个排列）。</p>
<p>现在他们按照给定的顺序排列在一条轨道上，且可以向两个方向移动，问他们能否通过一个车站，且每部火车<strong>至多进站一次</strong>，使得出站口的编号顺序变为升序？</p>
<p>如果可以输出”Yes”，如果不行输出”No”。（不带引号）</p>
</blockquote>
<h4 id="输入描述-14"><a href="#输入描述-14" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241022164134872.png" alt="image-20241022164134872" loading="lazy"></p>
<h4 id="输出描述-14"><a href="#输出描述-14" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>如果可以变为升序输出”Yes”，反之输出”No”。</p>
</blockquote>
<h4 id="输入样例1-14"><a href="#输入样例1-14" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-14"><a href="#输出样例1-14" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Yes</span></span><br></pre></td></tr></table></figure>

<h4 id="输入样例2-1"><a href="#输入样例2-1" class="headerlink" title="输入样例2"></a>输入样例2</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例2-1"><a href="#输出样例2-1" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">No</span></span><br></pre></td></tr></table></figure>

<h3 id="代码-16"><a href="#代码-16" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span><span class="number">+9</span>;</span><br><span class="line"><span class="type">int</span> a[N], pos;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">// 输入列车数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i]; <span class="comment">// 输入列车的编号顺序</span></span><br><span class="line"></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; st; <span class="comment">// 创建一个栈，用于模拟中转轨道</span></span><br><span class="line">    pos = <span class="number">1</span>; <span class="comment">// pos 表示当前处理的列车编号在数组 a 中的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// i 表示当前需要从左边轨道输出的列车编号</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果不是所需列车，则一直将列车推入栈中</span></span><br><span class="line">        <span class="keyword">while</span>(pos &lt;= n &amp;&amp; (st.<span class="built_in">empty</span>() || st.<span class="built_in">top</span>() != i))</span><br><span class="line">            st.<span class="built_in">push</span>(a[pos++]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果栈顶列车是当前需要的列车，则将其弹出</span></span><br><span class="line">        <span class="keyword">if</span>(st.<span class="built_in">top</span>() == i)</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果栈顶列车不是当前需要的列车，则无法按顺序输出</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果所有列车都能按顺序输出，则输出 &quot;Yes&quot;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>); <span class="comment">// 加速输入输出</span></span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; _; // 如果有多组测试数据，可以取消注释</span></span><br><span class="line">    <span class="keyword">while</span>(_--) <span class="built_in">solve</span>(); <span class="comment">// 处理每一组测试数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="习题小e的菜篮子"><a href="#习题小e的菜篮子" class="headerlink" title="习题小e的菜篮子"></a>习题<em><strong>小e的菜篮子</strong></em></h2><h3 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>你有一个菜篮子。</p>
<p>接下来Q<em>Q</em>次操作，每次操作如下：</p>
<ol>
<li>“1 x”，将一个重量为x<em>x</em>的菜放入到菜篮子中。</li>
<li>“2”，将菜篮子中重量最大的菜丢掉（如果菜篮子为空，则跳过）。</li>
</ol>
<p>问Q<em>Q</em>次操作后，菜篮子中剩下的菜的总重量。</p>
</blockquote>
<h4 id="输入描述-15"><a href="#输入描述-15" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241022170148977.png" alt="image-20241022170148977" loading="lazy"></p>
<h4 id="输出描述-15"><a href="#输出描述-15" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>一个整数表示答案</p>
</blockquote>
<h4 id="输入样例1-15"><a href="#输入样例1-15" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">7</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-15"><a href="#输出样例1-15" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<h3 id="代码-17"><a href="#代码-17" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span><span class="number">+9</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义比较函数，用于小根堆</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> ll &amp;u, <span class="type">const</span> ll &amp;v)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> u &gt; v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">// 输入操作次数</span></span><br><span class="line">    ll w = <span class="number">0</span>; <span class="comment">// 初始化总和为0</span></span><br><span class="line">    priority_queue&lt;ll&gt; pq; <span class="comment">// 创建一个默认大根堆</span></span><br><span class="line">    <span class="comment">// priority_queue&lt;ll, vector&lt;ll&gt;, greater&lt;ll&gt;&gt; pq_min; // 小根堆（注释掉的部分）</span></span><br><span class="line">    <span class="comment">// priority_queue&lt;ll, vector&lt;ll&gt;, cmp&gt; pq_min; // 小根堆（注释掉的部分）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll x;</span><br><span class="line">        cin &gt;&gt; x; <span class="comment">// 输入操作类型</span></span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> s;</span><br><span class="line">            cin &gt;&gt; s; <span class="comment">// 输入要加入的数值</span></span><br><span class="line">            pq.<span class="built_in">push</span>(s); <span class="comment">// 将数值加入大根堆</span></span><br><span class="line">            w += s; <span class="comment">// 更新总和</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">2</span> &amp;&amp; !pq.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            w -= pq.<span class="built_in">top</span>(); <span class="comment">// 从总和中减去当前最大值</span></span><br><span class="line">            pq.<span class="built_in">pop</span>(); <span class="comment">// 弹出当前最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; w &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 输出最终的总和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>); <span class="comment">// 加速输入输出</span></span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; _; // 如果有多组测试数据，可以取消注释</span></span><br><span class="line">    <span class="keyword">while</span>(_--) <span class="built_in">solve</span>(); <span class="comment">// 处理每一组测试数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="习题气球数量"><a href="#习题气球数量" class="headerlink" title="习题气球数量"></a>习题<em><strong>气球数量</strong></em></h2><h3 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>空中有<em>n</em>个气球，第<em>i</em>个气球有一个颜色col<del>i</del>（用一个字符串表示）。</p>
<p>请你求出每种气球的个数，按照气球出现的顺序进行排序输出。</p>
</blockquote>
<h4 id="输入描述-16"><a href="#输入描述-16" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241022181150105.png" alt="image-20241022181150105" loading="lazy"></p>
<h4 id="输出描述-16"><a href="#输出描述-16" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>对于每个样例，输出所有气球的种类和个数。</p>
</blockquote>
<h4 id="输入样例1-16"><a href="#输入样例1-16" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="built_in">red</span></span><br><span class="line"><span class="built_in">red</span></span><br><span class="line"><span class="built_in">blue</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">e</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-16"><a href="#输出样例1-16" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">red</span> <span class="number">2</span></span><br><span class="line"><span class="attribute">blue</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">a</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">b</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">e</span> <span class="number">2</span></span><br><span class="line"><span class="attribute">d</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="代码-18"><a href="#代码-18" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span><span class="number">+9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; mp; <span class="comment">// 创建一个映射，用于存储字符串及其出现次数</span></span><br><span class="line">    vector&lt;string&gt; v; <span class="comment">// 创建一个向量，用于存储唯一的字符串</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">// 输入字符串的数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s; <span class="comment">// 输入字符串</span></span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="built_in">count</span>(s)) <span class="comment">// 如果字符串已经在映射中</span></span><br><span class="line">        <span class="comment">//if(mp.finde(s)!=mp.end()) // 如果字符串已经在映射中</span></span><br><span class="line">            mp[s]++; <span class="comment">// 增加其出现次数</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            v.<span class="built_in">push_back</span>(s); <span class="comment">// 否则，将字符串添加到向量中</span></span><br><span class="line">            mp[s] = <span class="number">1</span>; <span class="comment">// 并将其出现次数初始化为1</span></span><br><span class="line">            <span class="comment">//mp.insert(&#123;s,1&#125;); // 并将其出现次数初始化为1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i : v) <span class="comment">// 遍历向量中的每个唯一字符串</span></span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; mp[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 输出字符串及其出现次数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>); <span class="comment">// 加速输入输出</span></span><br><span class="line">    <span class="type">int</span> _;</span><br><span class="line">    cin &gt;&gt; _; <span class="comment">// 输入测试数据的组数</span></span><br><span class="line">    <span class="keyword">while</span>(_--) <span class="built_in">solve</span>(); <span class="comment">// 处理每一组测试数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="习题【模板】排序（1）"><a href="#习题【模板】排序（1）" class="headerlink" title="习题【模板】排序（1）"></a>习题<em><strong>【模板】排序（1）</strong></em></h2><h3 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定一个大小为<em>n</em>的整型数组<em>a</em>，你需要对其按照升序排序并进行去重。</p>
</blockquote>
<h4 id="输入描述-17"><a href="#输入描述-17" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241022183940006.png" alt="image-20241022183940006" loading="lazy"></p>
<h4 id="输出描述-17"><a href="#输出描述-17" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>共一行<em>n</em>个整数，表示进行升序排序并进行去重后的数组。</p>
</blockquote>
<h4 id="输入样例1-17"><a href="#输入样例1-17" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">0</span> <span class="number">2</span> <span class="number">3</span> <span class="number">0</span> <span class="number">7</span> <span class="number">1</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-17"><a href="#输出样例1-17" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>

<h3 id="代码-19"><a href="#代码-19" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s; <span class="comment">// 创建一个集合，用于存储唯一的整数</span></span><br><span class="line">    <span class="type">int</span> n, x;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">// 输入整数的数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x; <span class="comment">// 输入整数</span></span><br><span class="line">        s.<span class="built_in">insert</span>(x); <span class="comment">// 将整数插入集合中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i : s) <span class="comment">// 遍历集合中的每个唯一整数</span></span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 输出整数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 输出换行符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>); <span class="comment">// 加速输入输出</span></span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>; <span class="comment">// 测试数据的组数，默认为1</span></span><br><span class="line">    <span class="comment">// cin &gt;&gt; _; // 如果有多组测试数据，可以取消注释</span></span><br><span class="line">    <span class="keyword">while</span>(_--) <span class="built_in">solve</span>(); <span class="comment">// 处理每一组测试数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="习题数的种类"><a href="#习题数的种类" class="headerlink" title="习题数的种类"></a>习题<em><strong>数的种类</strong></em></h2><h3 id="题目描述-20"><a href="#题目描述-20" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定<em>n</em>个整数，问由这些整数通过“加法”操作，可以组成多少种数字？</p>
</blockquote>
<h4 id="输入描述-18"><a href="#输入描述-18" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241022184304908.png" alt="image-20241022184304908" loading="lazy"></p>
<h4 id="输出描述-18"><a href="#输出描述-18" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>一个整数表示答案。</p>
</blockquote>
<h4 id="输入样例1-18"><a href="#输入样例1-18" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-18"><a href="#输出样例1-18" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>

<p>可以组成0,1,2,5,6,70,1,2,5,6,7共6种数字。</p>
<h3 id="代码-部分超时"><a href="#代码-部分超时" class="headerlink" title="代码(部分超时)"></a>代码(部分超时)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e3</span><span class="number">+9</span>, M = <span class="number">5e5</span><span class="number">+9</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">bool</span> dp[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">// 输入数组的大小</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i]; <span class="comment">// 输入数组的元素</span></span><br><span class="line"></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="literal">true</span>; <span class="comment">// 初始化 dp[0] 为 true，因为和为 0 的情况总是存在</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态规划求解</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = M - <span class="number">1</span>; j &gt;= a[i]; --j)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] |= dp[j - a[i]]; <span class="comment">// 更新 dp 数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll ans = <span class="number">0</span>; <span class="comment">// 初始化答案为 0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i]) ans++; <span class="comment">// 统计可以组成的和的数量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 输出答案</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>); <span class="comment">// 加速输入输出</span></span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// int _; cin &gt;&gt; _; // 如果有多组测试数据，可以取消注释</span></span><br><span class="line">    <span class="keyword">while</span>(_--) <span class="built_in">solve</span>(); <span class="comment">// 处理每一组测试数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码-动态规划"><a href="#代码-动态规划" class="headerlink" title="代码(动态规划)"></a>代码(动态规划)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e3</span><span class="number">+9</span>, M = <span class="number">5e5</span><span class="number">+9</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n; <span class="comment">// 输入数组的大小</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i]; <span class="comment">// 输入数组的元素</span></span><br><span class="line"></span><br><span class="line">    bitset&lt;M&gt; bs; <span class="comment">// 创建一个 bitset，大小为 M</span></span><br><span class="line">    bs[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 初始化 bs[0] 为 1，因为和为 0 的情况总是存在</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态规划求解</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        bs |= (bs &lt;&lt; a[i]); <span class="comment">// 更新 bitset</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; bs.<span class="built_in">count</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 输出 bitset 中 1 的个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>); <span class="comment">// 加速输入输出</span></span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// int _; cin &gt;&gt; _; // 如果有多组测试数据，可以取消注释</span></span><br><span class="line">    <span class="keyword">while</span>(_--) <span class="built_in">solve</span>(); <span class="comment">// 处理每一组测试数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>二维数组dp(数组开小了)</strong></p>
<p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241022185945687.png" alt="image-20241022185945687" loading="lazy"></p>
<hr>
<hr>
<h1 id="第四讲-单调栈、单调队列"><a href="#第四讲-单调栈、单调队列" class="headerlink" title="第四讲:单调栈、单调队列"></a>第四讲:单调栈、单调队列</h1><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/sann.jpg" alt="sann" loading="lazy"></p>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-21"><a href="#题目描述-21" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-19"><a href="#输入描述-19" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-19"><a href="#输出描述-19" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-19"><a href="#输入样例1-19" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-19"><a href="#输出样例1-19" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-20"><a href="#代码-20" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="第五讲-树状数组和离散化"><a href="#第五讲-树状数组和离散化" class="headerlink" title="第五讲:树状数组和离散化"></a>第五讲:树状数组和离散化</h1><h2 id="习题-1"><a href="#习题-1" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-22"><a href="#题目描述-22" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-20"><a href="#输入描述-20" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-20"><a href="#输出描述-20" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-20"><a href="#输入样例1-20" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-20"><a href="#输出样例1-20" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-21"><a href="#代码-21" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

































<h1 id="第六讲-图的存储方式、DFS、BFS"><a href="#第六讲-图的存储方式、DFS、BFS" class="headerlink" title="第六讲:图的存储方式、DFS、BFS"></a>第六讲:图的存储方式、DFS、BFS</h1><h2 id="习题树的遍历"><a href="#习题树的遍历" class="headerlink" title="习题树的遍历"></a>习题<em><strong>树的遍历</strong></em></h2><h3 id="题目描述-23"><a href="#题目描述-23" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p>给定一棵大小为<em>n</em>，根为1的树，求出其<em>dfs</em>序、<em>bfs</em>序。</p>
<p>请将所有<em>出点按照编号从小到大排序</em>后进行遍历。</p>
<p>解释：<em>dfs</em>为深度优先搜索，<em>bfs</em>为宽度优先搜索。</p>
</blockquote>
<h4 id="输入描述-21"><a href="#输入描述-21" class="headerlink" title="输入描述"></a>输入描述</h4><p><img src="/posts/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/image-20241023221839788.png" alt="image-20241023221839788" loading="lazy"></p>
<h4 id="输出描述-21"><a href="#输出描述-21" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
<p>第一行输出dfs序，第二行输出bfs序。</p>
</blockquote>
<h4 id="输入样例1-21"><a href="#输入样例1-21" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-21"><a href="#输出样例1-21" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h4 id="输入样例2-2"><a href="#输入样例2-2" class="headerlink" title="输入样例2"></a>输入样例2</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">2</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例2-2"><a href="#输出样例2-2" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="代码-22"><a href="#代码-22" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+9</span>, M=<span class="number">100</span>;</span><br><span class="line"><span class="comment">// 父节点数组，fa[i]表示节点i的父节点</span></span><br><span class="line"><span class="type">int</span> fa[M];</span><br><span class="line"><span class="comment">// 图的邻接表表示，g[i]表示节点i的所有子节点</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[M];</span><br><span class="line"><span class="comment">// 深度优先搜索（DFS）函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 输出当前节点的编号</span></span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="comment">// 遍历当前节点的所有子节点</span></span><br><span class="line">    <span class="comment">/*for(const auto &amp;i : g[x])</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        // 递归调用DFS函数</span></span><br><span class="line"><span class="comment">        dfs(i);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; g[x].<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 递归调用DFS函数</span></span><br><span class="line">        <span class="built_in">dfs</span>(g[x][i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 广度优先搜索（BFS）函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个队列用于BFS</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="comment">// 将根节点入队</span></span><br><span class="line">    q.<span class="built_in">push</span>(rt);</span><br><span class="line">    <span class="comment">// 当队列不为空时，继续BFS</span></span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 取出队首元素</span></span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// 输出当前节点的编号</span></span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="comment">// 将当前节点的所有子节点入队</span></span><br><span class="line"><span class="comment">/*        for(auto &amp;i : g[x])</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            q.push(i);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; g[x].<span class="built_in">size</span>(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(g[x][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 加速输入输出</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 输入节点数量</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">// 输入每个节点的父节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; fa[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构建图的邻接表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        g[fa[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对每个节点的子节点进行排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(g[i].<span class="built_in">begin</span>(), g[i].<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从根节点1开始进行DFS</span></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">// 从根节点1开始进行BFS</span></span><br><span class="line">    <span class="built_in">bfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="详细讲解"><a href="#详细讲解" class="headerlink" title="详细讲解"></a>详细讲解</h3><h4 id="1-DFS（深度优先搜索）"><a href="#1-DFS（深度优先搜索）" class="headerlink" title="1. DFS（深度优先搜索）"></a>1. DFS（深度优先搜索）</h4><p><strong>定义</strong>:</p>
<ul>
<li>DFS是一种用于遍历或搜索树或图的算法。它从根节点开始，尽可能深地搜索树的分支，直到没有更多的子节点为止，然后回溯到上一个节点，继续搜索下一个分支。</li>
</ul>
<p><strong>实现</strong>:</p>
<ul>
<li><strong>递归</strong>: DFS通常使用递归来实现，因为递归天然地适合于深度优先的搜索方式。</li>
<li><strong>栈</strong>: 也可以使用栈来手动实现DFS，但递归更直观。</li>
</ul>
<p><strong>代码解析</strong>:</p>
<ul>
<li><code>dfs(int x)</code>: 这个函数从节点<code>x</code>开始进行深度优先搜索。<ul>
<li><code>cout &lt;&lt; x &lt;&lt; &#39; &#39;;</code>: 输出当前节点的编号。</li>
<li><code>for(const auto &amp;i : g[x]) dfs(i);</code>: 遍历当前节点的所有子节点，并对每个子节点递归调用<code>dfs</code>函数。</li>
</ul>
</li>
</ul>
<p><strong>难点</strong>:</p>
<ul>
<li><strong>递归深度</strong>: 如果树的深度很大，递归可能会导致栈溢出。</li>
<li><strong>回溯</strong>: 理解递归的回溯过程是关键，尤其是在处理复杂问题时。</li>
</ul>
<h4 id="2-BFS（广度优先搜索）"><a href="#2-BFS（广度优先搜索）" class="headerlink" title="2. BFS（广度优先搜索）"></a>2. BFS（广度优先搜索）</h4><p><strong>定义</strong>:</p>
<ul>
<li>BFS是一种用于遍历或搜索树或图的算法。它从根节点开始，逐层遍历，先访问离根节点最近的节点，然后逐渐向外扩展。</li>
</ul>
<p><strong>实现</strong>:</p>
<ul>
<li><strong>队列</strong>: BFS通常使用队列来实现，因为队列的先进先出（FIFO）特性非常适合广度优先的搜索方式。</li>
</ul>
<p><strong>代码解析</strong>:</p>
<ul>
<li><code>bfs(int rt)</code>: 这个函数从节点<code>rt</code>开始进行广度优先搜索。<ul>
<li><code>queue&lt;int&gt; q;</code>: 创建一个队列用于存储待访问的节点。</li>
<li><code>q.push(rt);</code>: 将根节点入队。</li>
<li><code>while(q.size())</code>: 当队列不为空时，继续BFS。<ul>
<li><code>int x = q.front(); q.pop();</code>: 取出队首元素并将其出队。</li>
<li><code>cout &lt;&lt; x &lt;&lt; &#39; &#39;;</code>: 输出当前节点的编号。</li>
<li><code>for(auto &amp;i : g[x]) q.push(i);</code>: 将当前节点的所有子节点入队。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>难点</strong>:</p>
<ul>
<li><strong>队列的使用</strong>: 理解队列的先进先出特性，并正确地将其应用于BFS。</li>
<li><strong>层级遍历</strong>: 确保每一层的节点都被正确地访问和处理。</li>
</ul>
</blockquote>
<h2 id="习题-2"><a href="#习题-2" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-24"><a href="#题目描述-24" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-22"><a href="#输入描述-22" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-22"><a href="#输出描述-22" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-22"><a href="#输入样例1-22" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-22"><a href="#输出样例1-22" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-23"><a href="#代码-23" class="headerlink" title="代码"></a>代码</h3><h2 id="习题-3"><a href="#习题-3" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-25"><a href="#题目描述-25" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-23"><a href="#输入描述-23" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-23"><a href="#输出描述-23" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-23"><a href="#输入样例1-23" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-23"><a href="#输出样例1-23" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-24"><a href="#代码-24" class="headerlink" title="代码"></a>代码</h3><h2 id="习题-4"><a href="#习题-4" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-26"><a href="#题目描述-26" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-24"><a href="#输入描述-24" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-24"><a href="#输出描述-24" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-24"><a href="#输入样例1-24" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-24"><a href="#输出样例1-24" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-25"><a href="#代码-25" class="headerlink" title="代码"></a>代码</h3><h2 id="习题-5"><a href="#习题-5" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-27"><a href="#题目描述-27" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-25"><a href="#输入描述-25" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-25"><a href="#输出描述-25" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-25"><a href="#输入样例1-25" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-25"><a href="#输出样例1-25" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-26"><a href="#代码-26" class="headerlink" title="代码"></a>代码</h3><h1 id="第七讲-并查集、最短路"><a href="#第七讲-并查集、最短路" class="headerlink" title="第七讲:并查集、最短路"></a>第七讲:并查集、最短路</h1><h2 id="习题-6"><a href="#习题-6" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-28"><a href="#题目描述-28" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-26"><a href="#输入描述-26" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-26"><a href="#输出描述-26" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-26"><a href="#输入样例1-26" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-26"><a href="#输出样例1-26" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-27"><a href="#代码-27" class="headerlink" title="代码"></a>代码</h3><h2 id="习题-7"><a href="#习题-7" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-29"><a href="#题目描述-29" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-27"><a href="#输入描述-27" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-27"><a href="#输出描述-27" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-27"><a href="#输入样例1-27" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-27"><a href="#输出样例1-27" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-28"><a href="#代码-28" class="headerlink" title="代码"></a>代码</h3><h1 id="第八讲-最小生成树、质因数分解"><a href="#第八讲-最小生成树、质因数分解" class="headerlink" title="第八讲:最小生成树、质因数分解"></a>第八讲:最小生成树、质因数分解</h1><h2 id="习题-8"><a href="#习题-8" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-30"><a href="#题目描述-30" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-28"><a href="#输入描述-28" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-28"><a href="#输出描述-28" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-28"><a href="#输入样例1-28" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-28"><a href="#输出样例1-28" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-29"><a href="#代码-29" class="headerlink" title="代码"></a>代码</h3><h1 id="第九讲-埃氏筛法、gcd和lcm、快速幂、乘法逆元"><a href="#第九讲-埃氏筛法、gcd和lcm、快速幂、乘法逆元" class="headerlink" title="第九讲:埃氏筛法、gcd和lcm、快速幂、乘法逆元"></a>第九讲:埃氏筛法、gcd和lcm、快速幂、乘法逆元</h1><h2 id="习题-9"><a href="#习题-9" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-31"><a href="#题目描述-31" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-29"><a href="#输入描述-29" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-29"><a href="#输出描述-29" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-29"><a href="#输入样例1-29" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-29"><a href="#输出样例1-29" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-30"><a href="#代码-30" class="headerlink" title="代码"></a>代码</h3><h1 id="第十讲-组合数、01背包、完全背包"><a href="#第十讲-组合数、01背包、完全背包" class="headerlink" title="第十讲:组合数、01背包、完全背包"></a>第十讲:组合数、01背包、完全背包</h1><h2 id="习题-10"><a href="#习题-10" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-32"><a href="#题目描述-32" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-30"><a href="#输入描述-30" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-30"><a href="#输出描述-30" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-30"><a href="#输入样例1-30" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-30"><a href="#输出样例1-30" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-31"><a href="#代码-31" class="headerlink" title="代码"></a>代码</h3><h1 id="第十一讲-多重背包的二进制优化、单调栈二分dp"><a href="#第十一讲-多重背包的二进制优化、单调栈二分dp" class="headerlink" title="第十一讲:多重背包的二进制优化、单调栈二分dp"></a>第十一讲:多重背包的二进制优化、单调栈二分dp</h1><h2 id="习题-11"><a href="#习题-11" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-33"><a href="#题目描述-33" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-31"><a href="#输入描述-31" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-31"><a href="#输出描述-31" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-31"><a href="#输入样例1-31" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-31"><a href="#输出样例1-31" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-32"><a href="#代码-32" class="headerlink" title="代码"></a>代码</h3><h1 id="第十二讲-线性dp、区间dp、树形dp"><a href="#第十二讲-线性dp、区间dp、树形dp" class="headerlink" title="第十二讲:线性dp、区间dp、树形dp"></a>第十二讲:线性dp、区间dp、树形dp</h1><h2 id="习题-12"><a href="#习题-12" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-34"><a href="#题目描述-34" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-32"><a href="#输入描述-32" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-32"><a href="#输出描述-32" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-32"><a href="#输入样例1-32" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-32"><a href="#输出样例1-32" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-33"><a href="#代码-33" class="headerlink" title="代码"></a>代码</h3><h2 id="习题-13"><a href="#习题-13" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-35"><a href="#题目描述-35" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-33"><a href="#输入描述-33" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-33"><a href="#输出描述-33" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-33"><a href="#输入样例1-33" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-33"><a href="#输出样例1-33" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-34"><a href="#代码-34" class="headerlink" title="代码"></a>代码</h3><h2 id="习题-14"><a href="#习题-14" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-36"><a href="#题目描述-36" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-34"><a href="#输入描述-34" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-34"><a href="#输出描述-34" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-34"><a href="#输入样例1-34" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-34"><a href="#输出样例1-34" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-35"><a href="#代码-35" class="headerlink" title="代码"></a>代码</h3><h2 id="习题-15"><a href="#习题-15" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-37"><a href="#题目描述-37" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-35"><a href="#输入描述-35" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-35"><a href="#输出描述-35" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-35"><a href="#输入样例1-35" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-35"><a href="#输出样例1-35" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-36"><a href="#代码-36" class="headerlink" title="代码"></a>代码</h3><h1 id="期末赛讲解"><a href="#期末赛讲解" class="headerlink" title="期末赛讲解"></a>期末赛讲解</h1><h2 id="习题-16"><a href="#习题-16" class="headerlink" title="习题**"></a>习题**</h2><h3 id="题目描述-38"><a href="#题目描述-38" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
</blockquote>
<h4 id="输入描述-36"><a href="#输入描述-36" class="headerlink" title="输入描述"></a>输入描述</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出描述-36"><a href="#输出描述-36" class="headerlink" title="输出描述"></a>输出描述</h4><blockquote>
</blockquote>
<h4 id="输入样例1-36"><a href="#输入样例1-36" class="headerlink" title="输入样例1"></a>输入样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1-36"><a href="#输出样例1-36" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码-37"><a href="#代码-37" class="headerlink" title="代码"></a>代码</h3>]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
