<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>贪吃蛇</title>
    <url>/posts/Game/</url>
    <content><![CDATA[<iframe src="./Game.html" width="100%" height="600px"></iframe>

]]></content>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础语法</title>
    <url>/posts/MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 align="center">MySQl知识点总结</h1>

<p><img src="/posts/MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/123214339_p0_master1200.jpg" alt="123214339_p0_master1200" loading="lazy"></p>
<hr>
<h1 id="1-SQl语法"><a href="#1-SQl语法" class="headerlink" title="1.SQl语法"></a>1.SQl语法</h1><hr>
<h2 id="1-1-通用语法"><a href="#1-1-通用语法" class="headerlink" title="1.1 通用语法"></a>1.1 通用语法</h2><p>a&gt; SQL语句可以单行或多行书写，以分号结尾。</p>
<p>b&gt; SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</p>
<p>c&gt; MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。</p>
<p>d&gt; 注释：</p>
<pre><code>- 单行注释：-- 注释内容 或 # 注释内容
- 多行注释：/* 注释内容 */
</code></pre>
<hr>
<h2 id="1-2-DDl-Data-Definition-Language-：用于定义数据库结构"><a href="#1-2-DDl-Data-Definition-Language-：用于定义数据库结构" class="headerlink" title="1.2 DDl(Data Definition Language)：用于定义数据库结构"></a>1.2 DDl(Data Definition Language)：用于定义数据库结构</h2><h3 id="1-2-1-数据库操作"><a href="#1-2-1-数据库操作" class="headerlink" title="1.2.1 数据库操作"></a>1.2.1 数据库操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;查询所有数据库</span><br><span class="line">	show databases;</span><br><span class="line">b&gt;查询当前数据库</span><br><span class="line">	select database();</span><br><span class="line">c&gt;创建数据库</span><br><span class="line">	create databases [if not exists] database_name [default charset 字符集] [collate 排序规则];</span><br><span class="line">d&gt;删除数据库</span><br><span class="line">	drop database [if exists] database_name;</span><br><span class="line">e&gt;切换数据库</span><br><span class="line">	use database_name;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-表操作"><a href="#1-2-2-表操作" class="headerlink" title="1.2.2 表操作"></a>1.2.2 表操作</h3><h4 id="1-2-2-1-查询创建"><a href="#1-2-2-1-查询创建" class="headerlink" title="1.2.2.1 查询创建"></a>1.2.2.1 查询创建</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;查询当前数据库所有表</span><br><span class="line">	show tables;</span><br><span class="line">b&gt;查看指定表结构</span><br><span class="line">	desc table_name;</span><br><span class="line">c&gt;查询指定表的建表语句</span><br><span class="line">	show create table table_name;</span><br><span class="line">d&gt;创建表结构</span><br><span class="line">	create table table_name(</span><br><span class="line">		column1 datatype [comment 注释1], </span><br><span class="line">        column2 datatype,</span><br><span class="line">        column3 datatype,</span><br><span class="line">       ....</span><br><span class="line">	)[comment 注释];</span><br><span class="line">	*注意: ... 内为可选参数，最后一个字段后面没有逗号*</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-2-数据类型"><a href="#1-2-2-2-数据类型" class="headerlink" title="1.2.2.2 数据类型"></a>1.2.2.2 数据类型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;数值类型</span><br><span class="line">b&gt;字符串类型</span><br><span class="line">c&gt;日期时间类型</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-3-修改"><a href="#1-2-2-3-修改" class="headerlink" title="1.2.2.3 修改"></a>1.2.2.3 修改</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;添加字段</span><br><span class="line">	alter table table_name add column_name datatype [comment] [约束];</span><br><span class="line">b&gt;修改数据类型</span><br><span class="line">	alter table table_name modify colum_name new_datatype;</span><br><span class="line">c&gt;修改字段名和字段类型</span><br><span class="line">	alter table table_name change column_name new_column_name datatype [comment] [约束];</span><br><span class="line">d&gt;删除字段</span><br><span class="line">	alter table table_name drop column_name;</span><br><span class="line">e&gt;修改表名</span><br><span class="line">	alter table table_name rename to new_table_name;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-3-删除"><a href="#1-2-2-3-删除" class="headerlink" title="1.2.2.3 删除"></a>1.2.2.3 删除</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt; 删除表</span><br><span class="line">	drop table [if exists] table_name;</span><br><span class="line">b&gt; 删除指定表, 并重新创建表</span><br><span class="line">	truncate table table_name;</span><br><span class="line">	*注意: 在删除表的时候，表中的全部数据也都会被删除。*</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="1-3-DML-Data-Manipulation-Language-：用来对数据库中表的数据记录进-行增、删、改操作。"><a href="#1-3-DML-Data-Manipulation-Language-：用来对数据库中表的数据记录进-行增、删、改操作。" class="headerlink" title="1.3 DML(Data Manipulation Language)：用来对数据库中表的数据记录进 行增、删、改操作。"></a>1.3 DML(Data Manipulation Language)：用来对数据库中表的数据记录进 行增、删、改操作。</h2><blockquote>
<p>添加数据（INSERT） </p>
<p>修改数据（UPDATE）</p>
<p>删除数据（DELETE）</p>
</blockquote>
<h3 id="1-3-1-添加数据"><a href="#1-3-1-添加数据" class="headerlink" title="1.3.1 添加数据"></a>1.3.1 添加数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;给指定字段添加数据</span><br><span class="line">	insert into table_name (column1,column2,...) values (value1,value2,...);</span><br><span class="line">b&gt;给全部字段添加数据</span><br><span class="line">	insert into table_name values (value1,value2,...);</span><br><span class="line">c&gt;批量添加数据</span><br><span class="line">	-insert into 表名 (字段名1,字段名2,...) values (值1,值2,...),(值1, 值2,...),(值1,值2,...) ;</span><br><span class="line">	-insert table_name values (值1,值2,...),(值1,值2,...),(值1,值2,...) ;</span><br><span class="line">	**注意事项:</span><br><span class="line">		• 插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</span><br><span class="line">		• 字符串和日期型数据应该包含在引号中。</span><br><span class="line">		• 插入的数据大小，应该在字段的规定范围内。</span><br><span class="line">	**</span><br></pre></td></tr></table></figure>

<h3 id="1-3-2-修改数据"><a href="#1-3-2-修改数据" class="headerlink" title="1.3.2 修改数据"></a>1.3.2 修改数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改数据的具体语法为:</span><br><span class="line">	updata table_name set column1=value1,column2=value2,...[where 条件];</span><br><span class="line">	**</span><br><span class="line">	注意事项:</span><br><span class="line">		修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</span><br><span class="line">	**</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-删除数据"><a href="#1-3-3-删除数据" class="headerlink" title="1.3.3 删除数据"></a>1.3.3 删除数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">删除数据的具体语法为：</span><br><span class="line">	delete from table_name [where 条件];</span><br></pre></td></tr></table></figure>

<p><strong>注意事项:</strong></p>
<ul>
<li>DELETE 语句的条件可以有，也可以没有，如果没有条件,则会删除整张表的所有数据。</li>
<li>DELETE 语句不能删除某一个字段的值(可以使用UPDATE，将该字段值置为NULL即可)。</li>
<li>当进行删除全部数据操作时，datagrip会提示我们，询问是否确认删除，我们直接点击 Execute即可。</li>
</ul>
<hr>
<h2 id="1-4-DQL-Data-Query-Language-：用于查询数据"><a href="#1-4-DQL-Data-Query-Language-：用于查询数据" class="headerlink" title="1.4 DQL(Data Query Language)：用于查询数据"></a>1.4 DQL(Data Query Language)：用于查询数据</h2><blockquote>
<p>查询关键字: SELECT</p>
</blockquote>
<h3 id="1-4-1-基本语法"><a href="#1-4-1-基本语法" class="headerlink" title="1.4.1 基本语法"></a>1.4.1 基本语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">	column_list</span><br><span class="line">from </span><br><span class="line">	table_list</span><br><span class="line">where</span><br><span class="line">	条件列表</span><br><span class="line">group by</span><br><span class="line">	分组字段列表</span><br><span class="line">having</span><br><span class="line">	分组后条件列表</span><br><span class="line">order by</span><br><span class="line">	排序字段列表</span><br><span class="line">limit</span><br><span class="line">	分页参数</span><br></pre></td></tr></table></figure>

<ul>
<li>基本查询（不带任何条件） </li>
<li>条件查询（where） </li>
<li>聚合函数（count、max、min、avg、sum） </li>
<li>分组查询（group by） </li>
<li>排序查询（order by） </li>
<li>分页查询（limit）</li>
</ul>
<h3 id="1-4-2-基础查询"><a href="#1-4-2-基础查询" class="headerlink" title="1.4.2 基础查询"></a>1.4.2 基础查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;查询多个字段</span><br><span class="line">	- select column1,2... from table_name; </span><br><span class="line">	- select * from table_name;</span><br><span class="line">	~注意 : * 号代表查询所有字段，在实际开发中尽量少用（不直观、影响效率）。</span><br><span class="line">b&gt;字段设置别名</span><br><span class="line">	select column 1 [as other_name_1],column 2 [as other_name_2]...from table_name;</span><br><span class="line">c&gt;去除重复记录</span><br><span class="line">	select distinct column_list from table_name;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-3-条件查询"><a href="#1-4-3-条件查询" class="headerlink" title="1.4.3 条件查询"></a>1.4.3 条件查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;语法</span><br><span class="line">	select column_list from table_name where 条件列表;</span><br><span class="line">b&gt;条件</span><br><span class="line">	比较运算符：&gt;,&gt; =,&lt;,&lt; =,=,&lt;&gt;或! =,between...and...,in(...),like 占位符(_匹配单个字符, %匹配任意个字符),is null</span><br><span class="line">	逻辑运算符：and或&amp;&amp;，or或||，not或！</span><br></pre></td></tr></table></figure>

<h3 id="1-4-4-聚合函数"><a href="#1-4-4-聚合函数" class="headerlink" title="1.4.4 聚合函数"></a>1.4.4 聚合函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;介绍</span><br><span class="line">	将一列数据作为一个整体，进行纵向计算 。</span><br><span class="line">b&gt;常见的聚合函数</span><br><span class="line">	count(统计数量),max,min,avg,sum</span><br><span class="line">c&gt;语法</span><br><span class="line">	select 聚合函数（字段列表column_list） from table_name;</span><br><span class="line">	*注意 : NULL值是不参与所有聚合函数运算的。*</span><br></pre></td></tr></table></figure>

<h3 id="1-4-5-分组查询"><a href="#1-4-5-分组查询" class="headerlink" title="1.4.5 分组查询"></a>1.4.5 分组查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;语法</span><br><span class="line">	select column_list from table_name [where 条件] group by 分组字段名[having 分组后过滤条件];</span><br><span class="line">b&gt;where与having区别</span><br><span class="line">	- 执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组</span><br><span class="line">之后对结果进行过滤。</span><br><span class="line">	- 判断条件不同：where不能对聚合函数进行判断，而having可以。</span><br></pre></td></tr></table></figure>

<ul>
<li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</li>
<li>执行顺序: where&gt;聚合函数&gt;having 。 </li>
<li>支持多字段分组,具体语法为:group by columnA,columnB</li>
</ul>
<h3 id="1-4-6-排序查询"><a href="#1-4-6-排序查询" class="headerlink" title="1.4.6 排序查询"></a>1.4.6 排序查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;语法</span><br><span class="line">	select column_list from table_name order by column1 排序方式1,column2 排序方式2;</span><br><span class="line">b&gt;排序方式</span><br><span class="line">	- asc:升序（默认）</span><br><span class="line">	- desc:降序</span><br></pre></td></tr></table></figure>

<ul>
<li>如果是升序, 可以不指定排序方式ASC;</li>
<li>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 ;</li>
</ul>
<h3 id="1-4-7-分页查询"><a href="#1-4-7-分页查询" class="headerlink" title="1.4.7 分页查询"></a>1.4.7 分页查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;select column_list from table_name limit 起始索引,查询记录数;</span><br></pre></td></tr></table></figure>

<ul>
<li>起始索引从0开始，起始索引 &#x3D; （查询页码 - 1）* 每页显示记录数。</li>
<li>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。</li>
<li>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10。</li>
</ul>
<h3 id="1-4-8-执行顺序"><a href="#1-4-8-执行顺序" class="headerlink" title="1.4.8 执行顺序"></a>1.4.8 执行顺序</h3><blockquote>
<p>DQL语句的执行顺序为：from … where … group by … having … select … order by … limit …</p>
</blockquote>
<hr>
<h2 id="1-5-DCL（Data-Control-Language）：用于控制数据库访问权限"><a href="#1-5-DCL（Data-Control-Language）：用于控制数据库访问权限" class="headerlink" title="1.5 DCL（Data Control Language）：用于控制数据库访问权限"></a>1.5 DCL（Data Control Language）：用于控制数据库访问权限</h2><h3 id="1-5-1-管理用户"><a href="#1-5-1-管理用户" class="headerlink" title="1.5.1 管理用户"></a>1.5.1 管理用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;查询用户</span><br><span class="line">	select * from mysql.user;</span><br><span class="line">	*其中 Host代表当前用户访问的主机, 如果为localhost, 仅代表只能够在当前本机访问，是不可以</span><br><span class="line">远程访问的。 User代表的是访问该数据库的用户名。在MySQL中需要通过Host和User来唯一标识一</span><br><span class="line">个用户。*</span><br><span class="line">b&gt;创建用户</span><br><span class="line">	create user &#x27;用户名&#x27;@&#x27;主机名&#x27; ide tified by &#x27;密码&#x27;</span><br><span class="line">c&gt;修改用户密码</span><br><span class="line">	alter user &#x27;用户名&#x27;@&#x27;主机名&#x27; identified with mysql_native_password by &#x27;新密码&#x27;;</span><br><span class="line">d&gt;删除用户</span><br><span class="line">	drop user &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>

<ul>
<li>在MySQL中需要通过用户名@主机名的方式，来唯一标识一个用户。</li>
<li>主机名可以使用 % 通配。</li>
<li>这类SQL开发人员操作的比较少，主要是DBA（ Database Administrator 数据库 管理员）使用。</li>
</ul>
<h3 id="1-5-2-权限控制"><a href="#1-5-2-权限控制" class="headerlink" title="1.5.2 权限控制"></a>1.5.2 权限控制</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;查询权限</span><br><span class="line">	show grants for &#x27;用户名&#x27;@&#x27;主机名&#x27;</span><br><span class="line">b&gt;授予权限</span><br><span class="line">	grant 权限列表 on 数据库名.表名 to 用户名&#x27;@&#x27;主机名&#x27;</span><br><span class="line">c&gt;撤销权限</span><br><span class="line">	revoke 权限列表 on 数据库名.表名 from 用户名&#x27;@&#x27;主机名&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li>多个权限之间，使用逗号分隔</li>
<li>授权时， 数据库名和表名可以使用 * 进行通配，代表所有。</li>
</ul>
<hr>
<h1 id="2-函数"><a href="#2-函数" class="headerlink" title="2.函数"></a>2.函数</h1><p>MySQL中的函数主要分为以下四类： 字符串函数、数值函数、日期函数、流程函数。</p>
<hr>
<h2 id="2-1-字符串函数"><a href="#2-1-字符串函数" class="headerlink" title="2.1 字符串函数"></a>2.1 字符串函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">concate(s1,s2,...s~n~):字符串拼接，将S1，S2，... Sn拼接成一个字符串</span><br><span class="line">lower(str):将字符串str全部转为小写</span><br><span class="line">upper(str):upper(str):将字符串str全部转为大写</span><br><span class="line">lpad(str,n,pad):左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</span><br><span class="line">rpad(str,n,pad):右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</span><br><span class="line">trim(str):去掉字符串头部和尾部的空格</span><br><span class="line">substring(str,start,len):返回从字符串str从start位置起的len个长度的字符串</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-2-数值函数"><a href="#2-2-数值函数" class="headerlink" title="2.2 数值函数"></a>2.2 数值函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ceil(x):向上取整</span><br><span class="line">floor(x):向下取整</span><br><span class="line">mod(x):返回x/y的模</span><br><span class="line">rand():返回0~1内的随机数</span><br><span class="line">round(x,y):求参数x的四舍五入的值，保留y位小数</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-3-日期函数"><a href="#2-3-日期函数" class="headerlink" title="2.3 日期函数"></a>2.3 日期函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curdate():返回当前日期</span><br><span class="line">curtime():返回当前时间</span><br><span class="line">now():返回当前日期和时间</span><br><span class="line">year(date):获取指定date的年份</span><br><span class="line">month(date):获取指定date的月份</span><br><span class="line">day(date):获取指定date的日期</span><br><span class="line">date_add(date,interval,exprtype):返回一个日期/时间值加上一个时间间隔expr后的时间值</span><br><span class="line">datediff(date1,date2):返回起始时间date1 和 结束时间date2之间的天数</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-4-流程函数"><a href="#2-4-流程函数" class="headerlink" title="2.4 流程函数"></a>2.4 流程函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(value,t,f):如果value为true，则返回t，否则返回f</span><br><span class="line">ifnull(value1,value2):如果value1不为空，返回value1，否则返回value2</span><br><span class="line">case when [vall] then [res1]...else [default] end:如果val1为true，返回res1，... 否则返回default默认值</span><br><span class="line">case [expr] when [vall] then [res1]...else [default]end:如果expr的值等于val1，返回res1，... 否则返回default默认值</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="3-约束"><a href="#3-约束" class="headerlink" title="3.约束"></a>3.约束</h1><hr>
<h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><ul>
<li><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。 </p>
</li>
<li><p>目的：保证数据库中数据的正确、有效性和完整性。</p>
</li>
</ul>
<p><strong>约束：</strong></p>
<ol>
<li>非空约束:not null</li>
<li>唯一约束:unique</li>
<li>主键约束:primary key</li>
<li>默认约束:default</li>
<li>检查约束:check</li>
<li>外键约束:foreign key</li>
</ol>
<p><em>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。</em></p>
<hr>
<h2 id="3-2-外键约束"><a href="#3-2-外键约束" class="headerlink" title="3.2 外键约束"></a>3.2 外键约束</h2><ul>
<li>外键：用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</li>
</ul>
<h3 id="3-2-1-语法"><a href="#3-2-1-语法" class="headerlink" title="3.2.1 语法"></a>3.2.1 语法</h3><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">a&gt;添加外键</span><br><span class="line">	<span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    ...</span><br><span class="line">    [constraint] [外键名称] <span class="keyword">foreign</span> <span class="keyword">key</span> (外键字段名) <span class="keyword">references</span> 主表 (主表列名)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> constraint 外键名称 <span class="keyword">foreign</span> <span class="keyword">key</span> (外键字段名) <span class="keyword">references</span> 主表 (主表列名) ;</span><br><span class="line">b&gt;删除外键</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> <span class="keyword">foreign</span> <span class="keyword">key</span> key_name;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-删除-更新行为"><a href="#3-2-2-删除-更新行为" class="headerlink" title="3.2.2 删除&#x2F;更新行为"></a>3.2.2 删除&#x2F;更新行为</h3><table>
<thead>
<tr>
<th>行为</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>no action</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。 (与 RESTRICT 一致) 默认行为</td>
</tr>
<tr>
<td>restrict</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不 允许删除&#x2F;更新。 (与 NO ACTION 一致) 默认行为</td>
</tr>
<tr>
<td>cascade</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则 也删除&#x2F;更新外键在子表中的记录。</td>
</tr>
<tr>
<td>set null</td>
<td>当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表 中该外键值为null（这就要求该外键允许取null）。</td>
</tr>
<tr>
<td>set default</td>
<td>父表有变更时，子表将外键列设置成一个默认的值 (Innodb不支持)</td>
</tr>
</tbody></table>
<p><em><strong>具体语法</strong></em></p>
<ul>
<li>alter table table_name add constraint 外键鸣潮 foreign key (外键字段) references 主表名 (主表字段名) on update cascade on delete cascade；</li>
</ul>
<hr>
<h1 id="4-多表查询"><a href="#4-多表查询" class="headerlink" title="4 多表查询"></a>4 多表查询</h1><hr>
<h2 id="4-1-多表关系"><a href="#4-1-多表关系" class="headerlink" title="4.1 多表关系"></a>4.1 多表关系</h2><ul>
<li>一对多(多对一): 在多的一方建立外键，指向一的一方的主键</li>
<li>多对多:建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</li>
<li>一对一:在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(unique)</li>
</ul>
<hr>
<h2 id="4-2-概述"><a href="#4-2-概述" class="headerlink" title="4.2 概述"></a>4.2 概述</h2><ul>
<li><p>多表查询就是指从多张表中查询数据。</p>
<p><strong>笛卡尔积: 笛卡尔乘积是指在数学中，两个集合A集合 和 B集合的所有组合情况。</strong></p>
</li>
</ul>
<hr>
<h2 id="4-3-分类"><a href="#4-3-分类" class="headerlink" title="4.3 分类"></a>4.3 分类</h2><ul>
<li><p>连接查询 </p>
<ul>
<li>内连接：相当于查询A、B交集部分数据 </li>
<li>外连接： <ul>
<li>左外连接：查询左表所有数据，以及两张表交集部分数据 </li>
<li>右外连接：查询右表所有数据，以及两张表交集部分数据 </li>
<li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li>
</ul>
</li>
</ul>
</li>
<li><p>子查询</p>
</li>
</ul>
<hr>
<h2 id="4-4-内连接"><a href="#4-4-内连接" class="headerlink" title="4.4 内连接"></a>4.4 内连接</h2><ul>
<li>内连接的语法分为两种: 隐式内连接、显式内连接。</li>
</ul>
<ol>
<li>隐式内连接</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> , 表<span class="number">2</span> <span class="keyword">where</span> 条件 ... ;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>显式内连接</li>
</ol>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> [ <span class="keyword">inner</span> ] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 ... ;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-5-外连接"><a href="#4-5-外连接" class="headerlink" title="4.5 外连接"></a>4.5 外连接</h2><ul>
<li>外连接分为两种，分别是：左外连接 和 右外连接。</li>
</ul>
<ol>
<li>左外连接</li>
</ol>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">left</span> [ <span class="keyword">outer</span> ] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件 ... ;</span><br></pre></td></tr></table></figure>

<p>左外连接相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据。</p>
<ol start="2">
<li>右外连接</li>
</ol>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">right</span> [ <span class="keyword">outer</span> ] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件 ... ;</span><br></pre></td></tr></table></figure>

<p>右外连接相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据。</p>
<blockquote>
<p>左外连接和右外连接是可以相互替换的，只需要调整在连接查询时SQL中，表结构的先后顺序就可以了。而我们在日常开发使用时，更偏向于左外连接。</p>
</blockquote>
<hr>
<h2 id="4-6-自连接"><a href="#4-6-自连接" class="headerlink" title="4.6 自连接"></a>4.6 自连接</h2><h3 id="4-6-1-自连接查询，顾名思义，就是自己连接自己，也就是把一张表连接查询多次。"><a href="#4-6-1-自连接查询，顾名思义，就是自己连接自己，也就是把一张表连接查询多次。" class="headerlink" title="4.6.1 自连接查询，顾名思义，就是自己连接自己，也就是把一张表连接查询多次。"></a>4.6.1 自连接查询，顾名思义，就是自己连接自己，也就是把一张表连接查询多次。</h3><p>自连接的查询语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">select</span> 字段列表 <span class="selector-tag">from</span> 表<span class="selector-tag">A</span> 别名<span class="selector-tag">A</span> join 表<span class="selector-tag">A</span> 别名<span class="selector-tag">B</span> on 条件 ... ;</span><br></pre></td></tr></table></figure>

<p>而对于自连接查询，可以是内连接查询，也可以是外连接查询。</p>
<blockquote>
<p>在自连接查询中，必须要为表起别名，要不然我们不清楚所指定的条件、返回的字段，到底 是哪一张表的字段。</p>
</blockquote>
<h3 id="4-6-2-联合查询"><a href="#4-6-2-联合查询" class="headerlink" title="4.6.2 联合查询"></a>4.6.2 联合查询</h3><ul>
<li>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">select</span> 字段列表 <span class="selector-tag">from</span> 表<span class="selector-tag">A</span> ...</span><br><span class="line">union <span class="selector-attr">[ all ]</span></span><br><span class="line"><span class="selector-tag">select</span> 字段列表 <span class="selector-tag">from</span> 表<span class="selector-tag">B</span> ....;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。 </p>
<p>union all 会将全部的数据直接合并在一起，union 会对合并之后的数据去重。</p>
</blockquote>
<p><strong>union all查询出来的结果，仅仅进行简单的合并，并未去重。</strong></p>
<p><strong>union 联合查询，会对查询出来的结果进行去重处理。</strong></p>
<hr>
<h2 id="4-7-子查询"><a href="#4-7-子查询" class="headerlink" title="4.7 子查询"></a>4.7 子查询</h2><h3 id="4-7-1-概述"><a href="#4-7-1-概述" class="headerlink" title="4.7.1 概述"></a>4.7.1 概述</h3><ul>
<li><p>概念：SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> column1 = ( <span class="keyword">SELECT</span> column1 <span class="keyword">FROM</span> t2 );</span><br></pre></td></tr></table></figure>

<p>子查询外部的语句可以是INSERT &#x2F; UPDATE &#x2F; DELETE &#x2F; SELECT 的任何一个。</p>
</li>
<li><p>分类</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">根据子查询结果不同，分为：</span><br><span class="line">A. 标量子查询（子查询结果为单个值）</span><br><span class="line">B. 列子查询<span class="comment">(子查询结果为一列)</span></span><br><span class="line">C. 行子查询<span class="comment">(子查询结果为一行)</span></span><br><span class="line">D. 表子查询<span class="comment">(子查询结果为多行多列)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">根据子查询位置，分为：</span><br><span class="line"><span class="selector-tag">A</span>. WHERE之后 </span><br><span class="line"><span class="selector-tag">B</span>. <span class="selector-tag">FROM</span>之后 </span><br><span class="line">C. <span class="selector-tag">SELECT</span>之后</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="4-7-2-标量子查询"><a href="#4-7-2-标量子查询" class="headerlink" title="4.7.2 标量子查询"></a>4.7.2 标量子查询</h3><blockquote>
<p>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式，这种子查询称为标量子查询。 </p>
<p>常用的操作符：&#x3D; &lt;&gt; &gt; &gt;&#x3D; &lt; &lt;&#x3D; </p>
</blockquote>
<hr>
<h3 id="4-7-3-列子查询"><a href="#4-7-3-列子查询" class="headerlink" title="4.7.3 列子查询"></a>4.7.3 列子查询</h3><blockquote>
<p>子查询返回的结果是一列（可以是多行），这种子查询称为列子查询。 </p>
<p>常用的操作符：IN 、NOT IN 、 ANY 、SOME 、 AL</p>
</blockquote>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>IN</td>
<td>在指定的集合范围之内，多选一</td>
</tr>
<tr>
<td>NOT IN</td>
<td>不在指定的集合范围之内</td>
</tr>
<tr>
<td>ANY</td>
<td>子查询返回列表中，有任意一个满足即可</td>
</tr>
<tr>
<td>SOME</td>
<td>与ANY等同，使用SOME的地方都可以使用</td>
</tr>
<tr>
<td>ANY ALL</td>
<td>子查询返回列表的所有值都必须满足</td>
</tr>
</tbody></table>
<hr>
<h3 id="4-7-4-行子查询"><a href="#4-7-4-行子查询" class="headerlink" title="4.7.4 行子查询"></a>4.7.4 行子查询</h3><blockquote>
<p>子查询返回的结果是一行（可以是多列），这种子查询称为行子查询。 </p>
<p>常用的操作符：&#x3D; 、&lt;&gt; 、IN 、NOT IN</p>
</blockquote>
<hr>
<h3 id="4-7-5-表子查询"><a href="#4-7-5-表子查询" class="headerlink" title="4.7.5 表子查询"></a>4.7.5 表子查询</h3><blockquote>
<p>子查询返回的结果是多行多列，这种子查询称为表子查询。 </p>
<p>常用的操作符：IN</p>
</blockquote>
<hr>
<h1 id="5-事务"><a href="#5-事务" class="headerlink" title="5 事务"></a>5 事务</h1><blockquote>
<p>在 MySQL 中，<strong>事务</strong>（Transaction）是指一组操作，这些操作要么全部成功，要么全部失败，以确保数据的完整性和一致性。事务通常用于处理多步骤的操作，如银行转账、订单处理等，保证系统在遇到错误时不会产生不一致的数据。事务具有四个关键的性质，简称为 <strong>ACID</strong>（原子性、一致性、隔离性、持久性）。</p>
</blockquote>
<hr>
<h2 id="5-1-事务的四大特性（ACID）"><a href="#5-1-事务的四大特性（ACID）" class="headerlink" title="5.1 事务的四大特性（ACID）"></a>5.1 事务的四大特性（ACID）</h2><ol>
<li><p><strong>原子性 (Atomicity)</strong></p>
<ul>
<li>原子性意味着事务中的所有操作要么全部完成，要么完全不执行。事务中任何一个操作失败，整个事务都会回滚到开始的状态，保证不会有部分成功的操作。</li>
<li>举例：如果你在银行系统中从账户A转移100元到账户B，要么A减少100元，B增加100元，要么两者都不发生变化。</li>
</ul>
</li>
<li><p><strong>一致性 (Consistency)</strong></p>
<ul>
<li>一致性确保在事务开始前和结束后，数据库都保持一致的状态。换句话说，事务执行前后的数据状态应符合所有的约束条件和规则。</li>
<li>举例：在银行转账过程中，不可能出现资金“凭空消失或增加”的情况，即使事务执行失败，数据依旧符合业务规则。</li>
</ul>
</li>
<li><p><strong>隔离性 (Isolation)</strong></p>
<ul>
<li>隔离性指多个事务并发执行时，它们之间相互独立，一个事务的执行不会被其他事务的中间状态所影响。隔离性通过不同的隔离级别实现（见下文）。</li>
<li>举例：当两个事务同时对同一账户操作，一个存款，一个取款，事务彼此隔离，取款操作不会读取到存款操作的中间数据。</li>
</ul>
</li>
<li><p><strong>持久性 (Durability)</strong></p>
<ul>
<li>持久性保证事务一旦提交，数据的修改将永久保存在数据库中，即使发生系统崩溃，数据也不会丢失。MySQL 使用日志记录机制来确保数据的持久性。</li>
<li>举例：即使在银行系统崩溃或断电后，已成功提交的转账操作也不会丢失。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="5-2-事务的操作"><a href="#5-2-事务的操作" class="headerlink" title="5.2 事务的操作"></a>5.2 事务的操作</h2><p>在 MySQL 中，事务的基本操作包含以下几个 SQL 语句：</p>
<ol>
<li><code>START TRANSACTION</code>：开始一个新的事务。</li>
<li><code>COMMIT</code>：提交事务，保存所有操作到数据库中。</li>
<li><code>ROLLBACK</code>：回滚事务，撤销当前事务中的所有操作。</li>
<li><code>SAVEPOINT</code>：设置事务中的保存点，可以回滚到这个点而不是回滚整个事务。</li>
<li><code>SET AUTOCOMMIT</code>：设置自动提交模式，默认 MySQL 是自动提交的，每条语句都会自动作为一个事务提交。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开始事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="comment">-- 第一步：从账户A扣除100元</span></span><br><span class="line"><span class="keyword">update</span> accounts <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">where</span> account_id <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="comment">-- 第二步：给账户B增加100元</span></span><br><span class="line"><span class="keyword">update</span> accounts <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">where</span> account_id <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>

<p>如果在 <code>COMMIT</code> 之前有任何错误，你可以用 <code>ROLLBACK</code> 撤销操作：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 出现错误，回滚事务</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-4-并发事务问题"><a href="#5-4-并发事务问题" class="headerlink" title="5.4 并发事务问题"></a>5.4 并发事务问题</h2><ol>
<li><p><strong>赃读：一个事务读到另外一个事务还没有提交的数据。</strong></p>
<ul>
<li>比如B读取到了A未提交的数据。</li>
</ul>
</li>
<li><p><strong>不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</strong></p>
<ul>
<li>事务A两次读取同一条记录，但是读取到的数据却是不一样的。</li>
</ul>
</li>
<li><p><strong>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据 已经存在，好像出现了 “幻影”。</strong></p>
</li>
</ol>
<hr>
<h2 id="5-4-事务的隔离级别"><a href="#5-4-事务的隔离级别" class="headerlink" title="5.4 事务的隔离级别"></a>5.4 事务的隔离级别</h2><p>为了支持并发事务执行，MySQL 提供了四种隔离级别，每种级别在数据一致性和性能之间做了不同的权衡。常见的问题包括：脏读（Dirty Read）、不可重复读（Non-repeatable Read）、幻读（Phantom Read）。</p>
<ol>
<li><p><strong>read uncommitted</strong>（读未提交）</p>
<ul>
<li>事务可以读到其他事务未提交的数据，可能导致脏读。</li>
<li>数据不一致风险最大，但性能最好。</li>
</ul>
</li>
<li><p><strong>read committed</strong>（读已提交）</p>
<ul>
<li>事务只能读到其他事务已提交的数据，避免了脏读，但可能会出现不可重复读。</li>
<li>这是大多数数据库（如 Oracle）的默认隔离级别。</li>
</ul>
</li>
<li><p><strong>repeatable read</strong>（可重复读）</p>
<ul>
<li>事务在开始后，无论其他事务是否提交，当前事务多次读取的结果始终一致，避免了不可重复读。</li>
<li>这是 MySQL 的默认隔离级别。</li>
</ul>
</li>
<li><p><strong>serializable</strong>（可串行化）</p>
<ul>
<li>最高级别的隔离性，强制事务串行执行，避免所有并发问题，包括幻读。</li>
<li>性能最差，因为它严重限制并发。</li>
</ul>
</li>
</ol>
<p><em><strong>查询隔离级别</strong></em></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="symbol">@transaction_isolation</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>设置事务隔离级别</strong></em></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> [sesion|<span class="keyword">global</span>] <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> &#123;<span class="keyword">read</span> <span class="keyword">uncommitted</span>&#125; | <span class="keyword">read</span> <span class="keyword">committed</span> | <span class="keyword">repeatable</span> <span class="keyword">read</span> | <span class="keyword">serializable</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：事务隔离级别越高，数据越安全，但是性能越低。</p>
</blockquote>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记</title>
    <url>/posts/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="vue核心语法"><a href="#vue核心语法" class="headerlink" title="vue核心语法"></a>vue核心语法</h1><p><img src="/posts/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7e7d013ec57818bd9e0b93afee147ee13decdbe94401a0-DfOpXx.png" alt="7e7d013ec57818bd9e0b93afee147ee13decdbe94401a0-DfOpXx" loading="lazy"></p>
<h2 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Vue.js Example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!-- 插值表达式 --&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; title &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; content &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; output() &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; output() &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; output() &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;!-- computed不用加() --&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; outputCon &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; outputCon &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; outputCon &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;!-- 4.指令 --&gt;</span><br><span class="line">         &lt;!-- 内容指令   --&gt;&lt;!-- text,html都会覆盖原始内容 --&gt;</span><br><span class="line">         &lt;p v-text=&quot;htmlContent&quot;&gt;123&lt;/p&gt;</span><br><span class="line">         &lt;p v-html=&quot;htmlContent&quot;&gt;123&lt;/p&gt;</span><br><span class="line">         </span><br><span class="line">          &lt;!-- 渲染指令 --&gt;</span><br><span class="line">        &lt;p v-for=&quot;item in 3&quot;&gt;Elaina&lt;/p&gt;</span><br><span class="line">        &lt;p v-for=&quot;item in arr&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p v-for=&quot;(item,key,index) in obj&quot;&gt;&#123;&#123;item&#125;&#125;&amp;nbsp;&#123;&#123;key&#125;&#125;&amp;nbsp;&#123;&#123;index&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p v-if=&quot;&quot;&gt;1017&lt;/p&gt;</span><br><span class="line">        &lt;p v-show=&quot;&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 属性指令 --&gt;</span><br><span class="line">         &lt;p v-bind:title=&quot;title&quot;&gt;123&lt;/p&gt;</span><br><span class="line">         &lt;p :title=&quot;title&quot;&gt;123&lt;/p&gt;</span><br><span class="line">            &lt;!-- v-bind可以简写成: --&gt;</span><br><span class="line"></span><br><span class="line">         &lt;!-- 事件指令 --&gt;</span><br><span class="line">          &lt;button v-on:click=&quot;output&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">          &lt;button @click=&quot;output&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">          &lt;!-- v-on简写成@ --&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- 表单指令 --&gt;</span><br><span class="line">          &lt;hr&gt; </span><br><span class="line">          &lt;p&gt;表单指令&lt;/p&gt;</span><br><span class="line">           &lt;input type=&quot;text&quot; v-model=&quot;inputValue&quot;&gt;</span><br><span class="line">           &lt;p v-text=&quot;inputValue&quot;&gt;&lt;/p&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">           &lt;!-- 5.修饰符 --&gt;</span><br><span class="line">            &lt;p&gt;修饰符&lt;/p&gt;</span><br><span class="line">           &lt;input type=&quot;text&quot; v-model.trim=&quot;inputValue&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 1. 响应式数据与插值表达式</span><br><span class="line">        const vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    title: &#x27;这是文本&#x27;,</span><br><span class="line">                    content: &#x27;这是内容&#x27;,</span><br><span class="line">                    htmlContent: &#x27;&lt;h1&gt;这是html内容&lt;/h1&gt;&#x27;,</span><br><span class="line">                    arr:[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;],</span><br><span class="line">                    obj:&#123;a:1,b:2,c:3&#125;,</span><br><span class="line">                    inputValue:&#x27;默认内容&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //1.3函数methods属性</span><br><span class="line">            methods: &#123;</span><br><span class="line">                output()&#123;</span><br><span class="line">                    console.log(&quot;output&quot;);</span><br><span class="line">                    return &quot;Test&quot;+this.title + this.content;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //2计算属性computed属性:具有缓存性质，只有当计算属性的值发生变化时，才会重新计算</span><br><span class="line">            computed: &#123;</span><br><span class="line">                outputCon()&#123;</span><br><span class="line">                    console.log(&quot;computed&quot;);</span><br><span class="line">                    return &quot;Test&quot;+this.title + this.content;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //3.侦听器watch属性:监听数据的变化，并执行相应的函数</span><br><span class="line">            watch: &#123;</span><br><span class="line">                title(newVal, oldVal)&#123;</span><br><span class="line">                    console.log(&quot;title changed&quot;, newVal, oldVal);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>在 Vue.js 中，响应式数据、插值表达式、计算属性、侦听器和指令是关键概念。以下是详细讲解和知识笔记：</p>
<h2 id="1-响应式数据-Reactive-Data"><a href="#1-响应式数据-Reactive-Data" class="headerlink" title="1. 响应式数据 (Reactive Data)"></a>1. 响应式数据 (Reactive Data)</h2><p>Vue.js 中的数据对象是响应式的，即当数据发生变化时，视图会自动更新。通过 <code>data</code> 定义的数据是响应式的，Vue.js 使用<strong>依赖追踪</strong>来检测数据的变化并更新 DOM。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;这是标题&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;这是内容&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在模板中使用 <code>&#123;&#123; title &#125;&#125;</code>，当 <code>title</code> 变化时，DOM 会自动更新。</p>
<h2 id="2-插值表达式-Interpolation"><a href="#2-插值表达式-Interpolation" class="headerlink" title="2. 插值表达式 (Interpolation)"></a>2. 插值表达式 (Interpolation)</h2><p>插值表达式用于将数据绑定到 HTML 中。使用 <code>&#123;&#123; &#125;&#125;</code> 可以直接在模板中显示数据。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="comment">&lt;!-- 显示 title 的值 --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-计算属性-Computed-Properties"><a href="#3-计算属性-Computed-Properties" class="headerlink" title="3. 计算属性 (Computed Properties)"></a>3. 计算属性 (Computed Properties)</h2><p>计算属性是依赖其他数据计算得到的值，具有<strong>缓存</strong>的功能，只有相关依赖变化时才会重新计算。和方法不同，计算属性不会重复执行，除非依赖的数据改变。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">outputCon</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Test &quot;</span> + <span class="variable language_">this</span>.<span class="property">title</span> + <span class="variable language_">this</span>.<span class="property">content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>title</code> 或 <code>content</code> 变化时，<code>outputCon</code> 会被重新计算，否则将直接返回缓存的值。</p>
<h2 id="4-侦听器-Watchers"><a href="#4-侦听器-Watchers" class="headerlink" title="4. 侦听器 (Watchers)"></a>4. 侦听器 (Watchers)</h2><p>侦听器用于监听数据的变化，并在数据变化时执行特定操作，常用于异步任务或需要手动执行额外逻辑时。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="title function_">title</span>(<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Title changed from&#x27;</span>, oldVal, <span class="string">&#x27;to&#x27;</span>, newVal);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每当 <code>title</code> 改变时，侦听器会记录新旧值。</p>
<h2 id="5-指令-Directives"><a href="#5-指令-Directives" class="headerlink" title="5. 指令 (Directives)"></a>5. 指令 (Directives)</h2><p>Vue 提供了很多指令来操作 DOM，常见的有 <code>v-text</code>, <code>v-html</code>, <code>v-if</code>, <code>v-show</code>, <code>v-for</code>, <code>v-bind</code>, <code>v-on</code> 等。</p>
<h3 id="内容指令"><a href="#内容指令" class="headerlink" title="内容指令"></a>内容指令</h3><ul>
<li><code>v-text</code>：替换元素的文本内容。</li>
<li><code>v-html</code>：将数据作为 HTML 插入，允许解析 HTML 标签。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="渲染指令"><a href="#渲染指令" class="headerlink" title="渲染指令"></a>渲染指令</h3><ul>
<li><code>v-for</code>：循环渲染列表。</li>
<li><code>v-if</code>：根据条件渲染元素，元素不存在于 DOM 中。</li>
<li><code>v-show</code>：根据条件显示&#x2F;隐藏元素，元素仍然存在于 DOM 中。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in arr&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;showItem&quot;</span>&gt;</span>显示内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;showItem&quot;</span>&gt;</span>显示或隐藏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="属性指令"><a href="#属性指令" class="headerlink" title="属性指令"></a>属性指令</h3><ul>
<li><code>v-bind</code>：动态绑定元素的属性，可以简写为 <code>:</code>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 简写 --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件指令"><a href="#事件指令" class="headerlink" title="事件指令"></a>事件指令</h3><ul>
<li><code>v-on</code>：绑定事件监听器，可以简写为 <code>@</code>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- 简写 --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表单指令"><a href="#表单指令" class="headerlink" title="表单指令"></a>表单指令</h3><ul>
<li><code>v-model</code>：双向绑定表单元素的数据。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; inputValue &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-修饰符-Modifiers"><a href="#6-修饰符-Modifiers" class="headerlink" title="6. 修饰符 (Modifiers)"></a>6. 修饰符 (Modifiers)</h2><p>修饰符是对指令的附加操作，常见于事件处理和表单输入中。例如：</p>
<ul>
<li><code>.trim</code>：去除输入框两端的空白。</li>
<li><code>.lazy</code>：在 <code>input</code> 失焦时更新数据，而不是在每次输入时更新。</li>
</ul>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;inputValue&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 输入时自动去除两端空格 --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="知识笔记总结："><a href="#知识笔记总结：" class="headerlink" title="知识笔记总结："></a>知识笔记总结：</h2><ol>
<li><strong>响应式数据</strong>让 Vue.js 能够自动追踪数据变化并更新 DOM。</li>
<li><strong>插值表达式</strong>用于将数据直接显示在 HTML 中。</li>
<li><strong>计算属性</strong>具有缓存功能，用于处理复杂的逻辑计算。</li>
<li><strong>侦听器</strong>适合监听数据变化并执行额外逻辑，尤其是异步任务。</li>
<li><strong>指令</strong>提供了强大的模板功能，如条件渲染、列表渲染、事件处理等。</li>
<li><strong>修饰符</strong>为指令增加额外的功能，如去除空白字符、事件捕获等。</li>
</ol>
<p>希望这能帮助你更深入了解 Vue.js 的响应式数据与核心功能。如果有其他问题，欢迎随时讨论！</p>
<h1 id="脚手架与组件化开发"><a href="#脚手架与组件化开发" class="headerlink" title="脚手架与组件化开发"></a>脚手架与组件化开发</h1><p><img src="/posts/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WXS7VQMlCQOoZYm.jpeg" alt="WXS7VQMlCQOoZYm" loading="lazy"></p>
<hr>
<h2 id="一、脚手架（Vue-CLI）"><a href="#一、脚手架（Vue-CLI）" class="headerlink" title="一、脚手架（Vue CLI）"></a>一、脚手架（Vue CLI）</h2><h3 id="1-什么是脚手架？"><a href="#1-什么是脚手架？" class="headerlink" title="1. 什么是脚手架？"></a>1. 什么是脚手架？</h3><p><strong>脚手架</strong>（Scaffolding）是指用于快速搭建项目基础结构的工具。在 Vue.js 中，官方提供了 <strong>Vue CLI</strong>（Command Line Interface），它是一个基于 Node.js 的命令行工具，用于快速创建 Vue.js 项目，集成了现代前端开发所需的各种功能和配置。</p>
<h3 id="2-Vue-CLI-的功能和优势"><a href="#2-Vue-CLI-的功能和优势" class="headerlink" title="2. Vue CLI 的功能和优势"></a>2. Vue CLI 的功能和优势</h3><ul>
<li><strong>快速搭建项目</strong>：通过简单的命令即可生成一个带有预设配置的 Vue.js 项目。</li>
<li><strong>可定制化</strong>：支持自定义配置，满足不同项目的特殊需求。</li>
<li><strong>插件系统</strong>：提供了丰富的官方和社区插件，如路由（Vue Router）、状态管理（Vuex）、TypeScript 支持等。</li>
<li><strong>热重载</strong>：内置开发服务器，支持模块热替换（HMR），提高开发效率。</li>
<li><strong>优化的生产构建</strong>：自动进行代码分割、压缩、优化，提升应用性能。</li>
<li><strong>单元测试和端到端测试</strong>：集成了 Jest、Mocha 等测试框架，支持编写测试用例。</li>
</ul>
<h3 id="3-安装和使用-Vue-CLI"><a href="#3-安装和使用-Vue-CLI" class="headerlink" title="3. 安装和使用 Vue CLI"></a>3. 安装和使用 Vue CLI</h3><h4 id="3-1-安装-Vue-CLI"><a href="#3-1-安装-Vue-CLI" class="headerlink" title="3.1 安装 Vue CLI"></a>3.1 安装 Vue CLI</h4><p>确保已安装 Node.js 和 npm，然后在命令行中全局安装 Vue CLI：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<p>安装完成后，可以使用以下命令查看版本，验证安装是否成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure>

<h4 id="3-2-创建新项目"><a href="#3-2-创建新项目" class="headerlink" title="3.2 创建新项目"></a>3.2 创建新项目</h4><p>使用 <code>vue create</code> 命令创建新项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create my-project</span><br></pre></td></tr></table></figure>

<p>系统会提示选择预设配置：</p>
<ul>
<li><strong>默认预设</strong>：包含 Babel、ESLint 等基本配置。</li>
<li><strong>手动选择特性</strong>：可以根据需要添加路由、Vuex、CSS 预处理器等。</li>
</ul>
<h4 id="3-3-运行项目"><a href="#3-3-运行项目" class="headerlink" title="3.3 运行项目"></a>3.3 运行项目</h4><p>进入项目目录，启动开发服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<p>默认情况下，开发服务器运行在 <code>http://localhost:8080</code>。</p>
<h3 id="4-Vue-CLI-项目结构"><a href="#4-Vue-CLI-项目结构" class="headerlink" title="4. Vue CLI 项目结构"></a>4. Vue CLI 项目结构</h3><p>Vue CLI 生成的项目结构通常如下：</p>
<ul>
<li><code>public/</code>：公共静态资源目录，存放未被 Webpack 处理的文件。</li>
<li><code>src/</code>：源代码目录。<ul>
<li><code>main.js</code>：应用的入口文件。</li>
<li><code>App.vue</code>：根组件。</li>
<li><code>assets/</code>：资源文件夹，存放图片、字体等。</li>
<li><code>components/</code>：存放全局或通用组件。</li>
</ul>
</li>
<li><code>babel.config.js</code>：Babel 配置文件。</li>
<li><code>package.json</code>：项目元数据和依赖项。</li>
<li><code>vue.config.js</code>：可选的 Vue CLI 配置文件，用于修改默认设置。</li>
</ul>
<h3 id="5-配置和自定义"><a href="#5-配置和自定义" class="headerlink" title="5. 配置和自定义"></a>5. 配置和自定义</h3><p>可以在 <code>vue.config.js</code> 中对项目进行自定义配置，如修改端口、配置代理、添加别名等。</p>
<p><strong>示例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8081</span>, <span class="comment">// 修改端口</span></span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&#x27;http://api.example.com&#x27;</span> <span class="comment">// 配置代理</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">      <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/&#x27;</span>) <span class="comment">// 添加路径别名</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="6-使用插件"><a href="#6-使用插件" class="headerlink" title="6. 使用插件"></a>6. 使用插件</h3><p>Vue CLI 提供了插件系统，可以在创建项目时或之后添加插件。</p>
<p><strong>添加插件示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue add router</span><br><span class="line">vue add vuex</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二、组件化开发"><a href="#二、组件化开发" class="headerlink" title="二、组件化开发"></a>二、组件化开发</h2><h3 id="1-什么是组件化？"><a href="#1-什么是组件化？" class="headerlink" title="1. 什么是组件化？"></a>1. 什么是组件化？</h3><p><strong>组件化</strong>是将界面划分为独立、可复用的组件，每个组件包含自己的模板、逻辑和样式。Vue.js 强烈鼓励组件化开发，以提高代码的可维护性和复用性。</p>
<h3 id="2-组件的基本概念"><a href="#2-组件的基本概念" class="headerlink" title="2. 组件的基本概念"></a>2. 组件的基本概念</h3><ul>
<li><strong>组件实例</strong>：每个组件都是一个 Vue 实例，拥有自己的数据、方法、生命周期等。</li>
<li><strong>父子关系</strong>：组件可以嵌套，父组件可以传递数据给子组件。</li>
<li><strong>封装性</strong>：组件内部的实现细节对外部是透明的。</li>
</ul>
<h3 id="3-创建组件"><a href="#3-创建组件" class="headerlink" title="3. 创建组件"></a>3. 创建组件</h3><h4 id="3-1-单文件组件（-vue-文件）"><a href="#3-1-单文件组件（-vue-文件）" class="headerlink" title="3.1 单文件组件（.vue 文件）"></a>3.1 单文件组件（.vue 文件）</h4><p>这是 Vue.js 推荐的组件书写方式，包含 <code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 三个部分。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- MyComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-component&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; content &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;MyComponent&#x27;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    title: String,</span><br><span class="line">    content: String</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.my-component &#123;</span><br><span class="line">  /* 样式定义 */</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-注册组件"><a href="#3-2-注册组件" class="headerlink" title="3.2 注册组件"></a>3.2 注册组件</h4><p><strong>局部注册：</strong></p>
<p>在使用组件的父组件中导入并注册：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;my-component :title=&quot;title&quot; :content=&quot;content&quot;&gt;&lt;/my-component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyComponent from &#x27;./components/MyComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyComponent</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: &#x27;组件标题&#x27;,</span><br><span class="line">      content: &#x27;组件内容&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>全局注册：</strong></p>
<p>在 <code>main.js</code> 中注册，全局组件可在任何地方使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyComponent.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyComponent&#x27;</span>, <span class="title class_">MyComponent</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-组件之间的通信"><a href="#4-组件之间的通信" class="headerlink" title="4. 组件之间的通信"></a>4. 组件之间的通信</h3><h4 id="4-1-父子组件通信"><a href="#4-1-父子组件通信" class="headerlink" title="4.1 父子组件通信"></a>4.1 父子组件通信</h4><ul>
<li><p><strong>父组件传递数据给子组件</strong>：使用 <code>props</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件定义 props --&gt;</span><br><span class="line">props: &#123;</span><br><span class="line">  message: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>子组件触发事件通知父组件</strong>：使用 <code>$emit</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件中 --&gt;</span><br><span class="line">this.$emit(&#x27;eventName&#x27;, payload);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件中 --&gt;</span><br><span class="line">&lt;child-component @eventName=&quot;handleEvent&quot;&gt;&lt;/child-component&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-2-兄弟组件通信"><a href="#4-2-兄弟组件通信" class="headerlink" title="4.2 兄弟组件通信"></a>4.2 兄弟组件通信</h4><ul>
<li><p><strong>通过父组件中转</strong>：将数据提升到共同的父组件，由父组件管理和传递。</p>
</li>
<li><p><strong>事件总线（Event Bus）</strong>：创建一个空的 Vue 实例作为事件总线，但在 Vue 3 中不推荐使用。</p>
</li>
<li><p><strong>Vuex 状态管理</strong>：对于复杂的应用，使用 Vuex 统一管理状态。</p>
</li>
</ul>
<h4 id="4-3-跨级组件通信"><a href="#4-3-跨级组件通信" class="headerlink" title="4.3 跨级组件通信"></a>4.3 跨级组件通信</h4><ul>
<li><p><strong>Provide&#x2F;Inject</strong>：祖先组件提供数据，后代组件注入数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 祖先组件</span></span><br><span class="line"><span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">dataKey</span>: <span class="variable language_">this</span>.<span class="property">dataValue</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后代组件</span></span><br><span class="line"><span class="attr">inject</span>: [<span class="string">&#x27;dataKey&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-插槽（Slots）"><a href="#5-插槽（Slots）" class="headerlink" title="5. 插槽（Slots）"></a>5. 插槽（Slots）</h3><p>插槽用于在组件中插入父组件的内容，增强组件的灵活性。</p>
<h4 id="5-1-默认插槽"><a href="#5-1-默认插槽" class="headerlink" title="5.1 默认插槽"></a>5.1 默认插槽</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;child-component&gt;</span><br><span class="line">  &lt;p&gt;插入的内容&lt;/p&gt;</span><br><span class="line">&lt;/child-component&gt;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-具名插槽"><a href="#5-2-具名插槽" class="headerlink" title="5.2 具名插槽"></a>5.2 具名插槽</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt; &lt;!-- 默认插槽 --&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;child-component&gt;</span><br><span class="line">  &lt;template v-slot:header&gt;</span><br><span class="line">    &lt;h1&gt;标题内容&lt;/h1&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;p&gt;主要内容&lt;/p&gt;</span><br><span class="line">  &lt;template v-slot:footer&gt;</span><br><span class="line">    &lt;p&gt;页脚内容&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/child-component&gt;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-作用域插槽"><a href="#5-3-作用域插槽" class="headerlink" title="5.3 作用域插槽"></a>5.3 作用域插槽</h4><p>用于将子组件的数据传递给父组件的插槽内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot :user=&quot;userData&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userData: &#123; name: &#x27;Alice&#x27;, age: 25 &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;child-component v-slot:default=&quot;slotProps&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; slotProps.user.name &#125;&#125; - &#123;&#123; slotProps.user.age &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/child-component&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-动态组件和异步组件"><a href="#6-动态组件和异步组件" class="headerlink" title="6. 动态组件和异步组件"></a>6. 动态组件和异步组件</h3><h4 id="6-1-动态组件"><a href="#6-1-动态组件" class="headerlink" title="6.1 动态组件"></a>6.1 动态组件</h4><p>使用 <code>&lt;component&gt;</code> 标签和 <code>:is</code> 属性，根据条件渲染不同的组件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;component :is=&quot;currentComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;button @click=&quot;toggleComponent&quot;&gt;切换组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      currentComponent: &#x27;ComponentA&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA,</span><br><span class="line">    ComponentB</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    toggleComponent() &#123;</span><br><span class="line">      this.currentComponent = this.currentComponent === &#x27;ComponentA&#x27; ? &#x27;ComponentB&#x27; : &#x27;ComponentA&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="6-2-异步组件"><a href="#6-2-异步组件" class="headerlink" title="6.2 异步组件"></a>6.2 异步组件</h4><p>对于大型组件，可以使用异步加载，优化首屏加载速度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">AsyncComponent</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./components/AsyncComponent.vue&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="7-组件生命周期"><a href="#7-组件生命周期" class="headerlink" title="7. 组件生命周期"></a>7. 组件生命周期</h3><p>组件在创建、更新、销毁的过程中，会触发一系列的生命周期钩子函数，可以在这些函数中执行相应的逻辑。</p>
<ul>
<li><p><strong>常用生命周期钩子：</strong></p>
<ul>
<li><code>beforeCreate</code>：实例初始化之后，数据观测和事件配置之前。</li>
<li><code>created</code>：实例已创建，完成数据观测、属性和方法的运算，尚未挂载。</li>
<li><code>beforeMount</code>：在挂载开始之前调用。</li>
<li><code>mounted</code>：实例挂载到 DOM 上后调用。</li>
<li><code>beforeUpdate</code>：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li>
<li><code>updated</code>：由于数据更改导致的虚拟 DOM 重新渲染和打补丁之后调用。</li>
<li><code>beforeDestroy</code>：实例销毁之前调用。</li>
<li><code>destroyed</code>：实例销毁后调用。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="知识笔记总结"><a href="#知识笔记总结" class="headerlink" title="知识笔记总结"></a>知识笔记总结</h2><h3 id="脚手架（Vue-CLI）"><a href="#脚手架（Vue-CLI）" class="headerlink" title="脚手架（Vue CLI）"></a>脚手架（Vue CLI）</h3><ul>
<li><strong>安装与创建项目</strong>：<code>npm install -g @vue/cli</code>，<code>vue create project-name</code>。</li>
<li><strong>项目结构</strong>：了解 Vue CLI 项目的基本目录结构和文件作用。</li>
<li><strong>配置与插件</strong>：使用 <code>vue.config.js</code> 进行自定义配置，使用插件系统扩展功能。</li>
<li><strong>命令</strong>：<ul>
<li><code>npm run serve</code>：启动开发服务器。</li>
<li><code>npm run build</code>：构建生产环境代码。</li>
<li><code>npm run test</code>：运行测试。</li>
</ul>
</li>
</ul>
<h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3><ul>
<li><strong>组件创建</strong>：使用单文件组件 <code>.vue</code>，包含模板、脚本和样式。</li>
<li><strong>组件注册</strong>：区分全局注册和局部注册，推荐使用局部注册管理组件。</li>
<li><strong>组件通信</strong>：<ul>
<li><strong>父子通信</strong>：<code>props</code> 和 <code>$emit</code>。</li>
<li><strong>兄弟通信</strong>：通过共同的父组件或状态管理（Vuex）。</li>
<li><strong>跨级通信</strong>：<code>provide</code> 和 <code>inject</code>。</li>
</ul>
</li>
<li><strong>插槽（Slots）</strong>：使用默认插槽、具名插槽和作用域插槽增强组件的灵活性。</li>
<li><strong>动态组件</strong>：使用 <code>&lt;component :is=&quot;componentName&quot;&gt;</code> 动态渲染组件。</li>
<li><strong>生命周期钩子</strong>：理解各个生命周期的作用，合理使用钩子函数。</li>
</ul>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li><strong>组件命名</strong>：遵循命名规范，使用大驼峰或短横线命名法。</li>
<li><strong>单一职责</strong>：每个组件只负责完成一个功能，保持组件的高内聚低耦合。</li>
<li><strong>样式作用域</strong>：使用 <code>scoped</code> 或 CSS Modules，防止样式污染。</li>
<li><strong>性能优化</strong>：使用异步组件、路由懒加载等手段优化性能。</li>
<li><strong>代码规范</strong>：遵循 ESLint 规则，保持代码风格一致。</li>
</ul>
<hr>
<p>希望以上内容能帮助你深入理解 Vue.js 中的脚手架和组件化开发。如果你还有其他问题，欢迎继续提问！</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>魔女之旅</title>
    <url>/posts/%E9%AD%94%E5%A5%B3%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<h1 id="请别在意。我是旅人，得继续旅行才行"><a href="#请别在意。我是旅人，得继续旅行才行" class="headerlink" title="请别在意。我是旅人，得继续旅行才行!"></a>请别在意。我是旅人，得继续旅行才行!</h1><p><img src="/posts/%E9%AD%94%E5%A5%B3%E4%B9%8B%E6%97%85/Elaina.jpg" alt="Elaina" loading="lazy"></p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">《魔女之旅》（日语：魔女の旅々）是由白石定规创作、あずーる插画的一部轻小说，并有Drama <span class="built_in">CD</span>、漫画等衍生作品。</span><br><span class="line"></span><br><span class="line">原作介绍</span><br><span class="line"><span class="number">2014</span>年在Amazon Kindle首次公开，<span class="number">2016</span>年修正后单行本化。</span><br><span class="line"></span><br><span class="line">剧情简介</span><br><span class="line">某个地方有个正在旅行的魔女，她的名字是伊蕾娜。</span><br><span class="line">身为旅人，在很长很长的旅途中，她与形形色色的国家与人们邂逅。</span><br><span class="line"></span><br><span class="line">只允许魔法师入境的国家、</span><br><span class="line">最喜欢肌肉的壮汉、</span><br><span class="line">在死亡深渊等待恋人归来的青年、</span><br><span class="line">独自留守国家早已灭亡的公主…</span><br><span class="line"></span><br><span class="line">最后，还有她身为魔女的至今为止与从今以后。</span><br><span class="line">和莫名其妙、滑稽可笑的人们相遇，接触某人美丽的日常生活，魔女日复一日编织出相逢与离别的故事。</span><br><span class="line"></span><br><span class="line">——《第一卷导语》</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>动漫</tag>
      </tags>
  </entry>
  <entry>
    <title>空之境界</title>
    <url>/posts/%E7%A9%BA%E4%B9%8B%E5%A2%83%E7%95%8C/</url>
    <content><![CDATA[<p><img src="/posts/%E7%A9%BA%E4%B9%8B%E5%A2%83%E7%95%8C/d437d1dddb0c30c851e1741af02585236ee8758b.jpg" alt="d437d1dddb0c30c851e1741af02585236ee8758b" loading="lazy"></p>
<p>《空之境界》是由日本作家奈须蘑菇所著的一系列轻小说，原作是奈须蘑菇在1998年至1999年间于个人主页上连载的同人小说。后来由武内崇负责插画，并且被Type-Moon正式出版。这部作品以其深刻的主题、复杂的叙事结构以及丰富的象征意义而闻名，在读者中拥有很高的评价。</p>
<h3 id="故事概要"><a href="#故事概要" class="headerlink" title="故事概要"></a>故事概要</h3><p>《空之境界》的故事围绕着两仪家的继承者——两仪式（Ryougi Shiki）展开。故事开始时，式刚刚从长达两年的昏迷中醒来，她发现自己拥有了可以看到事物“死相”的能力。随着故事的发展，式与她的青梅竹马黑桐干也（Kokutou Mikiya）以及其他角色一起经历了一系列超自然事件，这些事件揭示了关于生命、死亡、自我认知等深层次的主题。</p>
<h3 id="深度分析"><a href="#深度分析" class="headerlink" title="深度分析"></a>深度分析</h3><h4 id="一、生死观与存在主义"><a href="#一、生死观与存在主义" class="headerlink" title="一、生死观与存在主义"></a>一、生死观与存在主义</h4><p>《空之境界》深入探讨了生死的意义。通过两仪式的眼睛，我们可以看到一个不同于常人的世界：每个物体都有其“线”，即生命的轨迹；当这些线断裂时，则意味着死亡的到来。这种设定不仅仅是一种视觉上的创新，更重要的是它反映了作者对于生死界限模糊化的一种思考方式。同时，《空之境界》也涉及到了个体如何面对自身存在的问题，特别是当主角们面临选择生存还是牺牲的时候，他们对自我价值的认知成为了推动剧情发展的重要因素之一。</p>
<h4 id="二、双重人格与身份认同"><a href="#二、双重人格与身份认同" class="headerlink" title="二、双重人格与身份认同"></a>二、双重人格与身份认同</h4><p>另一个值得关注的主题是关于身份认同和个人成长。两仪式拥有两个截然不同的人格：“男性”的冷静理性面和“女性”的温柔感性面。这两种性格之间的冲突及最终融合过程象征着一个人内心深处不同方面之间的斗争与和谐。此外，其他角色如荒耶宗莲等人也在探索自己真正的自我过程中扮演了重要角色，体现了寻找真实自我的艰难旅程。</p>
<h4 id="三、记忆与遗忘"><a href="#三、记忆与遗忘" class="headerlink" title="三、记忆与遗忘"></a>三、记忆与遗忘</h4><p>记忆与遗忘也是贯穿整个系列的关键主题之一。无论是因为某种原因失去记忆的角色，还是主动选择忘记某些痛苦回忆的人物，都在某种程度上反映了人类对于过去经历的态度。《空之境界》通过对记忆这一概念的独特诠释，引导读者思考记忆对我们塑造自我形象的重要性以及遗忘背后可能隐藏的情感创伤。</p>
<h4 id="四、哲学思辨与文学艺术"><a href="#四、哲学思辨与文学艺术" class="headerlink" title="四、哲学思辨与文学艺术"></a>四、哲学思辨与文学艺术</h4><p>除了上述提到的内容之外，《空之境界》还包含了大量的哲学讨论和文学引用。例如，“起源”、“无意识”等概念频繁出现于文本之中，显示出作者深厚的哲学功底。同时，书中也不乏对经典文学作品的致敬，如《爱丽丝梦游仙境》中的元素就被巧妙地融入到了故事情节里，为整部作品增添了几分神秘色彩。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>《空之境界》不仅是一部充满奇幻色彩的小说，更是一次深刻的精神之旅。通过细腻的心理描写、复杂的人物关系以及富有哲理性的对话，《空之境界》成功构建了一个既独立又相互联系的世界观体系。它挑战了传统意义上的善恶观念，鼓励人们勇敢地面对内心的黑暗面，并从中找到成长的力量。</p>
]]></content>
      <tags>
        <tag>动漫</tag>
      </tags>
  </entry>
</search>
