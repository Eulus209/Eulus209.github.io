<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>贪吃蛇</title>
    <url>/posts/Game/</url>
    <content><![CDATA[<iframe src="./Game.html" width="100%" height="600px"></iframe>

]]></content>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用语法</title>
    <url>/posts/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="Git常用语法详解"><a href="#Git常用语法详解" class="headerlink" title="Git常用语法详解"></a>Git常用语法详解</h1><p><img src="/posts/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/368420dac41817f3d3aab08cc2293d2aac0c9dee.jpg" alt="368420dac41817f3d3aab08cc2293d2aac0c9dee" loading="lazy"></p>
<p>Git是一款功能强大的分布式版本控制系统，其丰富的命令和灵活的语法可以满足各种版本管理需求。熟练掌握Git的常用语法，有助于提高开发效率和团队协作能力。下面将详细介绍Git的常用命令和语法，帮助您深入理解并应用Git。</p>
<hr>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li>Git基础命令<ul>
<li>初始化仓库：<code>git init</code></li>
<li>克隆仓库：<code>git clone</code></li>
<li>查看状态：<code>git status</code></li>
<li>添加到暂存区：<code>git add</code></li>
<li>提交更改：<code>git commit</code></li>
<li>查看提交历史：<code>git log</code></li>
</ul>
</li>
<li>分支操作<ul>
<li>查看分支：<code>git branch</code></li>
<li>创建分支：<code>git branch &lt;branch-name&gt;</code></li>
<li>切换分支：<code>git checkout &lt;branch-name&gt;</code></li>
<li>创建并切换分支：<code>git checkout -b &lt;branch-name&gt;</code></li>
<li>合并分支：<code>git merge &lt;branch-name&gt;</code></li>
<li>删除分支：<code>git branch -d &lt;branch-name&gt;</code></li>
</ul>
</li>
<li>远程仓库操作<ul>
<li>查看远程仓库：<code>git remote -v</code></li>
<li>添加远程仓库：<code>git remote add &lt;name&gt; &lt;url&gt;</code></li>
<li>推送到远程仓库：<code>git push</code></li>
<li>从远程仓库拉取：<code>git pull</code></li>
<li>获取远程更新：<code>git fetch</code></li>
</ul>
</li>
<li>撤销与回滚<ul>
<li>撤销修改：<code>git checkout -- &lt;file&gt;</code></li>
<li>取消暂存：<code>git reset HEAD &lt;file&gt;</code></li>
<li>回滚提交：<code>git revert &lt;commit&gt;</code></li>
<li>重置仓库：<code>git reset --hard &lt;commit&gt;</code></li>
</ul>
</li>
<li>标签管理<ul>
<li>创建标签：<code>git tag &lt;tag-name&gt;</code></li>
<li>查看标签：<code>git tag</code></li>
<li>推送标签：<code>git push origin &lt;tag-name&gt;</code></li>
</ul>
</li>
<li>存储与应用变更<ul>
<li>存储当前修改：<code>git stash</code></li>
<li>查看存储列表：<code>git stash list</code></li>
<li>应用最新存储：<code>git stash apply</code></li>
<li>删除存储：<code>git stash drop</code></li>
</ul>
</li>
</ol>
<hr>
<h2 id="1-Git基础命令"><a href="#1-Git基础命令" class="headerlink" title="1. Git基础命令"></a>1. Git基础命令</h2><h3 id="1-1-初始化仓库：git-init"><a href="#1-1-初始化仓库：git-init" class="headerlink" title="1.1 初始化仓库：git init"></a>1.1 初始化仓库：<code>git init</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>在当前目录下初始化一个新的Git仓库，会创建一个<code>.git</code>目录，用于存储Git的管理信息。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-project</span><br><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

<h3 id="1-2-克隆仓库：git-clone"><a href="#1-2-克隆仓库：git-clone" class="headerlink" title="1.2 克隆仓库：git clone"></a>1.2 克隆仓库：<code>git clone</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repository-url&gt; [destination-directory]</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>从远程仓库克隆代码到本地。<code>destination-directory</code>为可选参数，指定克隆后的目录名。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/user/repo.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/user/repo.git my-repo</span><br></pre></td></tr></table></figure>

<h3 id="1-3-查看状态：git-status"><a href="#1-3-查看状态：git-status" class="headerlink" title="1.3 查看状态：git status"></a>1.3 查看状态：<code>git status</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>显示工作目录和暂存区的状态，提示哪些文件发生了修改、哪些文件处于暂存状态等。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h3 id="1-4-添加到暂存区：git-add"><a href="#1-4-添加到暂存区：git-add" class="headerlink" title="1.4 添加到暂存区：git add"></a>1.4 添加到暂存区：<code>git add</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br><span class="line">git add .</span><br><span class="line">git add -A</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将修改的文件添加到暂存区，以便在下一次提交时包含这些更改。</p>
<ul>
<li><code>git add &lt;file&gt;</code>：添加指定的文件。</li>
<li><code>git add .</code>：添加当前目录下的所有更改（包括新增、修改、删除）。</li>
<li><code>git add -A</code>：添加所有更改，等同于<code>git add .</code>。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add README.md</span><br><span class="line">git add src/</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>

<h3 id="1-5-提交更改：git-commit"><a href="#1-5-提交更改：git-commit" class="headerlink" title="1.5 提交更改：git commit"></a>1.5 提交更改：<code>git commit</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;commit message&quot;</span></span><br><span class="line">git commit</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将暂存区的更改提交到本地仓库。<code>-m</code>参数用于直接在命令行中填写提交信息。如果不加<code>-m</code>，Git会打开默认的编辑器让你输入提交信息。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;Add new feature&quot;</span></span><br><span class="line">git commit</span><br></pre></td></tr></table></figure>

<h3 id="1-6-查看提交历史：git-log"><a href="#1-6-查看提交历史：git-log" class="headerlink" title="1.6 查看提交历史：git log"></a>1.6 查看提交历史：<code>git log</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line">git <span class="built_in">log</span> --graph</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>显示提交历史记录。</p>
<ul>
<li><code>git log</code>：详细显示提交历史。</li>
<li><code>git log --oneline</code>：以简洁的一行格式显示。</li>
<li><code>git log --graph</code>：以图形化方式显示分支合并历史。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --graph</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-分支操作"><a href="#2-分支操作" class="headerlink" title="2. 分支操作"></a>2. 分支操作</h2><h3 id="2-1-查看分支：git-branch"><a href="#2-1-查看分支：git-branch" class="headerlink" title="2.1 查看分支：git branch"></a>2.1 查看分支：<code>git branch</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<ul>
<li><code>git branch</code>：列出本地所有分支，当前所在分支会有<code>*</code>标记。</li>
<li><code>git branch -a</code>：列出本地和远程所有分支。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<h3 id="2-2-创建分支：git-branch"><a href="#2-2-创建分支：git-branch" class="headerlink" title="2.2 创建分支：git branch &lt;branch-name&gt;"></a>2.2 创建分支：<code>git branch &lt;branch-name&gt;</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>基于当前分支创建一个新分支，分支名为<code>&lt;branch-name&gt;</code>。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch feature/login</span><br></pre></td></tr></table></figure>

<h3 id="2-3-切换分支：git-checkout"><a href="#2-3-切换分支：git-checkout" class="headerlink" title="2.3 切换分支：git checkout &lt;branch-name&gt;"></a>2.3 切换分支：<code>git checkout &lt;branch-name&gt;</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>切换到指定的分支，使之成为当前分支。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout feature/login</span><br></pre></td></tr></table></figure>

<h3 id="2-4-创建并切换分支：git-checkout-b"><a href="#2-4-创建并切换分支：git-checkout-b" class="headerlink" title="2.4 创建并切换分支：git checkout -b &lt;branch-name&gt;"></a>2.4 创建并切换分支：<code>git checkout -b &lt;branch-name&gt;</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>创建一个新分支并立即切换到该分支。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b feature/signup</span><br></pre></td></tr></table></figure>

<h3 id="2-5-合并分支：git-merge"><a href="#2-5-合并分支：git-merge" class="headerlink" title="2.5 合并分支：git merge &lt;branch-name&gt;"></a>2.5 合并分支：<code>git merge &lt;branch-name&gt;</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将<code>&lt;branch-name&gt;</code>分支的修改合并到当前分支。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git merge feature/login</span><br></pre></td></tr></table></figure>

<h3 id="2-6-删除分支：git-branch-d"><a href="#2-6-删除分支：git-branch-d" class="headerlink" title="2.6 删除分支：git branch -d &lt;branch-name&gt;"></a>2.6 删除分支：<code>git branch -d &lt;branch-name&gt;</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;branch-name&gt;</span><br><span class="line">git branch -D &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<ul>
<li><code>git branch -d</code>：删除指定的分支，只有当该分支的修改已经被合并到当前分支或其他分支时才能删除。</li>
<li><code>git branch -D</code>：强制删除指定分支，可能会导致未合并的修改丢失。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d feature/login</span><br><span class="line">git branch -D feature/old-feature</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-远程仓库操作"><a href="#3-远程仓库操作" class="headerlink" title="3. 远程仓库操作"></a>3. 远程仓库操作</h2><h3 id="3-1-查看远程仓库：git-remote-v"><a href="#3-1-查看远程仓库：git-remote-v" class="headerlink" title="3.1 查看远程仓库：git remote -v"></a>3.1 查看远程仓库：<code>git remote -v</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>显示所有远程仓库的名称和URL。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<h3 id="3-2-添加远程仓库：git-remote-add"><a href="#3-2-添加远程仓库：git-remote-add" class="headerlink" title="3.2 添加远程仓库：git remote add"></a>3.2 添加远程仓库：<code>git remote add</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>为当前本地仓库添加一个远程仓库，<code>&lt;name&gt;</code>通常为<code>origin</code>。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/user/repo.git</span><br></pre></td></tr></table></figure>

<h3 id="3-3-推送到远程仓库：git-push"><a href="#3-3-推送到远程仓库：git-push" class="headerlink" title="3.3 推送到远程仓库：git push"></a>3.3 推送到远程仓库：<code>git push</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;branch&gt;</span><br><span class="line">git push -u &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将当前分支的提交推送到远程仓库的指定分支。</p>
<ul>
<li><code>git push &lt;remote&gt; &lt;branch&gt;</code>：推送更改。</li>
<li><code>git push -u &lt;remote&gt; &lt;branch&gt;</code>：推送并设置跟踪关系，方便以后直接使用<code>git push</code>。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin main</span><br><span class="line">git push -u origin feature/login</span><br></pre></td></tr></table></figure>

<h3 id="3-4-从远程仓库拉取：git-pull"><a href="#3-4-从远程仓库拉取：git-pull" class="headerlink" title="3.4 从远程仓库拉取：git pull"></a>3.4 从远程仓库拉取：<code>git pull</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>从远程仓库拉取指定分支的更新并与当前分支合并。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin main</span><br></pre></td></tr></table></figure>

<h3 id="3-5-获取远程更新：git-fetch"><a href="#3-5-获取远程更新：git-fetch" class="headerlink" title="3.5 获取远程更新：git fetch"></a>3.5 获取远程更新：<code>git fetch</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch &lt;remote&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>从远程仓库获取更新，但不自动合并，需要手动合并。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-撤销与回滚"><a href="#4-撤销与回滚" class="headerlink" title="4. 撤销与回滚"></a>4. 撤销与回滚</h2><h3 id="4-1-撤销修改：git-checkout"><a href="#4-1-撤销修改：git-checkout" class="headerlink" title="4.1 撤销修改：git checkout --"></a>4.1 撤销修改：<code>git checkout --</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将工作区的指定文件恢复到最近一次提交的状态，丢弃在工作区的修改。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- README.md</span><br></pre></td></tr></table></figure>

<h3 id="4-2-取消暂存：git-reset-HEAD"><a href="#4-2-取消暂存：git-reset-HEAD" class="headerlink" title="4.2 取消暂存：git reset HEAD"></a>4.2 取消暂存：<code>git reset HEAD</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将指定的文件从暂存区移除，但保留工作区的修改。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD src/main.py</span><br></pre></td></tr></table></figure>

<h3 id="4-3-回滚提交：git-revert"><a href="#4-3-回滚提交：git-revert" class="headerlink" title="4.3 回滚提交：git revert"></a>4.3 回滚提交：<code>git revert</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>创建一个新的提交，用于撤销指定的提交，但保留提交历史。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git revert 1a2b3c4d</span><br></pre></td></tr></table></figure>

<h3 id="4-4-重置仓库：git-reset-hard"><a href="#4-4-重置仓库：git-reset-hard" class="headerlink" title="4.4 重置仓库：git reset --hard"></a>4.4 重置仓库：<code>git reset --hard</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将当前分支的HEAD指向指定的<code>&lt;commit&gt;</code>，并重置暂存区和工作区，丢弃之后的所有更改。</p>
<p><strong>注意：此操作不可逆，慎用！</strong></p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard 1a2b3c4d</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-标签管理"><a href="#5-标签管理" class="headerlink" title="5. 标签管理"></a>5. 标签管理</h2><h3 id="5-1-创建标签：git-tag"><a href="#5-1-创建标签：git-tag" class="headerlink" title="5.1 创建标签：git tag"></a>5.1 创建标签：<code>git tag</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag &lt;tag-name&gt;</span><br><span class="line">git tag -a &lt;tag-name&gt; -m <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>为当前提交创建标签，<code>-a</code>参数创建带有注释的标签。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag v1.0</span><br><span class="line">git tag -a v1.1 -m <span class="string">&quot;Release version 1.1&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-查看标签：git-tag"><a href="#5-2-查看标签：git-tag" class="headerlink" title="5.2 查看标签：git tag"></a>5.2 查看标签：<code>git tag</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>列出所有标签。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>

<h3 id="5-3-推送标签：git-push-origin"><a href="#5-3-推送标签：git-push-origin" class="headerlink" title="5.3 推送标签：git push origin"></a>5.3 推送标签：<code>git push origin</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin &lt;tag-name&gt;</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将指定标签或所有标签推送到远程仓库。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin v1.1</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="6-存储与应用变更"><a href="#6-存储与应用变更" class="headerlink" title="6. 存储与应用变更"></a>6. 存储与应用变更</h2><h3 id="6-1-存储当前修改：git-stash"><a href="#6-1-存储当前修改：git-stash" class="headerlink" title="6.1 存储当前修改：git stash"></a>6.1 存储当前修改：<code>git stash</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git stash save <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将当前工作区和暂存区的修改保存起来，清空工作区，方便切换分支或执行其他操作。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git stash save <span class="string">&quot;WIP: Implement new feature&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-查看存储列表：git-stash-list"><a href="#6-2-查看存储列表：git-stash-list" class="headerlink" title="6.2 查看存储列表：git stash list"></a>6.2 查看存储列表：<code>git stash list</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>显示所有存储的修改列表。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>

<h3 id="6-3-应用最新存储：git-stash-apply"><a href="#6-3-应用最新存储：git-stash-apply" class="headerlink" title="6.3 应用最新存储：git stash apply"></a>6.3 应用最新存储：<code>git stash apply</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash apply [stash@&#123;n&#125;]</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>将指定的存储应用到当前工作区，<code>stash@&#123;n&#125;</code>是存储的索引号，默认是最新的。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash apply</span><br><span class="line">git stash apply stash@&#123;1&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-4-删除存储：git-stash-drop"><a href="#6-4-删除存储：git-stash-drop" class="headerlink" title="6.4 删除存储：git stash drop"></a>6.4 删除存储：<code>git stash drop</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash drop [stash@&#123;n&#125;]</span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<ul>
<li><code>git stash drop</code>：删除指定的存储。</li>
<li><code>git stash clear</code>：清空所有存储。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash drop</span><br><span class="line">git stash drop stash@&#123;1&#125;</span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="附加：其他常用命令"><a href="#附加：其他常用命令" class="headerlink" title="附加：其他常用命令"></a>附加：其他常用命令</h2><h3 id="查看差异：git-diff"><a href="#查看差异：git-diff" class="headerlink" title="查看差异：git diff"></a>查看差异：<code>git diff</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff</span><br><span class="line">git diff &lt;commit&gt;</span><br><span class="line">git diff &lt;commit1&gt; &lt;commit2&gt;</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>显示工作区、暂存区或两个提交之间的差异。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff                  <span class="comment"># 工作区与暂存区的差异</span></span><br><span class="line">git diff --staged         <span class="comment"># 暂存区与最新提交的差异</span></span><br><span class="line">git diff 1a2b3c4d         <span class="comment"># 工作区与指定提交的差异</span></span><br><span class="line">git diff 1a2b3c4d 5e6f7g8h  <span class="comment"># 两个提交之间的差异</span></span><br></pre></td></tr></table></figure>

<h3 id="配置别名：git-config"><a href="#配置别名：git-config" class="headerlink" title="配置别名：git config"></a>配置别名：<code>git config</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global <span class="built_in">alias</span>.&lt;alias-name&gt; <span class="string">&#x27;&lt;git-command&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>为Git命令创建别名，简化日常操作。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.cm <span class="string">&#x27;commit -m&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使用别名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git st      <span class="comment"># 等同于 git status</span></span><br><span class="line">git co main <span class="comment"># 等同于 git checkout main</span></span><br></pre></td></tr></table></figure>

<h3 id="显示图形化日志：git-log-graph"><a href="#显示图形化日志：git-log-graph" class="headerlink" title="显示图形化日志：git log --graph"></a>显示图形化日志：<code>git log --graph</code></h3><p><strong>语法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --oneline --all</span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<p>以图形方式显示提交历史，包含所有分支，简洁明了。</p>
<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --oneline --all</span><br></pre></td></tr></table></figure>

<hr>
<p><img src="/posts/Git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/2018080251901_yFiXE.jpeg" alt="2018080251901_yFiXE" loading="lazy"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>熟练掌握Git的常用命令和语法，可以大大提高日常开发和协作的效率。本文详细介绍了Git的基础命令、分支操作、远程仓库操作、撤销与回滚、标签管理、存储变更等方面的常用语法。建议在实际工作中多加练习，结合具体场景灵活运用。</p>
<h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ul>
<li><strong>多练习</strong>：在实际项目中尝试使用不同的Git命令，加深理解。</li>
<li><strong>参考帮助文档</strong>：使用<code>git help &lt;command&gt;</code>查看命令的详细说明。</li>
<li><strong>善用别名</strong>：为常用命令配置别名，提高操作速度。</li>
<li><strong>注意安全</strong>：在执行如<code>git reset --hard</code>等可能导致数据丢失的命令时，务必谨慎。</li>
</ul>
<p>希望通过本篇详解，您能更加深入地了解Git的常用语法，在工作中得心应手地使用Git进行版本控制和团队协作。</p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础语法</title>
    <url>/posts/MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 align="center">MySQl知识点总结</h1>

<p><img src="/posts/MySQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/123214339_p0_master1200.jpg" alt="123214339_p0_master1200" loading="lazy"></p>
<hr>
<h1 id="1-SQl语法"><a href="#1-SQl语法" class="headerlink" title="1.SQl语法"></a>1.SQl语法</h1><hr>
<h2 id="1-1-通用语法"><a href="#1-1-通用语法" class="headerlink" title="1.1 通用语法"></a>1.1 通用语法</h2><p>a&gt; SQL语句可以单行或多行书写，以分号结尾。</p>
<p>b&gt; SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</p>
<p>c&gt; MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。</p>
<p>d&gt; 注释：</p>
<pre><code>- 单行注释：-- 注释内容 或 # 注释内容
- 多行注释：/* 注释内容 */
</code></pre>
<hr>
<h2 id="1-2-DDl-Data-Definition-Language-：用于定义数据库结构"><a href="#1-2-DDl-Data-Definition-Language-：用于定义数据库结构" class="headerlink" title="1.2 DDl(Data Definition Language)：用于定义数据库结构"></a>1.2 DDl(Data Definition Language)：用于定义数据库结构</h2><h3 id="1-2-1-数据库操作"><a href="#1-2-1-数据库操作" class="headerlink" title="1.2.1 数据库操作"></a>1.2.1 数据库操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;查询所有数据库</span><br><span class="line">	show databases;</span><br><span class="line">b&gt;查询当前数据库</span><br><span class="line">	select database();</span><br><span class="line">c&gt;创建数据库</span><br><span class="line">	create databases [if not exists] database_name [default charset 字符集] [collate 排序规则];</span><br><span class="line">d&gt;删除数据库</span><br><span class="line">	drop database [if exists] database_name;</span><br><span class="line">e&gt;切换数据库</span><br><span class="line">	use database_name;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-表操作"><a href="#1-2-2-表操作" class="headerlink" title="1.2.2 表操作"></a>1.2.2 表操作</h3><h4 id="1-2-2-1-查询创建"><a href="#1-2-2-1-查询创建" class="headerlink" title="1.2.2.1 查询创建"></a>1.2.2.1 查询创建</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;查询当前数据库所有表</span><br><span class="line">	show tables;</span><br><span class="line">b&gt;查看指定表结构</span><br><span class="line">	desc table_name;</span><br><span class="line">c&gt;查询指定表的建表语句</span><br><span class="line">	show create table table_name;</span><br><span class="line">d&gt;创建表结构</span><br><span class="line">	create table table_name(</span><br><span class="line">		column1 datatype [comment 注释1], </span><br><span class="line">        column2 datatype,</span><br><span class="line">        column3 datatype,</span><br><span class="line">       ....</span><br><span class="line">	)[comment 注释];</span><br><span class="line">	*注意: ... 内为可选参数，最后一个字段后面没有逗号*</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-2-数据类型"><a href="#1-2-2-2-数据类型" class="headerlink" title="1.2.2.2 数据类型"></a>1.2.2.2 数据类型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;数值类型</span><br><span class="line">b&gt;字符串类型</span><br><span class="line">c&gt;日期时间类型</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-3-修改"><a href="#1-2-2-3-修改" class="headerlink" title="1.2.2.3 修改"></a>1.2.2.3 修改</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;添加字段</span><br><span class="line">	alter table table_name add column_name datatype [comment] [约束];</span><br><span class="line">b&gt;修改数据类型</span><br><span class="line">	alter table table_name modify colum_name new_datatype;</span><br><span class="line">c&gt;修改字段名和字段类型</span><br><span class="line">	alter table table_name change column_name new_column_name datatype [comment] [约束];</span><br><span class="line">d&gt;删除字段</span><br><span class="line">	alter table table_name drop column_name;</span><br><span class="line">e&gt;修改表名</span><br><span class="line">	alter table table_name rename to new_table_name;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-3-删除"><a href="#1-2-2-3-删除" class="headerlink" title="1.2.2.3 删除"></a>1.2.2.3 删除</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt; 删除表</span><br><span class="line">	drop table [if exists] table_name;</span><br><span class="line">b&gt; 删除指定表, 并重新创建表</span><br><span class="line">	truncate table table_name;</span><br><span class="line">	*注意: 在删除表的时候，表中的全部数据也都会被删除。*</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="1-3-DML-Data-Manipulation-Language-：用来对数据库中表的数据记录进-行增、删、改操作。"><a href="#1-3-DML-Data-Manipulation-Language-：用来对数据库中表的数据记录进-行增、删、改操作。" class="headerlink" title="1.3 DML(Data Manipulation Language)：用来对数据库中表的数据记录进 行增、删、改操作。"></a>1.3 DML(Data Manipulation Language)：用来对数据库中表的数据记录进 行增、删、改操作。</h2><blockquote>
<p>添加数据（INSERT） </p>
<p>修改数据（UPDATE）</p>
<p>删除数据（DELETE）</p>
</blockquote>
<h3 id="1-3-1-添加数据"><a href="#1-3-1-添加数据" class="headerlink" title="1.3.1 添加数据"></a>1.3.1 添加数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;给指定字段添加数据</span><br><span class="line">	insert into table_name (column1,column2,...) values (value1,value2,...);</span><br><span class="line">b&gt;给全部字段添加数据</span><br><span class="line">	insert into table_name values (value1,value2,...);</span><br><span class="line">c&gt;批量添加数据</span><br><span class="line">	-insert into 表名 (字段名1,字段名2,...) values (值1,值2,...),(值1, 值2,...),(值1,值2,...) ;</span><br><span class="line">	-insert table_name values (值1,值2,...),(值1,值2,...),(值1,值2,...) ;</span><br><span class="line">	**注意事项:</span><br><span class="line">		• 插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</span><br><span class="line">		• 字符串和日期型数据应该包含在引号中。</span><br><span class="line">		• 插入的数据大小，应该在字段的规定范围内。</span><br><span class="line">	**</span><br></pre></td></tr></table></figure>

<h3 id="1-3-2-修改数据"><a href="#1-3-2-修改数据" class="headerlink" title="1.3.2 修改数据"></a>1.3.2 修改数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改数据的具体语法为:</span><br><span class="line">	updata table_name set column1=value1,column2=value2,...[where 条件];</span><br><span class="line">	**</span><br><span class="line">	注意事项:</span><br><span class="line">		修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</span><br><span class="line">	**</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-删除数据"><a href="#1-3-3-删除数据" class="headerlink" title="1.3.3 删除数据"></a>1.3.3 删除数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">删除数据的具体语法为：</span><br><span class="line">	delete from table_name [where 条件];</span><br></pre></td></tr></table></figure>

<p><strong>注意事项:</strong></p>
<ul>
<li>DELETE 语句的条件可以有，也可以没有，如果没有条件,则会删除整张表的所有数据。</li>
<li>DELETE 语句不能删除某一个字段的值(可以使用UPDATE，将该字段值置为NULL即可)。</li>
<li>当进行删除全部数据操作时，datagrip会提示我们，询问是否确认删除，我们直接点击 Execute即可。</li>
</ul>
<hr>
<h2 id="1-4-DQL-Data-Query-Language-：用于查询数据"><a href="#1-4-DQL-Data-Query-Language-：用于查询数据" class="headerlink" title="1.4 DQL(Data Query Language)：用于查询数据"></a>1.4 DQL(Data Query Language)：用于查询数据</h2><blockquote>
<p>查询关键字: SELECT</p>
</blockquote>
<h3 id="1-4-1-基本语法"><a href="#1-4-1-基本语法" class="headerlink" title="1.4.1 基本语法"></a>1.4.1 基本语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">	column_list</span><br><span class="line">from </span><br><span class="line">	table_list</span><br><span class="line">where</span><br><span class="line">	条件列表</span><br><span class="line">group by</span><br><span class="line">	分组字段列表</span><br><span class="line">having</span><br><span class="line">	分组后条件列表</span><br><span class="line">order by</span><br><span class="line">	排序字段列表</span><br><span class="line">limit</span><br><span class="line">	分页参数</span><br></pre></td></tr></table></figure>

<ul>
<li>基本查询（不带任何条件） </li>
<li>条件查询（where） </li>
<li>聚合函数（count、max、min、avg、sum） </li>
<li>分组查询（group by） </li>
<li>排序查询（order by） </li>
<li>分页查询（limit）</li>
</ul>
<h3 id="1-4-2-基础查询"><a href="#1-4-2-基础查询" class="headerlink" title="1.4.2 基础查询"></a>1.4.2 基础查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;查询多个字段</span><br><span class="line">	- select column1,2... from table_name; </span><br><span class="line">	- select * from table_name;</span><br><span class="line">	~注意 : * 号代表查询所有字段，在实际开发中尽量少用（不直观、影响效率）。</span><br><span class="line">b&gt;字段设置别名</span><br><span class="line">	select column 1 [as other_name_1],column 2 [as other_name_2]...from table_name;</span><br><span class="line">c&gt;去除重复记录</span><br><span class="line">	select distinct column_list from table_name;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-3-条件查询"><a href="#1-4-3-条件查询" class="headerlink" title="1.4.3 条件查询"></a>1.4.3 条件查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;语法</span><br><span class="line">	select column_list from table_name where 条件列表;</span><br><span class="line">b&gt;条件</span><br><span class="line">	比较运算符：&gt;,&gt; =,&lt;,&lt; =,=,&lt;&gt;或! =,between...and...,in(...),like 占位符(_匹配单个字符, %匹配任意个字符),is null</span><br><span class="line">	逻辑运算符：and或&amp;&amp;，or或||，not或！</span><br></pre></td></tr></table></figure>

<h3 id="1-4-4-聚合函数"><a href="#1-4-4-聚合函数" class="headerlink" title="1.4.4 聚合函数"></a>1.4.4 聚合函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;介绍</span><br><span class="line">	将一列数据作为一个整体，进行纵向计算 。</span><br><span class="line">b&gt;常见的聚合函数</span><br><span class="line">	count(统计数量),max,min,avg,sum</span><br><span class="line">c&gt;语法</span><br><span class="line">	select 聚合函数（字段列表column_list） from table_name;</span><br><span class="line">	*注意 : NULL值是不参与所有聚合函数运算的。*</span><br></pre></td></tr></table></figure>

<h3 id="1-4-5-分组查询"><a href="#1-4-5-分组查询" class="headerlink" title="1.4.5 分组查询"></a>1.4.5 分组查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;语法</span><br><span class="line">	select column_list from table_name [where 条件] group by 分组字段名[having 分组后过滤条件];</span><br><span class="line">b&gt;where与having区别</span><br><span class="line">	- 执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组</span><br><span class="line">之后对结果进行过滤。</span><br><span class="line">	- 判断条件不同：where不能对聚合函数进行判断，而having可以。</span><br></pre></td></tr></table></figure>

<ul>
<li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</li>
<li>执行顺序: where&gt;聚合函数&gt;having 。 </li>
<li>支持多字段分组,具体语法为:group by columnA,columnB</li>
</ul>
<h3 id="1-4-6-排序查询"><a href="#1-4-6-排序查询" class="headerlink" title="1.4.6 排序查询"></a>1.4.6 排序查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;语法</span><br><span class="line">	select column_list from table_name order by column1 排序方式1,column2 排序方式2;</span><br><span class="line">b&gt;排序方式</span><br><span class="line">	- asc:升序（默认）</span><br><span class="line">	- desc:降序</span><br></pre></td></tr></table></figure>

<ul>
<li>如果是升序, 可以不指定排序方式ASC;</li>
<li>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 ;</li>
</ul>
<h3 id="1-4-7-分页查询"><a href="#1-4-7-分页查询" class="headerlink" title="1.4.7 分页查询"></a>1.4.7 分页查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;select column_list from table_name limit 起始索引,查询记录数;</span><br></pre></td></tr></table></figure>

<ul>
<li>起始索引从0开始，起始索引 &#x3D; （查询页码 - 1）* 每页显示记录数。</li>
<li>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。</li>
<li>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10。</li>
</ul>
<h3 id="1-4-8-执行顺序"><a href="#1-4-8-执行顺序" class="headerlink" title="1.4.8 执行顺序"></a>1.4.8 执行顺序</h3><blockquote>
<p>DQL语句的执行顺序为：from … where … group by … having … select … order by … limit …</p>
</blockquote>
<hr>
<h2 id="1-5-DCL（Data-Control-Language）：用于控制数据库访问权限"><a href="#1-5-DCL（Data-Control-Language）：用于控制数据库访问权限" class="headerlink" title="1.5 DCL（Data Control Language）：用于控制数据库访问权限"></a>1.5 DCL（Data Control Language）：用于控制数据库访问权限</h2><h3 id="1-5-1-管理用户"><a href="#1-5-1-管理用户" class="headerlink" title="1.5.1 管理用户"></a>1.5.1 管理用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;查询用户</span><br><span class="line">	select * from mysql.user;</span><br><span class="line">	*其中 Host代表当前用户访问的主机, 如果为localhost, 仅代表只能够在当前本机访问，是不可以</span><br><span class="line">远程访问的。 User代表的是访问该数据库的用户名。在MySQL中需要通过Host和User来唯一标识一</span><br><span class="line">个用户。*</span><br><span class="line">b&gt;创建用户</span><br><span class="line">	create user &#x27;用户名&#x27;@&#x27;主机名&#x27; ide tified by &#x27;密码&#x27;</span><br><span class="line">c&gt;修改用户密码</span><br><span class="line">	alter user &#x27;用户名&#x27;@&#x27;主机名&#x27; identified with mysql_native_password by &#x27;新密码&#x27;;</span><br><span class="line">d&gt;删除用户</span><br><span class="line">	drop user &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>

<ul>
<li>在MySQL中需要通过用户名@主机名的方式，来唯一标识一个用户。</li>
<li>主机名可以使用 % 通配。</li>
<li>这类SQL开发人员操作的比较少，主要是DBA（ Database Administrator 数据库 管理员）使用。</li>
</ul>
<h3 id="1-5-2-权限控制"><a href="#1-5-2-权限控制" class="headerlink" title="1.5.2 权限控制"></a>1.5.2 权限控制</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&gt;查询权限</span><br><span class="line">	show grants for &#x27;用户名&#x27;@&#x27;主机名&#x27;</span><br><span class="line">b&gt;授予权限</span><br><span class="line">	grant 权限列表 on 数据库名.表名 to 用户名&#x27;@&#x27;主机名&#x27;</span><br><span class="line">c&gt;撤销权限</span><br><span class="line">	revoke 权限列表 on 数据库名.表名 from 用户名&#x27;@&#x27;主机名&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li>多个权限之间，使用逗号分隔</li>
<li>授权时， 数据库名和表名可以使用 * 进行通配，代表所有。</li>
</ul>
<hr>
<h1 id="2-函数"><a href="#2-函数" class="headerlink" title="2.函数"></a>2.函数</h1><p>MySQL中的函数主要分为以下四类： 字符串函数、数值函数、日期函数、流程函数。</p>
<hr>
<h2 id="2-1-字符串函数"><a href="#2-1-字符串函数" class="headerlink" title="2.1 字符串函数"></a>2.1 字符串函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">concate(s1,s2,...s~n~):字符串拼接，将S1，S2，... Sn拼接成一个字符串</span><br><span class="line">lower(str):将字符串str全部转为小写</span><br><span class="line">upper(str):upper(str):将字符串str全部转为大写</span><br><span class="line">lpad(str,n,pad):左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</span><br><span class="line">rpad(str,n,pad):右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</span><br><span class="line">trim(str):去掉字符串头部和尾部的空格</span><br><span class="line">substring(str,start,len):返回从字符串str从start位置起的len个长度的字符串</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-2-数值函数"><a href="#2-2-数值函数" class="headerlink" title="2.2 数值函数"></a>2.2 数值函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ceil(x):向上取整</span><br><span class="line">floor(x):向下取整</span><br><span class="line">mod(x):返回x/y的模</span><br><span class="line">rand():返回0~1内的随机数</span><br><span class="line">round(x,y):求参数x的四舍五入的值，保留y位小数</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-3-日期函数"><a href="#2-3-日期函数" class="headerlink" title="2.3 日期函数"></a>2.3 日期函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curdate():返回当前日期</span><br><span class="line">curtime():返回当前时间</span><br><span class="line">now():返回当前日期和时间</span><br><span class="line">year(date):获取指定date的年份</span><br><span class="line">month(date):获取指定date的月份</span><br><span class="line">day(date):获取指定date的日期</span><br><span class="line">date_add(date,interval,exprtype):返回一个日期/时间值加上一个时间间隔expr后的时间值</span><br><span class="line">datediff(date1,date2):返回起始时间date1 和 结束时间date2之间的天数</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-4-流程函数"><a href="#2-4-流程函数" class="headerlink" title="2.4 流程函数"></a>2.4 流程函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(value,t,f):如果value为true，则返回t，否则返回f</span><br><span class="line">ifnull(value1,value2):如果value1不为空，返回value1，否则返回value2</span><br><span class="line">case when [vall] then [res1]...else [default] end:如果val1为true，返回res1，... 否则返回default默认值</span><br><span class="line">case [expr] when [vall] then [res1]...else [default]end:如果expr的值等于val1，返回res1，... 否则返回default默认值</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="3-约束"><a href="#3-约束" class="headerlink" title="3.约束"></a>3.约束</h1><hr>
<h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><ul>
<li><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。 </p>
</li>
<li><p>目的：保证数据库中数据的正确、有效性和完整性。</p>
</li>
</ul>
<p><strong>约束：</strong></p>
<ol>
<li>非空约束:not null</li>
<li>唯一约束:unique</li>
<li>主键约束:primary key</li>
<li>默认约束:default</li>
<li>检查约束:check</li>
<li>外键约束:foreign key</li>
</ol>
<p><em>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。</em></p>
<hr>
<h2 id="3-2-外键约束"><a href="#3-2-外键约束" class="headerlink" title="3.2 外键约束"></a>3.2 外键约束</h2><ul>
<li>外键：用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</li>
</ul>
<h3 id="3-2-1-语法"><a href="#3-2-1-语法" class="headerlink" title="3.2.1 语法"></a>3.2.1 语法</h3><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">a&gt;添加外键</span><br><span class="line">	<span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    ...</span><br><span class="line">    [constraint] [外键名称] <span class="keyword">foreign</span> <span class="keyword">key</span> (外键字段名) <span class="keyword">references</span> 主表 (主表列名)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> constraint 外键名称 <span class="keyword">foreign</span> <span class="keyword">key</span> (外键字段名) <span class="keyword">references</span> 主表 (主表列名) ;</span><br><span class="line">b&gt;删除外键</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> <span class="keyword">foreign</span> <span class="keyword">key</span> key_name;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-删除-更新行为"><a href="#3-2-2-删除-更新行为" class="headerlink" title="3.2.2 删除&#x2F;更新行为"></a>3.2.2 删除&#x2F;更新行为</h3><table>
<thead>
<tr>
<th>行为</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>no action</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新。 (与 RESTRICT 一致) 默认行为</td>
</tr>
<tr>
<td>restrict</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不 允许删除&#x2F;更新。 (与 NO ACTION 一致) 默认行为</td>
</tr>
<tr>
<td>cascade</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则 也删除&#x2F;更新外键在子表中的记录。</td>
</tr>
<tr>
<td>set null</td>
<td>当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表 中该外键值为null（这就要求该外键允许取null）。</td>
</tr>
<tr>
<td>set default</td>
<td>父表有变更时，子表将外键列设置成一个默认的值 (Innodb不支持)</td>
</tr>
</tbody></table>
<p><em><strong>具体语法</strong></em></p>
<ul>
<li>alter table table_name add constraint 外键鸣潮 foreign key (外键字段) references 主表名 (主表字段名) on update cascade on delete cascade；</li>
</ul>
<hr>
<h1 id="4-多表查询"><a href="#4-多表查询" class="headerlink" title="4 多表查询"></a>4 多表查询</h1><hr>
<h2 id="4-1-多表关系"><a href="#4-1-多表关系" class="headerlink" title="4.1 多表关系"></a>4.1 多表关系</h2><ul>
<li>一对多(多对一): 在多的一方建立外键，指向一的一方的主键</li>
<li>多对多:建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</li>
<li>一对一:在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(unique)</li>
</ul>
<hr>
<h2 id="4-2-概述"><a href="#4-2-概述" class="headerlink" title="4.2 概述"></a>4.2 概述</h2><ul>
<li><p>多表查询就是指从多张表中查询数据。</p>
<p><strong>笛卡尔积: 笛卡尔乘积是指在数学中，两个集合A集合 和 B集合的所有组合情况。</strong></p>
</li>
</ul>
<hr>
<h2 id="4-3-分类"><a href="#4-3-分类" class="headerlink" title="4.3 分类"></a>4.3 分类</h2><ul>
<li><p>连接查询 </p>
<ul>
<li>内连接：相当于查询A、B交集部分数据 </li>
<li>外连接： <ul>
<li>左外连接：查询左表所有数据，以及两张表交集部分数据 </li>
<li>右外连接：查询右表所有数据，以及两张表交集部分数据 </li>
<li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li>
</ul>
</li>
</ul>
</li>
<li><p>子查询</p>
</li>
</ul>
<hr>
<h2 id="4-4-内连接"><a href="#4-4-内连接" class="headerlink" title="4.4 内连接"></a>4.4 内连接</h2><ul>
<li>内连接的语法分为两种: 隐式内连接、显式内连接。</li>
</ul>
<ol>
<li>隐式内连接</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> , 表<span class="number">2</span> <span class="keyword">where</span> 条件 ... ;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>显式内连接</li>
</ol>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> [ <span class="keyword">inner</span> ] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件 ... ;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-5-外连接"><a href="#4-5-外连接" class="headerlink" title="4.5 外连接"></a>4.5 外连接</h2><ul>
<li>外连接分为两种，分别是：左外连接 和 右外连接。</li>
</ul>
<ol>
<li>左外连接</li>
</ol>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">left</span> [ <span class="keyword">outer</span> ] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件 ... ;</span><br></pre></td></tr></table></figure>

<p>左外连接相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据。</p>
<ol start="2">
<li>右外连接</li>
</ol>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">right</span> [ <span class="keyword">outer</span> ] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件 ... ;</span><br></pre></td></tr></table></figure>

<p>右外连接相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据。</p>
<blockquote>
<p>左外连接和右外连接是可以相互替换的，只需要调整在连接查询时SQL中，表结构的先后顺序就可以了。而我们在日常开发使用时，更偏向于左外连接。</p>
</blockquote>
<hr>
<h2 id="4-6-自连接"><a href="#4-6-自连接" class="headerlink" title="4.6 自连接"></a>4.6 自连接</h2><h3 id="4-6-1-自连接查询，顾名思义，就是自己连接自己，也就是把一张表连接查询多次。"><a href="#4-6-1-自连接查询，顾名思义，就是自己连接自己，也就是把一张表连接查询多次。" class="headerlink" title="4.6.1 自连接查询，顾名思义，就是自己连接自己，也就是把一张表连接查询多次。"></a>4.6.1 自连接查询，顾名思义，就是自己连接自己，也就是把一张表连接查询多次。</h3><p>自连接的查询语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">select</span> 字段列表 <span class="selector-tag">from</span> 表<span class="selector-tag">A</span> 别名<span class="selector-tag">A</span> join 表<span class="selector-tag">A</span> 别名<span class="selector-tag">B</span> on 条件 ... ;</span><br></pre></td></tr></table></figure>

<p>而对于自连接查询，可以是内连接查询，也可以是外连接查询。</p>
<blockquote>
<p>在自连接查询中，必须要为表起别名，要不然我们不清楚所指定的条件、返回的字段，到底 是哪一张表的字段。</p>
</blockquote>
<h3 id="4-6-2-联合查询"><a href="#4-6-2-联合查询" class="headerlink" title="4.6.2 联合查询"></a>4.6.2 联合查询</h3><ul>
<li>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">select</span> 字段列表 <span class="selector-tag">from</span> 表<span class="selector-tag">A</span> ...</span><br><span class="line">union <span class="selector-attr">[ all ]</span></span><br><span class="line"><span class="selector-tag">select</span> 字段列表 <span class="selector-tag">from</span> 表<span class="selector-tag">B</span> ....;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。 </p>
<p>union all 会将全部的数据直接合并在一起，union 会对合并之后的数据去重。</p>
</blockquote>
<p><strong>union all查询出来的结果，仅仅进行简单的合并，并未去重。</strong></p>
<p><strong>union 联合查询，会对查询出来的结果进行去重处理。</strong></p>
<hr>
<h2 id="4-7-子查询"><a href="#4-7-子查询" class="headerlink" title="4.7 子查询"></a>4.7 子查询</h2><h3 id="4-7-1-概述"><a href="#4-7-1-概述" class="headerlink" title="4.7.1 概述"></a>4.7.1 概述</h3><ul>
<li><p>概念：SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> column1 = ( <span class="keyword">SELECT</span> column1 <span class="keyword">FROM</span> t2 );</span><br></pre></td></tr></table></figure>

<p>子查询外部的语句可以是INSERT &#x2F; UPDATE &#x2F; DELETE &#x2F; SELECT 的任何一个。</p>
</li>
<li><p>分类</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">根据子查询结果不同，分为：</span><br><span class="line">A. 标量子查询（子查询结果为单个值）</span><br><span class="line">B. 列子查询<span class="comment">(子查询结果为一列)</span></span><br><span class="line">C. 行子查询<span class="comment">(子查询结果为一行)</span></span><br><span class="line">D. 表子查询<span class="comment">(子查询结果为多行多列)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">根据子查询位置，分为：</span><br><span class="line"><span class="selector-tag">A</span>. WHERE之后 </span><br><span class="line"><span class="selector-tag">B</span>. <span class="selector-tag">FROM</span>之后 </span><br><span class="line">C. <span class="selector-tag">SELECT</span>之后</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="4-7-2-标量子查询"><a href="#4-7-2-标量子查询" class="headerlink" title="4.7.2 标量子查询"></a>4.7.2 标量子查询</h3><blockquote>
<p>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式，这种子查询称为标量子查询。 </p>
<p>常用的操作符：&#x3D; &lt;&gt; &gt; &gt;&#x3D; &lt; &lt;&#x3D; </p>
</blockquote>
<hr>
<h3 id="4-7-3-列子查询"><a href="#4-7-3-列子查询" class="headerlink" title="4.7.3 列子查询"></a>4.7.3 列子查询</h3><blockquote>
<p>子查询返回的结果是一列（可以是多行），这种子查询称为列子查询。 </p>
<p>常用的操作符：IN 、NOT IN 、 ANY 、SOME 、 AL</p>
</blockquote>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>IN</td>
<td>在指定的集合范围之内，多选一</td>
</tr>
<tr>
<td>NOT IN</td>
<td>不在指定的集合范围之内</td>
</tr>
<tr>
<td>ANY</td>
<td>子查询返回列表中，有任意一个满足即可</td>
</tr>
<tr>
<td>SOME</td>
<td>与ANY等同，使用SOME的地方都可以使用</td>
</tr>
<tr>
<td>ANY ALL</td>
<td>子查询返回列表的所有值都必须满足</td>
</tr>
</tbody></table>
<hr>
<h3 id="4-7-4-行子查询"><a href="#4-7-4-行子查询" class="headerlink" title="4.7.4 行子查询"></a>4.7.4 行子查询</h3><blockquote>
<p>子查询返回的结果是一行（可以是多列），这种子查询称为行子查询。 </p>
<p>常用的操作符：&#x3D; 、&lt;&gt; 、IN 、NOT IN</p>
</blockquote>
<hr>
<h3 id="4-7-5-表子查询"><a href="#4-7-5-表子查询" class="headerlink" title="4.7.5 表子查询"></a>4.7.5 表子查询</h3><blockquote>
<p>子查询返回的结果是多行多列，这种子查询称为表子查询。 </p>
<p>常用的操作符：IN</p>
</blockquote>
<hr>
<h1 id="5-事务"><a href="#5-事务" class="headerlink" title="5 事务"></a>5 事务</h1><blockquote>
<p>在 MySQL 中，<strong>事务</strong>（Transaction）是指一组操作，这些操作要么全部成功，要么全部失败，以确保数据的完整性和一致性。事务通常用于处理多步骤的操作，如银行转账、订单处理等，保证系统在遇到错误时不会产生不一致的数据。事务具有四个关键的性质，简称为 <strong>ACID</strong>（原子性、一致性、隔离性、持久性）。</p>
</blockquote>
<hr>
<h2 id="5-1-事务的四大特性（ACID）"><a href="#5-1-事务的四大特性（ACID）" class="headerlink" title="5.1 事务的四大特性（ACID）"></a>5.1 事务的四大特性（ACID）</h2><ol>
<li><p><strong>原子性 (Atomicity)</strong></p>
<ul>
<li>原子性意味着事务中的所有操作要么全部完成，要么完全不执行。事务中任何一个操作失败，整个事务都会回滚到开始的状态，保证不会有部分成功的操作。</li>
<li>举例：如果你在银行系统中从账户A转移100元到账户B，要么A减少100元，B增加100元，要么两者都不发生变化。</li>
</ul>
</li>
<li><p><strong>一致性 (Consistency)</strong></p>
<ul>
<li>一致性确保在事务开始前和结束后，数据库都保持一致的状态。换句话说，事务执行前后的数据状态应符合所有的约束条件和规则。</li>
<li>举例：在银行转账过程中，不可能出现资金“凭空消失或增加”的情况，即使事务执行失败，数据依旧符合业务规则。</li>
</ul>
</li>
<li><p><strong>隔离性 (Isolation)</strong></p>
<ul>
<li>隔离性指多个事务并发执行时，它们之间相互独立，一个事务的执行不会被其他事务的中间状态所影响。隔离性通过不同的隔离级别实现（见下文）。</li>
<li>举例：当两个事务同时对同一账户操作，一个存款，一个取款，事务彼此隔离，取款操作不会读取到存款操作的中间数据。</li>
</ul>
</li>
<li><p><strong>持久性 (Durability)</strong></p>
<ul>
<li>持久性保证事务一旦提交，数据的修改将永久保存在数据库中，即使发生系统崩溃，数据也不会丢失。MySQL 使用日志记录机制来确保数据的持久性。</li>
<li>举例：即使在银行系统崩溃或断电后，已成功提交的转账操作也不会丢失。</li>
</ul>
</li>
</ol>
<hr>
<h2 id="5-2-事务的操作"><a href="#5-2-事务的操作" class="headerlink" title="5.2 事务的操作"></a>5.2 事务的操作</h2><p>在 MySQL 中，事务的基本操作包含以下几个 SQL 语句：</p>
<ol>
<li><code>START TRANSACTION</code>：开始一个新的事务。</li>
<li><code>COMMIT</code>：提交事务，保存所有操作到数据库中。</li>
<li><code>ROLLBACK</code>：回滚事务，撤销当前事务中的所有操作。</li>
<li><code>SAVEPOINT</code>：设置事务中的保存点，可以回滚到这个点而不是回滚整个事务。</li>
<li><code>SET AUTOCOMMIT</code>：设置自动提交模式，默认 MySQL 是自动提交的，每条语句都会自动作为一个事务提交。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开始事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="comment">-- 第一步：从账户A扣除100元</span></span><br><span class="line"><span class="keyword">update</span> accounts <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">where</span> account_id <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="comment">-- 第二步：给账户B增加100元</span></span><br><span class="line"><span class="keyword">update</span> accounts <span class="keyword">set</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">where</span> account_id <span class="operator">=</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>

<p>如果在 <code>COMMIT</code> 之前有任何错误，你可以用 <code>ROLLBACK</code> 撤销操作：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 出现错误，回滚事务</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-4-并发事务问题"><a href="#5-4-并发事务问题" class="headerlink" title="5.4 并发事务问题"></a>5.4 并发事务问题</h2><ol>
<li><p><strong>赃读：一个事务读到另外一个事务还没有提交的数据。</strong></p>
<ul>
<li>比如B读取到了A未提交的数据。</li>
</ul>
</li>
<li><p><strong>不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</strong></p>
<ul>
<li>事务A两次读取同一条记录，但是读取到的数据却是不一样的。</li>
</ul>
</li>
<li><p><strong>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据 已经存在，好像出现了 “幻影”。</strong></p>
</li>
</ol>
<hr>
<h2 id="5-4-事务的隔离级别"><a href="#5-4-事务的隔离级别" class="headerlink" title="5.4 事务的隔离级别"></a>5.4 事务的隔离级别</h2><p>为了支持并发事务执行，MySQL 提供了四种隔离级别，每种级别在数据一致性和性能之间做了不同的权衡。常见的问题包括：脏读（Dirty Read）、不可重复读（Non-repeatable Read）、幻读（Phantom Read）。</p>
<ol>
<li><p><strong>read uncommitted</strong>（读未提交）</p>
<ul>
<li>事务可以读到其他事务未提交的数据，可能导致脏读。</li>
<li>数据不一致风险最大，但性能最好。</li>
</ul>
</li>
<li><p><strong>read committed</strong>（读已提交）</p>
<ul>
<li>事务只能读到其他事务已提交的数据，避免了脏读，但可能会出现不可重复读。</li>
<li>这是大多数数据库（如 Oracle）的默认隔离级别。</li>
</ul>
</li>
<li><p><strong>repeatable read</strong>（可重复读）</p>
<ul>
<li>事务在开始后，无论其他事务是否提交，当前事务多次读取的结果始终一致，避免了不可重复读。</li>
<li>这是 MySQL 的默认隔离级别。</li>
</ul>
</li>
<li><p><strong>serializable</strong>（可串行化）</p>
<ul>
<li>最高级别的隔离性，强制事务串行执行，避免所有并发问题，包括幻读。</li>
<li>性能最差，因为它严重限制并发。</li>
</ul>
</li>
</ol>
<p><em><strong>查询隔离级别</strong></em></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="symbol">@transaction_isolation</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p><em><strong>设置事务隔离级别</strong></em></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> [sesion|<span class="keyword">global</span>] <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> &#123;<span class="keyword">read</span> <span class="keyword">uncommitted</span>&#125; | <span class="keyword">read</span> <span class="keyword">committed</span> | <span class="keyword">repeatable</span> <span class="keyword">read</span> | <span class="keyword">serializable</span>&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：事务隔离级别越高，数据越安全，但是性能越低。</p>
</blockquote>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>30分钟学会Vue</title>
    <url>/posts/VueNote/</url>
    <content><![CDATA[<h1 id="核心语法"><a href="#核心语法" class="headerlink" title="核心语法"></a>核心语法</h1><p><img src="/posts/VueNote/0423fa51789c2f54ed5f8784310c5aa9a3f2f3f1.jpg" alt="0423fa51789c2f54ed5f8784310c5aa9a3f2f3f1" loading="lazy"></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://v2.cn.vuejs.org/v2/guide/">介绍 — Vue.js (https://v2.cn.vuejs.org/v2/guide/)</a></p>
<p>渐进式 JavaScript 框架</p>
<ul>
<li>减少要编写Dom操作（内置到了框架之中）</li>
<li>数据与页面的呈现分离。降低了代码耦合度</li>
<li>支持组件化开发。</li>
</ul>
<h3 id="1、简化DOM操作"><a href="#1、简化DOM操作" class="headerlink" title="1、简化DOM操作"></a>1、简化DOM操作</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> value=<span class="string">&#x27;这是内容a&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 编写Dom操作</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>).<span class="property">textContent</span>=value;</span></span><br><span class="line"><span class="language-javascript">    value = <span class="string">&#x27;新内容ya&#x27;</span> <span class="comment">// 编写Dom操作</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>).<span class="property">textContent</span>=value;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而 Vue 会简化DOM操作</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;1+2+3&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;1&gt;2?&#x27;对&#x27;:&#x27;错&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> <span class="comment">// Vue会简化DOM操作。</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1,响应式数据与插值表达式。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所谓的响应式数据指的是：我们在Vue内部对响应式数据进行操作，它就会自动地更新到视图中(界面中)。就可以省去大量的DOM操作了。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以直接通过Vue实例访问data。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&quot;#box&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>:<span class="string">&quot;标题1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">content</span>:<span class="string">&quot;内容1&quot;</span> </span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">   &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-计算属性"><a href="#2-计算属性" class="headerlink" title="2.计算属性"></a>2.计算属性</h3><blockquote>
<p>起因：模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。复杂运算：在模板中放入太多的逻辑会让模板过重且难以维护。</p>
<ul>
<li><p>对于任何复杂逻辑，就应该使用<strong>计算属性</strong>。</p>
</li>
<li><p>像绑定普通 property 一样在模板中绑定计算属性。</p>
</li>
</ul>
</blockquote>
<p> 具有缓存性。优化性能。</p>
<ul>
<li>书写的时候可以为1个函数。</li>
</ul>
<blockquote>
<p>第一次计算的时候它会将计算结果在内部进行缓存。只能是响应式数据变。如果在第二次计算的时候响应式数据没有变，意味着整体结果也不变，就不再做计算了，拿到之前计算过的结果直接用。</p>
</blockquote>
<p><em>注意：不能加括号因为它叫计算属性。</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.计算属性  书写的时候可以为1个函数。  </span></span><br><span class="line">  <span class="attr">computed</span>:&#123;</span><br><span class="line">        <span class="title function_">outputContent</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;computed执行了&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;标题为2&#x27;</span>+<span class="variable language_">this</span>.<span class="property">title</span>+<span class="string">&#x27;, &#x27;</span>+<span class="string">&#x27;内容为&#x27;</span>+<span class="variable language_">this</span>.<span class="property">content</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>书写的时候是函数形式，调用的时候是不带括号的，作为属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;outputContent&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;outputContent&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、侦听器"><a href="#3、侦听器" class="headerlink" title="3、侦听器"></a>3、侦听器</h3><blockquote>
<p>Vue中：当你改数据的时候，会自动触发一个叫做修改页面内容的一个操作。</p>
</blockquote>
<p>侦听器，它就是监听你某个数据有没有变化。</p>
<blockquote>
<p>注意：你侦听的数据必须是响应式的。</p>
</blockquote>
<ul>
<li><p>有可能你希望在某个数据变化的时候并不仅仅是更新页面，同时改点别的。</p>
</li>
<li><p>例如侦听title的变化，</p>
<ul>
<li>title要作为一个方法名设置在侦听器的内部。</li>
<li>然后这里边接受两个值，一个是新值一个是旧值。(<em>newValue</em>, <em>oldValue</em>)</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如侦听title的变化，title要作为一个方法名设置在侦听器的内部。然后这里边接受两个值，一个是新值一个是旧值。</span></span><br><span class="line">   <span class="attr">watch</span>:&#123; <span class="comment">//注意：你侦听的数据必须是响应式的。</span></span><br><span class="line">            <span class="title function_">title</span>(<span class="params">newValue, oldValue</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue, oldValue);   </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>控制台：vm.title&#x3D;22222</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、指令"><a href="#4、指令" class="headerlink" title="4、指令"></a>4、指令</h3><blockquote>
<p>详见：前端Vue-heima.md文件。</p>
</blockquote>
<p>v-text设置标签的内容</p>
<p>v-html设置innerHTML（会解析html结构）</p>
<p>会覆盖原始内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 内容指令  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 渲染指令 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;aitem in arr&quot;</span>&gt;</span>&#123;&#123;aitem&#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- item是值：aa, bb, cc, dd 。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in obj&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- item是值：10、20、30。--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--index是属性：a、b、c。key是下标：1、2、3。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index,key) in obj&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;-&#123;&#123;index&#125;&#125;-&#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;bool&quot;</span>&gt;</span> v-show内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;bool&quot;</span>&gt;</span> v-if内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 属性指令 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span> 这是内容 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span> 这是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件指令 --&gt;</span>  <span class="comment">&lt;!-- 点击事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;output&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;output&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 表单指令：表单输入绑定,会同步更新 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;inputV&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;inputV&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- input的一个双向绑定，它视图变了，会更新底部数据 。</span></span><br><span class="line"><span class="comment">    p标签是由数据驱动的，数据变了，它会自动更新视图。--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&quot;#box&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">htmlContent</span>:<span class="string">&#x27;看&lt;span&gt;span内容&lt;/span&gt;这里&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">arr</span>:[<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>,<span class="string">&#x27;dd&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//JS中的&#123;&#125; 大括号，表示定义一个对象，有成对的属性和值。  </span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">obj</span>:&#123;<span class="attr">a</span>:<span class="number">10</span>, <span class="attr">b</span>:<span class="number">20</span>, <span class="attr">c</span>:<span class="number">30</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bool</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>:<span class="string">&#x27;标题文本&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">inputV</span>:<span class="string">&quot;默认文本&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">output</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;method执行了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;       </span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、修饰符"><a href="#5、修饰符" class="headerlink" title="5、修饰符"></a>5、修饰符</h3><blockquote>
<p>建议看：官方文档中相应的部分。</p>
</blockquote>
<p>修饰符是用来<strong>修饰指令的</strong> 。写在指令的最后面。</p>
<h4 id="表单输入绑定的"><a href="#表单输入绑定的" class="headerlink" title="表单输入绑定的"></a>表单输入绑定的</h4><p><a href="https://v2.cn.vuejs.org/v2/guide/forms.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6">forms.html#修饰符</a></p>
<p>1)：<a href="https://v2.cn.vuejs.org/v2/guide/forms.html#trim"><code>.trim</code></a>   trim的修饰符（trim是用来去除内容两端空格的）</p>
<p>自动过滤用户输入的首尾空白字符，给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2)：<a href="https://v2.cn.vuejs.org/v2/guide/forms.html#lazy"><code>.lazy</code></a></p>
<p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 。可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件<em>之后</em>进行同步：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3)：<a href="https://v2.cn.vuejs.org/v2/guide/forms.html#number"><code>.number</code></a></p>
<p>自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span>   </span><br></pre></td></tr></table></figure>

<h4 id="事件处理的"><a href="#事件处理的" class="headerlink" title="事件处理的"></a>事件处理的</h4><ul>
<li><p><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">events.html#事件修饰符</a></p>
</li>
<li><p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p>
<ul>
<li><code>.stop</code></li>
<li><code>.prevent</code></li>
<li><code>.capture</code></li>
<li><code>.self</code></li>
<li><code>.once</code></li>
<li><code>.passive</code></li>
</ul>
</li>
<li><p><a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">events.html#按键修饰符</a></p>
<ul>
<li></li>
<li><pre><code class="html">  
  &lt;input @keyup.enter=&quot;submit&quot;&gt;  只有在 `key` 是 `Enter` 时调用 `vm.submit()方法` 
  &lt;input @keyup.page-down=&quot;onPageDown&quot;&gt; 处理函数只会在 $event.key 等于 PageDown 时被调用。
  <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-attr">[系统修饰键]</span>(<span class="attribute">https</span>:<span class="comment">//v2.cn.vuejs.org/v2/guide/events.html#系统修饰键)</span></span><br><span class="line"></span><br><span class="line">  可以用如下修饰符来实现仅在**按下相应按键时**才触发鼠标或键盘事件的监听器。</span><br><span class="line"></span><br><span class="line">  - <span class="built_in">`.ctrl`</span></span><br><span class="line">- <span class="built_in">`.alt`</span></span><br><span class="line">  - <span class="built_in">`.shift`</span></span><br><span class="line">  - <span class="built_in">`.meta`</span></span><br><span class="line">  </span><br><span class="line">  &gt; 注意：在 Mac 系统键盘上，meta 对应 command 键 (⌘)。在 Windows 系统键盘 meta 对应 Windows 徽标键 (⊞)。</span><br><span class="line">  &gt;</span><br><span class="line">&gt; 在 Sun 操作系统键盘上，meta 对应实心宝石键 (◆)。在其他特定键盘上，尤其在 MIT 和 Lisp 机器的键盘、以及其后继产品，比如 Knight 键盘、space-cadet 键盘，meta 被标记为“META”。在 Symbolics 键盘上，meta 被标记为“META”或者“Meta”。</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">## 生命周期钩子</span><br><span class="line"></span><br><span class="line">[Vue 实例 — 实例生命周期钩子](<span class="attribute">https</span>:<span class="comment">//v2.cn.vuejs.org/v2/guide/instance.html#实例生命周期钩子)</span></span><br><span class="line"></span><br><span class="line">[API — 选项-生命周期钩子](<span class="attribute">https</span>:<span class="comment">//v2.cn.vuejs.org/v2/api/#选项-生命周期钩子)</span></span><br><span class="line"></span><br><span class="line">mounted和created的区别</span><br><span class="line"></span><br><span class="line">- <span class="attribute">created</span>:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。</span><br><span class="line"></span><br><span class="line">- <span class="attribute">mounted</span>:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。</span><br><span class="line">  - 通常是为 methods 函数提前定义（ 类似提前声明变量 进入页面内容全部**渲染完成后自动引函数**）。</span><br><span class="line"></span><br><span class="line"># 脚手架Vue CLI</span><br><span class="line"></span><br><span class="line">[介绍 | Vue CLI (vuejs.org)](<span class="attribute">https</span>:<span class="comment">//cli.vuejs.org/zh/guide/)</span></span><br><span class="line"></span><br><span class="line">Vue CLI是Vue官方去基于Webpack打造的脚手架工具,</span><br><span class="line"></span><br><span class="line">脚手架内置了很多模板和工具，可以让我们快速进行Vue的项目创建。</span><br><span class="line"></span><br><span class="line">我们可以通过一些选项的方式去勾选，要使用哪些扩展插件。</span><br><span class="line"></span><br><span class="line">## 安装</span><br><span class="line"></span><br><span class="line">首先需要安装node.js</span><br><span class="line"></span><br><span class="line">&gt; <span class="attribute">C</span>:\Users\ccdd&gt;node -v</span><br><span class="line">&gt; v16.<span class="number">20.2</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="attribute">C</span>:\Users\ccdd&gt;npm --version</span><br><span class="line">&gt; <span class="number">8.19</span>.<span class="number">4</span></span><br><span class="line"></span><br><span class="line">&gt; PS <span class="attribute">D</span>:\soft\develop\idea\pros\my\qianlearn\vuelearn\main\wuyou\vueCli&gt; npm --version</span><br><span class="line">&gt; <span class="number">8.19</span>.<span class="number">4</span></span><br><span class="line">&gt; PS <span class="attribute">D</span>:\soft\develop\idea\pros\my\qianlearn\vuelearn\main\wuyou\vueCli&gt; node -v</span><br><span class="line">&gt; v16.<span class="number">20.2</span></span><br><span class="line"></span><br><span class="line">npm工具：node package manager，node包的管理器。</span><br><span class="line"></span><br><span class="line">- 例如我们想去安装Vue CLI，我们可以通过npm install，install可以简写为i 。</span><br><span class="line">  Vue CLI的名称叫做<span class="variable">@vue</span>/cli 。（vue-cli它代表的是Vue CLI的早期版本）</span><br><span class="line">  - <span class="built_in">`- g`</span> 表示的是在node的全局进行安装.(以后创建项目的时候都可以使用这个工具)</span><br><span class="line"></span><br><span class="line">&gt; PS <span class="attribute">D</span>:\soft\develop\idea\pros\my\qianlearn\vuelearn\main\wuyou\vueCli&gt; npm i <span class="variable">@vue</span>/cli -g</span><br><span class="line">&gt; <span class="built_in">`[========================]`</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; PS <span class="attribute">D</span>:\soft\develop\idea\pros\my\qianlearn\vuelearn\main\wuyou\vueCli&gt; vue --version   # 用这个命令来检查其版本是否正确</span><br><span class="line">&gt; <span class="variable">@vue</span>/cli <span class="number">5.0</span>.<span class="number">8</span></span><br><span class="line"></span><br><span class="line">- npm i serve -g</span><br><span class="line">  - serve可以帮助快速地**启动一个静态资源服务器来执行**，来进行**指定目录下的代码运行**。</span><br><span class="line">  - -g那这块我们也是做一个全局的安装</span><br><span class="line"></span><br><span class="line">&gt; 可以把 dist 目录下面的代码，通过serve的方式给做一个运行。</span><br><span class="line"></span><br><span class="line">## 创建</span><br><span class="line"></span><br><span class="line">创建一个Vue项目</span><br><span class="line"></span><br><span class="line"><span class="built_in">``</span>`sh</span><br><span class="line"><span class="number">1</span>、方式一：</span><br><span class="line">vue create hello-world  # vue create + 项目名称</span><br><span class="line">然后选择第<span class="number">2</span>个：Vue2</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、方式二：使用vue ui的方式</span><br><span class="line">UI是user interface（是图形化界面的创建方式）</span><br><span class="line">那么他就会打开一个内置的网页：Vue 项目管理器</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>里面scripts有一些命令，开发中比较常用的是serve（可帮助打开一个Vue脚手架内部的一个静态资源服务器，直接跑起来）</p>
<ul>
<li>npm run + 你即将使用的一个命令。（注意先通过cd 命令来进入到vue project项目的根目录下）</li>
</ul>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">PS D:\soft\develop\idea\pros\my\qianlearn\vuelearn\main\wuyou\vueCli\my-vue-project&gt; npm run serve</span><br><span class="line"></span><br><span class="line">&gt; my-vue-project@<span class="number">0</span>.<span class="number">1</span>.<span class="number">0</span> serve</span><br><span class="line">&gt; vue-cli-service serve</span><br><span class="line"></span><br><span class="line"> INFO  Starting development server...</span><br><span class="line"> DONE  Compiled successfully <span class="keyword">in</span> <span class="number">5079</span>ms                                                                                                                                          <span class="number">14</span>:<span class="number">05</span>:<span class="number">14</span></span><br><span class="line">  App running <span class="built_in">at</span>:</span><br><span class="line">  - Local:   http://localhost:<span class="number">8080</span>/ </span><br><span class="line">  - Network: http://<span class="number">172</span>.<span class="number">16</span>.<span class="number">1</span>.<span class="number">24</span>:<span class="number">8080</span>/</span><br><span class="line"></span><br><span class="line">  Note that the development build is <span class="keyword">not</span> optimized.</span><br><span class="line">  To create a production build, run npm run build.</span><br></pre></td></tr></table></figure>

<p>scripts中,另一个比较常用的是build。build用于代码打包（最后呈现给用户的时候，不可能是很多这么零碎的文件）</p>
<ul>
<li><p>打包通过npm run build来执行</p>
</li>
<li><p>打包后的文件在dist目录下。</p>
<ul>
<li><p>可以把 dist 目录下面的代码，通过serve的方式给做一个运行。</p>
<blockquote>
<p>\my-vue-project&gt; serve dist</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h3><ul>
<li>node_modules ：是项目安装的所有的包都保存在这个位置，这个代码是不需要我们做改动的，它的里面都是一些第三方的工具，只需要用。</li>
<li>public：里边有资源，像index.html、favicon.ico 。这里边保存的是一些不参与编译的资源。</li>
<li>src：它保存的是一些需要参与编译的资源。<ul>
<li>比如像assets，里面有logo.png。这个png在项目里，会被编译为base64格式,进行下展示。（所以打包后的文件夹里不具备图片的）</li>
<li>components：是组件的意思，用来保存所有的自定义组件的功能。（存储更通用的组件）</li>
<li>App.vue：这个是根组件。<ul>
<li>以.vue为后缀的vue文件, 是vue单文件组件。</li>
</ul>
</li>
<li>main.js：这是Vue应用的一个入口文件，会对Vue做一个基础的配置</li>
</ul>
</li>
<li>其它的：babel.config.js：是我们的babel的配置文件。</li>
<li>jsconfig.json 配置文件</li>
<li>vue.config.js 配置文件，指的是Vue CLI的项目的配置文件。里边会有些相关配置的定义，可以做一些配置的更改。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure>

<h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h1><h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><p><a href="https://v2.cn.vuejs.org/v2/guide/components.html">components.html#组件基础</a></p>
<p>组件是可复用的Vue实例。（可以把重复的功能封装为组件。）</p>
<p>使用Vue.component函数去创建一个组件。</p>
<ul>
<li>Vue.component函数<ul>
<li>第一个参数：组件的名称。</li>
<li>第二个参数：以对象的形式去描述一个组件。</li>
<li>！组件的模版必须具备一个根节点。</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 定义一个名为 button-counter 的新组件</span><br><span class="line">Vue.component(&#x27;button-counter&#x27;, &#123;</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p><a href="https://v2.cn.vuejs.org/v2/guide/single-file-components.html">单文件组件 — Vue.js (vuejs.org)</a></p>
<p>组件，它是用来封装页面部分功能的一种方式（可以封装这一块功能的结构、样式和逻辑这么几个部分）。</p>
<ul>
<li>以.vue为后缀的vue文件, 是单文件组件。<ul>
<li>我们的每个.vue单文件组件中 都包含了三个部分：template、script、style 。</li>
<li>每个组件，都是由这独立的三个部分来组成的：结构、样式和逻辑。</li>
<li>不同组件在不同的文件中。每个组件里边内容，也都是独立的。</li>
</ul>
</li>
</ul>
<h2 id="组件怎么使用？"><a href="#组件怎么使用？" class="headerlink" title="组件怎么使用？"></a>组件怎么使用？</h2><blockquote>
<p>以在在vue脚手架创建的项目中为例。</p>
</blockquote>
<p>如：HelloWorld.vue这个组件它在使用的时候，就是在App.vue中去用的。</p>
<ul>
<li><p>第一步：需要在我们当前组件内部，有一个叫做components的配置选项，来进行我们组件的配置。（在这设置了才能使用）</p>
</li>
<li><p>同时也通过import方式做了一个引入。（这是一种模块引用的方式）</p>
<ul>
<li>HelloWorld 引入后：就可在我们当前组件内部做使用了。它就变成了当前组件的一个子组件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Welcome to Your Vue.js App&quot;</span>/&gt;</span> 单标签的形式</span><br><span class="line">  <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Welcome to Your Vue.js App&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span> 双标签的形式</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用组件的时候，就是一个HTML标签的形式，跟组件名称是对应的。</p>
</li>
</ul>
<p>但是当我们去 export 引入的时候，在设置helloWorld子组件的时候，它通过export default导出的，其实就是一对象，它并没有做任何的功能设置。</p>
<ul>
<li><p>其实这一切，都是在刚才使用 npm run build ，也就是打包这一步的时候去执行的。</p>
<ul>
<li><p>App.vue中：当它看到在某一个组件的结构里面，存在一个helloworld结构以后 <code>&lt;HelloWorld msg=&quot;Welcome&quot;/&gt;</code>  这个标签不是 html 的这个内置的标签、不是一个正常的标签，那他就会去找有没有这样一个组件，如果有，他就找到你导入的这个组件的配置对象（从import找到）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> <span class="comment">//在HelloWorld.vue中定义的</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,  <span class="comment">//这是个配置对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">msg</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>他会根据你给我这个对象，进行一下new Vue的操作。</p>
<ul>
<li><p>例如像App.vue它也是一个组件，这块通过export default方式也导出了一下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">HelloWorld</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>那这个根组件（App.vue）会在哪使用呢?</p>
<ul>
<li><p>根组件是没有父组件的,它会在我们的入口（main.js）中被进行创建：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这块通过new Vue的方式做了一个处理，使用了一个render函数。这是我们根组件的配置上的一个使用方式。</p>
<blockquote>
<p>render函数的作用是：将h创建的Node节点信息return返回给Vue.js底层处理文件中的beforeMount()生命周期钩子函数，让其将Node节点信息在界面中渲染出来。</p>
<blockquote>
<p><a href="https://v2.cn.vuejs.org/v2/api/#beforeMount">beforeMount</a> : 在挂载开始之前被调用：相关的 <code>render</code> 函数首次被调用。</p>
</blockquote>
</blockquote>
</li>
<li><p>在我们进行<strong>子组件处理</strong>的时候，它也是由new Vue内部的一个组件化处理方式，进行的组件实例的创建。</p>
<ul>
<li>所以意味着：<strong>每一个Vue的组件都是一个独立的Vue实例</strong>。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Vue组件</strong>在使用的时候，其实就相当于是一个自定义的HTML标签，但其实实质上它是一个单独的Vue实例。</p>
<ul>
<li>每一个组件都是一个单独的Vue实例。</li>
<li>最终这个组件，会<strong>在编译环节进行一下结构生成</strong>，并替换掉你之前写的那个自定义的HTML标签。</li>
</ul>
</li>
<li><p>所以：Vue的实例属性，在组件中也同样是可以使用的。但有一个除外就是el。</p>
<ul>
<li>el选项只能够在根组件中进行设置。而像<u>内部的子组件</u>它是不需要el属性的，因为它是取决于实际上写的这个标签的位置，而不是挂载到某一个特定位置上。</li>
</ul>
</li>
</ul>
<h2 id="组件的通信"><a href="#组件的通信" class="headerlink" title="组件的通信"></a>组件的通信</h2><p>关于组件的通信方式。</p>
<p>组件跟组件之间都是相互独立的。但是在实际页面开发中，组件跟组件之间肯定又是有关联性的，那这种关联方式就体现在了数据的交互上。</p>
<p>例如说在父组件中，如果有些数据希望在子组件中进行访问的话，那么这时我们就要涉及到组件通信的处理方式。</p>
<h3 id="父传子-props"><a href="#父传子-props" class="headerlink" title="父传子 props"></a>父传子 props</h3><blockquote>
<p>父组件向子组件传值使用 props</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 App.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Welcome to Your Vue.js App&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在父组件App.vue中，就给子组件设置了一个属性，就像html标签属性一样，写了一个msg属性，值为“Welcome…”。</p>
<blockquote>
<p>那在子组件里如何作为一个正确的接收呢？<br>——父组件向子组件传值使用 props 。</p>
</blockquote>
<p>在子组件HelloWorld.vue中，就写了一个props。props就是去接收父组件给子组件设置的属性的一个方式。</p>
<p><u>如果希望将父组件的数据传递给子组件的话，只要通过 (子组件的) props 作为接收就可以了。</u></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 子组件 HelloWorld.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;<span class="comment">//除了可以规定类型以外,还可以规定一些其他的配置项,所以这块也可以通过对象方式来。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">msg</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>props中：除了可以规定类型以外，还可以规定一些其他的配置项，所以这块也可通过对象方式来。(props中的自定义属性也可以通过v-bind绑定的方式被赋值，通过响应式数据来做设置)</li>
<li>如果写类型可以写成type，如果类型可能有多种的话，可以写多个用数组来包裹，比如说String或者Number，注意首字母需大写。</li>
<li>default：默认值多少。</li>
<li>required：是必选的。有可能子组件依赖于 父组件传递的一个核心数据，再做一个后续的逻辑设置，那么这时这个属性的值就必须得有。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 新的子组件 HelloWorld.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;HelloWorld&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//组件通信</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.父传子，通过 props 作为处理。</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;  <span class="comment">//除了可以规定类型以外，还可以规定一些其他的配置项，所以这块也可通过对象方式来。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">msg</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">count</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>:[<span class="title class_">String</span>, <span class="title class_">Number</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// default:100</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">required</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新的父组件 App.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Welcome to Your Vue.js App&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">:count</span>=<span class="string">&quot;parentCount&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="子传父用自定义事件"><a href="#子传父用自定义事件" class="headerlink" title="子传父用自定义事件"></a>子传父用自定义事件</h3><blockquote>
<p>子组件向父组件传递数据使用自定义事件。</p>
<p>反向传值（子向父传值$emit）</p>
</blockquote>
<p>情景：如果你希望把子组件的数据去传递给父组件的话。<br>这单个商品是不可能知道其他商品的信息，那应该把它汇总到外部的父组件，也就是整体购物车组件里边做一个统计。</p>
<ul>
<li>希望能够<strong>将这个更改过的数据，传递给父组件</strong>。<ul>
<li><p>这需要通过自定义事件的方式来做处理（$emit的方式来做设置）。</p>
</li>
<li><p><code>$emit()</code> 用于触发自定义事件。（emit是触发的意思。click是点击这个操作触发）</p>
<ul>
<li><p>第一个参数为自定义的事件</p>
</li>
<li><p>参数2是事件要传递给父组件的数据。</p>
</li>
<li><p>父组件在子组件标签上<strong>绑定自定义事件</strong>来<strong>监听与接收</strong>子组件传递的数据。</p>
<p><strong>父组件里面绑定事件，子组件触发事件</strong></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><a href="https://blog.csdn.net/qq_49039603/article/details/120834149">参考：vue笔记5_this.$emit第三个参数-CSDN博客</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 子组件 HelloWorld.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler&quot;</span>&gt;</span>子组件的button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">msg</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">childCount</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">childCount</span>++;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;child-change-event&quot;</span>, <span class="variable language_">this</span>.<span class="property">childCount</span>);       </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// this.$emit(&#x27;event-name&#x27;, param);参数2是事件要传递给父组件的数据。</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 父组件 App.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">child-change-event</span>=<span class="string">&quot;appHandler&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父组件在子组件标签上绑定自定义事件来监听与接收子组件传递的数据。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件里面的getChildData的数据为：&#123;&#123; getChildData &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&quot;./components/HelloWorld.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">HelloWorld</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">getChildData</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;     <span class="comment">//appHandler监听子组件传递的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">appHandler</span>(<span class="params">childCount</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">getChildData</span> = childCount;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="emit案例详解"><a href="#emit案例详解" class="headerlink" title="$emit案例详解"></a>$emit案例详解</h4><p><a href="https://www.cnblogs.com/linzhifen5/p/17240872.html">参考链接</a></p>
<p>总结：</p>
<ul>
<li>只有子组件传参，@调用方法不使用“括号”</li>
<li>特殊使用“<code>arguments</code>”和“<code>$event</code>”，</li>
<li><code>arguments</code> 获取子参数的数组</li>
<li><code>$event</code> 获取自定义对象，满足传多个参数</li>
</ul>
<hr>
<p>使用 <code>$emit</code> 从子组件传递数据到父组件时，主要有以下3类情况</p>
<h5 id="1-只子组件传值"><a href="#1-只子组件传值" class="headerlink" title="1.只子组件传值"></a>1.只子组件传值</h5><p>只有子组件传值（单个、多个）</p>
<p>写法一：（自由式）</p>
<blockquote>
<ol>
<li>只有子组件传值；</li>
<li>注意@引用函数不需要加“括号”；</li>
<li>子组件传值和父组件方法的参数一一对应。</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// child组件，在子组件中触发事件</span><br><span class="line">this.$emit(&#x27;handleFather&#x27;, &#x27;子参数1&#x27;,&#x27;子参数2&#x27;,&#x27;子参数3&#x27;)</span><br><span class="line"></span><br><span class="line">// father组件，在父组件中引用子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">child</span> @<span class="attr">handleFather</span>=<span class="string">&quot;handleFather&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    child,</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">handleFather</span>(<span class="params">param1,param2,param3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">console</span>.<span class="title function_">log</span>(param) <span class="comment">// </span></span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>写法二：（arguments写法）</p>
<blockquote>
<ol>
<li>只有子组件传值；</li>
<li>注意@引用函数添加“arguments”值；</li>
<li>打印出子组件传值的数组形式。</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// child组件，在子组件中触发事件并传多个参数</span><br><span class="line">this.$emit(&#x27;handleFather&#x27;, param1, param2,)</span><br><span class="line">//father组件，在父组件中引用子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">child</span> @<span class="attr">handleFather</span>=<span class="string">&quot;handleFather(arguments)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">     child,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handleFather</span>(<span class="params">param</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(param[<span class="number">0</span>]) <span class="comment">//获取param1的值</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(param[<span class="number">1</span>]) <span class="comment">//获取param2的值</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-子父都传"><a href="#2-子父都传" class="headerlink" title="2.子父都传"></a>2.子父都传</h5><p>子组件传值，父组件也传值</p>
<p>写法一：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child组件，在子组件中触发事件</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;handleFather&#x27;</span>, <span class="string">&#x27;子参数对象&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//father组件，在父组件中引用子组件</span></span><br><span class="line">&lt;child @handleFather=<span class="string">&quot;handleFather($event, fatherParam)&quot;</span>&gt;&lt;/child&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    child,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="title function_">handleFather</span>(<span class="params">childObj, fatherParam</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="variable language_">console</span>.<span class="title function_">log</span>(childObj) <span class="comment">// 打印子组件参数（对象）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="variable language_">console</span>.<span class="title function_">log</span>(fatherParam) <span class="comment">// 父组件参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>写法二：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// child组件，在子组件中触发事件并传多个参数</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;handleFather&#x27;</span>, param1, param2,)</span><br><span class="line"></span><br><span class="line"><span class="comment">//father组件，在父组件中引用子组件</span></span><br><span class="line">&lt;child @handleFather=<span class="string">&quot;handleFather(arguments, fatherParam)&quot;</span>&gt;&lt;/child&gt;</span><br><span class="line"> </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    child,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="title function_">handleFather</span>(<span class="params">childParam, fatherParam</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="variable language_">console</span>.<span class="title function_">log</span>(childParam) <span class="comment">//获取arguments数组参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="variable language_">console</span>.<span class="title function_">log</span>(fatherParam) <span class="comment">//获取fatherParam</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="同级也可传"><a href="#同级也可传" class="headerlink" title="同级也可传"></a>同级也可传</h3><p>同级其实也可以传。</p>
<ul>
<li><p>第一种方式就是通过父来中转，比如说把子的值传给以父，再用父传给另外一个子。</p>
</li>
<li><p>第二种方式是通过一套EventBus方式来做处理，是通过一个额外的Vue实例，来做一个数据存储。</p>
</li>
<li><p>第三种方式就是比如说我们并不是父子关系，也不是同级关系。</p>
<ul>
<li>就建议使用Vue官方的，全局状态管理工具VueX，来进行状态的管理。</li>
</ul>
</li>
</ul>
<h2 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h2><p><a href="https://v2.cn.vuejs.org/v2/guide/components-slots.html">插槽 — components-slots.html</a></p>
<p>关于组件插槽的使用方式</p>
<p>插槽是一个比较常用、比较好用的一个功能。</p>
<p>当我们希望：每次在进行组件使用的时候，有所不一样的呈现。</p>
<h3 id="普通插槽"><a href="#普通插槽" class="headerlink" title="普通插槽"></a>普通插槽</h3><ul>
<li>那如果希望每个helloworld除了核心功能以外，其他位置有一些展示上的区别，就可以利用组件的这种双标签的结构来进行处理了。<ul>
<li>双标签内的区域，所书写的其实就是插槽的位置。</li>
<li>可以在子组件中去规定一下，给插槽中写的数据要在内部的哪个地方去呈现。<ul>
<li>——书写slot标签。slot并不是真的标签，它只是引用了在父组件去使用子组件的时候，所设置的一个默认插槽内容。当然 slot 里也可以写一些默认内容。</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>子组件里必须先定义slot标签，父组件才能使用插槽进行自定义区别。</li>
<li>插槽：使得子组件有部分区域是给父组件开放的，可以自己随便定一些什么东西进去，而不再是完全由子组件内部做实现。</li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 子组件 HelloWorld.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>slot的默认文本<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 父组件 App.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span> HelloWorld双标签内的文本1<span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span> HelloWorld双标签内的文本22<span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a><a href="https://v2.cn.vuejs.org/v2/guide/components-slots.html#%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD">具名插槽</a></h3><p>有时我们需要多个插槽。可能有多个区域。</p>
<p>那在父组件设置的时候，怎么来区分，是要给哪个地方来写？——这块可以<strong>通过name来做标记</strong>。</p>
<p><u>当你组件里有好几个地方可以让外部通过插槽传值的话，就可以通过name来标记。</u></p>
<p>如果希望在父组件编写的时候，给一个自定义的内容，就需要手动写一个template，然后通过#的方式（或者写成v-slot指令），来指定你要设置的插槽的名称。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 子组件 HelloWorld.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span> slot的默认文本 <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;foot&quot;</span>&gt;</span> slot中foot的文本 <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 父组件 App.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span> HelloWorld双标签内的文本1</span><br><span class="line">     <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:foot</span>&gt;</span>HelloWorld双标签内的文本template v-slot:foot<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span> HelloWorld双标签内的文本22</span><br><span class="line">     <span class="tag">&lt;<span class="name">template</span> #<span class="attr">foot</span>&gt;</span> HelloWorld双标签内的文本template #foot <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p><a href="https://v2.cn.vuejs.org/v2/guide/components-slots.html#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD">components-slots.html#作用域插槽</a></p>
<p>除了可以做一些基础的文本设置以外，我们还可以<strong>在插槽里面去使用子组件的一些数据</strong>。</p>
<p>注意：helloworld里边的插槽，其实也是helloworld里边的内容，它并不是父组件的内容。</p>
<p>我们就需要<strong>通过作用域插槽方式来做一个设置</strong>，也就是需要你在子组件Helloworld中的slot里给绑定一些值。</p>
<p>！这个<strong>绑定的位置</strong>是在你的name&#x3D;foot的插槽里面，那意味着，当父组件使用Helloworld这个组件的时候，就<strong>只能在foot插槽里</strong>进行数据的使用。</p>
<p>！父组件使用slot插槽，#foot&#x3D;在接收的时候注意：接收的时候，虽然slot插槽绑定的值是一个，但是他给你传回来是一个整个对象，所以这块你接收的是一个dataObj。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 子组件 HelloWorld.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span> slot的默认文本 <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-bind绑定属性与对应的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;foot&quot;</span> <span class="attr">:childCount</span>=<span class="string">&quot;childCount&quot;</span>&gt;</span>slot中foot的文本<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">childCount</span>: <span class="number">134</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 父组件 App.vue中： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> </span><br><span class="line">   <span class="comment">&lt;!-- 接收插槽传递的数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span> Hello标签的文本1</span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">foot</span>=<span class="string">&quot;dataObj&quot;</span>&gt;</span>foot= &#123;&#123;dataObj&#125;&#125;,内容是= &#123;&#123;dataObj.childCount&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 或者你直接通过解构方式也行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span> Hello标签的文本22</span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">foot</span>=<span class="string">&quot;&#123;childCount&#125;&quot;</span>&gt;</span>foot= &#123;&#123;childCount&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue Router"></a>Vue Router</h1><p><a href="https://v3.router.vuejs.org/zh/">Vue Router (与 Vue 2 对应的 Vue Router3 的版本)</a></p>
<p>Vue Router 是 Vue.js官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。</p>
<ul>
<li>单页面应用<ul>
<li>一般的网站都是由多个页面组成的，但Vue通常只有一个html文件，也意味着它其实只有一个页面。</li>
<li>那如何能够在这个页面中去实现类似于多项应用的效果呢？——其实就是监测页面URL的变化，当URL变化以后，我们在页面中渲染些内容就OK了。</li>
</ul>
</li>
</ul>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>先创建项目：<a href="https://zhuanlan.zhihu.com/p/628439854">参考：手动搭建一个完整的vue2项目</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">you\vueRouter&gt; vue create ling-vue</span><br><span class="line">  Manually <span class="keyword">select</span> features</span><br><span class="line">  我们需要选择手动选择功能选择到Router还有Vuex</span><br><span class="line"></span><br><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually <span class="keyword">select</span> features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: (Press &lt;space&gt; to <span class="keyword">select</span>, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to proceed)</span><br><span class="line"> (*) Babel</span><br><span class="line"> ( ) TypeScript</span><br><span class="line"> ( ) Progressive Web App (PWA) Support</span><br><span class="line"> (*) Router</span><br><span class="line">&gt;(*) Vuex</span><br><span class="line"> ( ) CSS Pre-processors</span><br><span class="line"> (*) Linter / Formatter</span><br><span class="line"> ( ) Unit Testing</span><br><span class="line"> ( ) E2E Testing</span><br><span class="line">然后呢是否使用<span class="built_in">history</span>模式 <span class="built_in">yes</span></span><br><span class="line">然后这里选择一个代码风格:标准的， Lint on save</span><br><span class="line">然后就是你的其他配置文件是在package.json里边存着还是单独存：</span><br><span class="line">然后问你是否将当前创建项目配置作为一个模板方便下次直接使用：n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS D:\soft\develop\idea\pros\my\qianlearn\vuelearn\main\wuyou\vueRouter&gt; vue create ling-vue</span><br><span class="line"></span><br><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset: Manually <span class="keyword">select</span> features</span><br><span class="line">? Check the features needed <span class="keyword">for</span> your project: Babel, Router, Vuex, Linter</span><br><span class="line">? Choose a version of Vue.js that you want to start the project with 2.x</span><br><span class="line">? Use <span class="built_in">history</span> mode <span class="keyword">for</span> router? (Requires proper server setup <span class="keyword">for</span> index fallback <span class="keyword">in</span> production) Yes</span><br><span class="line">? Pick a linter / formatter config: Standard  》 标准风格文件最后有个空行</span><br><span class="line">? Pick additional lint features: Lint on save</span><br><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, ESLint, etc.? In dedicated config files</span><br><span class="line">? Save this as a preset <span class="keyword">for</span> future projects? (y/N) n</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接下来VueCli会帮助将项目的工具跟依赖给安装好</p>
<blockquote>
<p>vueRouter&gt; cd ling-vue<br>ling-vue&gt; npm run serve</p>
</blockquote>
<p>对于页面：顶部多了一个可以切换的区域，点击后顶部的URL发生了变化</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href="https://v3.router.vuejs.org/zh/guide/#javascript">Vue Router (vuejs.org)</a></p>
<p>src里面多了两个部分，一个叫store一个叫router，每个里面都有一个index.js文件。</p>
<h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><ul>
<li><p>router 的 index.js 里：它是引入了一个 vue-router 的库，叫 VueRouter 类。然后通过 Vue.use 的方式引入Vue的官方插件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span> <span class="comment">//引入了 vue-router 的库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/HomeView.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>) <span class="comment">//通过 Vue.use 的方式引入Vue的官方插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一系列的配置</span></span><br><span class="line"><span class="keyword">const</span> routes = [ <span class="comment">//定义路由：每个路由应映射一个组件。 其中&quot;component&quot; 可以是通过 Vue.extend() 创建的组件构造器，或者只是一个组件配置对象。</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123; <span class="comment">//new VueRouter创建了一个 router 实例。然后传了 `routes` 配置+别的配置参数。</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">base</span>: process.<span class="property">env</span>.<span class="property">BASE_URL</span>,</span><br><span class="line">  routes  <span class="comment">// (缩写) 相当于 routes: routes</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router <span class="comment">// 然后做了一个导出</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>new VueRouter</p>
<ul>
<li>mode：如果不使用history，那他是默认的hash。默认的hash模式（兼容性更好）：会发现在路径上多了一个# ，使用 URL 的 hash 来模拟一个完整的 URL。而history模式的好处在于：URL 就像正常的 url，它看起来更好看。 <a href="https://www.zhangshengrong.com/p/RmNP8BnPNk/">Vue中Router路由两种模式hash与history详解</a></li>
<li>base配置：是一个基础的地址。但现在也没有做配置</li>
<li>routes ：定义路由，配置地址对应的要显示的组件是哪个。是操作Vue Router的重点的位置。</li>
</ul>
</li>
<li><p>const routes&#x3D;[] 定义了路由信息</p>
<ul>
<li><p>&#x2F; 是根目录。这条路由还起了一个名字叫home 。（当路由定义的path是比较长的时候，就可以比较方便的通过home这个name来做代替）</p>
</li>
<li><p>component：这是你当前路由切换以后要显示哪个组件。component的配置方式有两种：<br>一种方式是你通过import的方式直接引入然后做一个相应处理。（ <code>import HomeView from &quot;../views/HomeView.vue&quot;;</code> ）<br>第二种方式是通过一个箭头减速函数的方式来做设置。（这块这个import的方式，是使用一个异步组件方式来做加载。还加了一个webpack的魔法注释，是为了在webpack打包的时候能够将多个组件进行一个统一打包的处理。）</p>
<blockquote>
<p><code>import</code>异步加载的写法实现页面模块<code>lazy loading</code>懒加载（<code>Vue</code>中的路由异步加载）：</p>
<p><code>Vue</code>中运用<code>import</code>的懒加载语句以及<code>webpack</code>的魔法注释，在项目进行<code>webpack</code>打包的时候，对不同模块进行代码分割，在首屏加载时，用到哪个模块再加载哪个模块，<u>实现懒加载进行页面的优化</u>。</p>
<ul>
<li><p>路由懒加载作为性能优化的一种手段，它能让路由组件延迟加载。</p>
</li>
<li><p>为延迟加载的路由<u>添加“魔法注释”</u>(webpackChunkName)<u>来自定义包名</u>，在打包时，该路由组件会被单独打包出来。作用就是<u>webpack在打包的时候</u>，对异步引入的库代码（lodash）进行代码分割时（需要配置webpack的SplitChunkPlugin插件），<u>为分割后的代码块取得名字</u> 。</p>
</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><ul>
<li><p>store 的 index.js 里：是类似的。通过Vue.use引入了Vuex，也通过一个 new Vuex.Store 的方式,创建了一个Vuex的实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)<span class="comment">//通过Vue.use引入了Vuex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过一个 new Vuex.Store 的方式,创建了一个Vuex的实例。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><ul>
<li><p>最终呢这两个(router、store)导出的文件，在我们的入口 main.js 里面做了一个引入。并且在new Vue 实例的时候，也相应的传入了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">//引入router</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>   <span class="comment">//引入store</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建和挂载根实例。</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,<span class="comment">//通过 router 配置参数注入路由，从而整个应用都有路由功能</span></span><br><span class="line">  store, <span class="comment">//是一种配置项，与el,data等同级</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="comment">// 现在，应用已经启动了！</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>通过注入路由器，我们可以在任何组件内通过 <code>this.$router</code> 访问路由器，也可以通过 <code>this.$route</code> 访问当前路由。</p>
<p>该文档通篇都常使用 <code>router</code> 实例。 <code>this.$router</code> 和 <code>router</code> 使用起来完全一样。使用 <code>this.$router</code> 的原因是我们并不想在每个独立需要封装路由的组件中都导入路由。</p>
<h2 id="App-vue导航切换"><a href="#App-vue导航切换" class="headerlink" title="App.vue导航切换"></a>App.vue导航切换</h2><p>你如何进行切换的操作，是靠着两个按钮的点击做切换。</p>
<ul>
<li><p>App.vue 里有一个 router-link 的标签，然后写了一个 to, to里面有路径。通过这个标签就可以帮助我们去修改当前的一个路由地址，以达到最终的一个组件切换效果。<a href="https://v3.router.vuejs.org/zh/api/#router-link">API 参考 | router-link</a></p>
</li>
<li><p>还有一个叫 router-view 的标签，就表示你这个组件要显示在哪上面。切换哪个组件就会在这个地方做一个相应的显示。</p>
<ul>
<li><strong>router-view</strong> 当你的路由<strong>path 与访问的地址相符时</strong>，会<strong>将指定的组件</strong>替换该 router-view。（如果写2个 router-view就会展示双份）</li>
</ul>
</li>
<li><p>这就是vue router给我们提供的两个组件，一个叫router-link，一个叫router-view 。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span>   </span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;about&#x27;&#125;&quot;</span>&gt;</span>About22<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在操作的时候，除了可以使用path（to）的方式以外，还可以使用name的方式来做操作。</p>
<ul>
<li>使用name的方式的话，用冒号的方式做一个属性绑定，然后在里边写一个对象name 。</li>
</ul>
<h2 id="一个路由案例"><a href="#一个路由案例" class="headerlink" title="一个路由案例"></a>一个路由案例</h2><p>那下边我们自己来写一个组件</p>
<ul>
<li>1、首先你需要去配置一个相应的页面，然后里边配置一些记录信息。（views\VideoView.vue）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是VideoView.vue里面的一个视频信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;VideoView&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2、然后配置路由信息，先import引入，再定义路由信息 path name component（router\index.js）<ul>
<li>这样后，你可以通过路由path访问到组件，但首页没有它的导航。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VideoView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/VideoView.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span> <span class="comment">// 引入了 vue-router 的库</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>) <span class="comment">// 通过 Vue.use 的方式引入Vue的官方插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [ <span class="comment">// 定义路由：每个路由应映射一个组件。</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/video&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;video&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">VideoView</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123; <span class="comment">// new VueRouter创建了一个Vue实例</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>, <span class="comment">// mode:使用history模式创建路由</span></span><br><span class="line">  <span class="attr">base</span>: process.<span class="property">env</span>.<span class="property">BASE_URL</span>,</span><br><span class="line">  routes <span class="comment">// 是操作Vue Router的重点的位置</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router <span class="comment">// new VueRouter创建了一个Vue实例</span></span><br></pre></td></tr></table></figure>

<ul>
<li>3、之后在App.vue里面，使用 router-link 的标签进行组件导航。<ul>
<li>有导航，点击导航中的，会跳转to的路径。有了path后，由于配置了路由信息，直接可以访问到相应的组件。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span>   </span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="comment">&lt;!-- &lt;router-link :to=&quot;&#123;name:&#x27;about&#x27;&#125;&quot;&gt;About22 &lt;/router-link&gt;| --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;router-link to=&quot;/video&quot;&gt;Video&lt;/router-link&gt; --&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;video&#x27;&#125;&quot;</span>&gt;</span>Videoy呀<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>路由使用技巧。</p>
<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p><a href="https://v3.router.vuejs.org/zh/guide/essentials/dynamic-matching.html">动态路由匹配 | Vue Router (vuejs.org)</a></p>
<p>对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 <code>vue-router</code> 的路由路径中使用“<strong>动态路径参数</strong>”(dynamic segment) 来达到这个效果：</p>
<blockquote>
<p>动态路径参数 以冒号开头。</p>
</blockquote>
<p>希望在一个path匹配的时候能够将不同的ID，做统一匹配的话，就在path上以冒号的方式来书写。（加冒号了它就是动态的。<br>那这个动态路由设置好以后呢，如果你希望<strong>在组件内部可以访问到这个动态路由的ID的值</strong>的话，我们可以在路由配置上加props:true , 那在相应组件内部就可以通过props的方式来做一个接收了。</p>
<p>导航组件的 to 属性可以以path的方式，也可以通过name的方式写（通过params）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router\index.js</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/video/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;video&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">VideoView</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//views\VideoView.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是VideoView.vue里面的一个视频信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>获取到的视频Id为：&#123;&#123; id &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;VideoView&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//App.vue里</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span></span><br><span class="line"><span class="language-xml"> <span class="comment">&lt;!-- 参数值以path的方式 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/video/30&quot;</span>&gt;</span>Video<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span></span><br><span class="line"><span class="language-xml"> <span class="comment">&lt;!--  参数值以name的方式 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;video&#x27;, params:&#123;id:28&#125;&#125;&quot;</span>&gt;</span>Videoy呀<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p><a href="https://v3.router.vuejs.org/zh/guide/essentials/nested-routes.html">嵌套路由 | Vue Router (vuejs.org)</a></p>
<p>但是我可能还会对视频有一些更加细分的子功能，我一级的这个功能里边还会有二级功能，即就可能会有二级的路由子组件。</p>
<ul>
<li><p>那么这时的配置方式就需要在这router的index.js里加一个叫做children的配置项，children是个数组，需要包含多条子路由。在子路由里，需要变的只有后边的部分。实际是先从父路由开始看（是父+子的路径）。</p>
</li>
<li><p>操作切换的时候：因为videoview这个组件里面要有二级路由，就在父组件VideoView里配置导航路由的切换。</p>
<ul>
<li>注意： router-view是做相应的展示。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router\index.js</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/video/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;video&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">VideoView</span>, <span class="comment">// 嵌套2级路由</span></span><br><span class="line">    <span class="comment">// 当/video/:id/info1 匹配成功，</span></span><br><span class="line">    <span class="comment">// VideoInfo1 会被渲染在 VideoView 的 &lt;router-view&gt; 中</span></span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;info1&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;video-info1&#x27;</span>, <span class="attr">component</span>: <span class="title class_">VideoInfo1</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;info2&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>, <span class="attr">component</span>: <span class="title class_">VideoInfo2</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// views\video\VideoInfo1.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;video-info1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>点赞二级组件：video-Info1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;video-info1&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//父组件VideoView.vue里</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是VideoView.vue里面的一个视频信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;video-info1&#x27;, params:&#123;id:28&#125;&#125;&quot;</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;video-info2&#x27;, params:&#123;id:28&#125;&#125;&quot;</span>&gt;</span>互动<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="编程式的导航"><a href="#编程式的导航" class="headerlink" title="编程式的导航"></a>编程式的导航</h2><p><a href="https://v3.router.vuejs.org/zh/guide/essentials/navigation.html">编程式的导航 | Vue Router (vuejs.org)</a></p>
<p>1、在代码处理中，除了用户能够操作以外，我们希望程序自己做一些主动跳转、网页自动跳转（如：登录过期就跳转到首页）</p>
<ul>
<li><p>created：是当实例创建完毕以后，会执行的生命周期钩子。  <a href="https://v2.cn.vuejs.org/v2/api/#created">生命周期钩子。</a></p>
</li>
<li><p>this.$router：<strong>在 Vue 实例内部，你可以通过 <code>$router</code> 访问路由实例。</strong></p>
<ul>
<li>使用 <code>router.push</code> 方法可以导航到不同的 URL。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</li>
</ul>
<p>当点击 <code>&lt;router-link&gt;</code> 时，这个 <code>router.push</code> 方法会在内部调用。所以说，点击 <code>&lt;router-link :to=&quot;...&quot;&gt;</code> 等同于调用 <code>router.push(...)</code>。</p>
<table>
<thead>
<tr>
<th>声明式</th>
<th>编程式</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td>
<td><code>router.push(...)</code></td>
</tr>
</tbody></table>
<ul>
<li>可以在任何组件内通过 <code>this.$router</code> 访问路由器。也可以通过 <code>this.$route</code> 访问当前路由：</li>
<li>router是用来进行一些路由操作的工具，一些动作。</li>
<li>route：如果要看一些路由相关的数据，比如地址、一些相应的参数、就可以通过route<br>来操作。</li>
</ul>
</li>
<li><p>setTimeOut：防止跳转得太快，看不到过程。比如说3秒以后。</p>
</li>
</ul>
<p>也就意味着当我切到info1的时候，它会在3秒后把我们自动跳回到home。实际上用户虽然没有去点home，但是自动回到home的一个方式，也就是这种编程式路由的触发方式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;video-info1&#x27;</span>,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span> &#125;)<span class="comment">//导航到这个 URL。并且当用户点击浏览器后退按钮时，则回到之前的 URL。</span></span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>2、希望在跳转路由的时候，想进行一些数据的传递。</p>
<ul>
<li>可以通过query的方式进行一些数据设置，</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//================ VideoInfo1.vue ================ </span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;video-info1&#x27;</span>,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// this.$router.push(&#123; name: &#x27;home&#x27; &#125;)</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">someData</span>: <span class="string">&#x27;Info1向Info2传递的数据&#x27;</span> &#125; &#125;)</span><br><span class="line">      <span class="comment">// 这意味着在3秒后会转到 video-info2 并做一些数据传递。</span></span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//================  VideoInfo2.vue  ================ </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#123;someData: &#x27;Info1向Info2传递的数据&#x27;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>那么这样就实现了：在路由切换的过程中，能够进行一些数据的传递。</p>
<h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><p>导航守卫也意味着除了你可以干预某一次的导航操作以外，你还可以呢去给所有导航统一做设置。</p>
<blockquote>
<p>比如：加一个加载中的这种小效果。那意味着你每一次路由器的时候，其实都需要。</p>
</blockquote>
<ul>
<li><p><code>router.beforeEach</code> 注册一个全局前置守卫：是<strong>在你每一次导航被触发</strong>的之前，它都会进行这个守卫的触发。</p>
</li>
<li><p>（）中是函数，需要接受三个值 to from next 。</p>
</li>
<li><p>比如说你从a切到b，是from a toB 。然后next是让程序继续往后走的方式。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router 的 index.js 里：在 new VueRouter下方的语句</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;路由触发了&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p><a href="https://v3.vuex.vuejs.org/zh/">Vuex 是什么？ | Vuex (与 Vue 2 匹配的 Vuex 3 的文档)</a></p>
<p>Vue官方的，全局状态管理工具VueX，来进行状态的管理，集中式存储管理应用的所有组件的状态。</p>
<p>它只是一个统一的数据存储方式。</p>
<p>在 store\index.js文件里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="title function_">state</span> () &#123; <span class="comment">//全局用，不建议改变</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">loginStatus</span>: <span class="string">&#x27;用户已经登录&#x27;</span>,</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="state存"><a href="#state存" class="headerlink" title="state存"></a>state存</h2><ul>
<li><p>state 就是一个存数据的地方。可以<strong>全局存</strong>，然后其他<strong>任意组件位置都可以去访问</strong>。</p>
<ul>
<li><p>你要存的话，需要先把这个数据在这做一个声明，声明之后就可以在任意的地方去用了。建议：把这个值写成函数的方式，类似于在组件里边使用的那个data。然后这里边我们就可以写一些值了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">loginStatus</span>) <span class="comment">//进行访问</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局用的，不建议改。如果要改，只能在mutation里边操作</p>
</li>
</ul>
</li>
</ul>
<h2 id="mutation改"><a href="#mutation改" class="headerlink" title="mutation改"></a>mutation改</h2><ul>
<li><p>mutation：如果你希望在全局中去修改状态的话。</p>
<ul>
<li><p>你任意的一个修改，都在 mutation 里面去封装一次，<strong>mutation 相当于 methods</strong>，就是一个函数。</p>
</li>
<li><p>方法：这里边能接第一个参数叫 state，就是你希望去访问到state.里边的count</p>
</li>
<li><p>访问：注意它不是直接去访问那个 mutation，而是<strong>通过commit的方式做一个提交</strong>。这第一个参数 mutation的名称，比如 changeCount 。然后参数2写你的值。</p>
</li>
<li><p>mutations它必须是同步的。</p>
<ul>
<li>vue devtools 它里边可以去监测一些相关的内容，比如说我们可以看到有组件。<ul>
<li>时间线timeline这个timeline可以记录应用的在做一些操作 或者一些种状态变更的时候，你能够在这个过程中看到，在每个时间点都干了什么事，他有一个清晰的记录，但必须是同步的。（点击选择Vuex Mutations再start recording，再刷新）</li>
<li>假如是异步的，他只能记住你最终的结果。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="title function_">changeCount</span>(<span class="params">state, num</span>) &#123;</span><br><span class="line">    state.<span class="property">count</span> += num</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutation执行了，count值为&#x27;</span>, state.<span class="property">count</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>在VideoInfo2.vue里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">loginStatus</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">handelCount</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handelCount</span> () &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, <span class="number">1</span>) <span class="comment">// state.count += num</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="actions异步"><a href="#actions异步" class="headerlink" title="actions异步"></a>actions异步</h2><p>actions:这是用来做异步包装的。 异步的，只能记住你最终的结果。</p>
<ul>
<li><p>使用：就是你需要在mutation上包一层。</p>
</li>
<li><p>比如：我希望他延迟一段时间去出发，</p>
<ul>
<li>这里呢接第一个叫store，所有的state的修改都是在mutation里边去做的，你只能通过store点commit的方式，来去执行changeCount。然后再把你的NUM传进来。</li>
<li>使用：这块我们使用dispatch，就是执行的意思。</li>
</ul>
</li>
</ul>
<p>场景：如果你要用时间线工具，就要通过 actions 来做异步处理，利于在调试工具里面，去看它相关的状态。</p>
<p>如果你希望在全局中去修改状态的话</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="title function_">changeCount</span>(<span class="params">state, num</span>) &#123;</span><br><span class="line">    state.<span class="property">count</span> += num</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="title function_">delayChangeCount</span> (store, num) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      store.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, num)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>在VideoInfo2.vue里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>,</span><br><span class="line">      <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handelCount</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handelCount</span> () &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, <span class="number">1</span>) <span class="comment">// state.count += num</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;delayChangeCount&#x27;</span>, <span class="number">10</span>) <span class="comment">// 调用异步的</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="getters缓存"><a href="#getters缓存" class="headerlink" title="getters缓存"></a>getters缓存</h2><p>getters就相当于我们的计算属性啊，它是有一个缓存功能。</p>
<ul>
<li>如果调用多次，但是因为内容没有变，所以他只有一回。<ul>
<li>下面的输出结果：<ul>
<li>getters执行了（1次）</li>
<li>6（3次）</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">state</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">loginStatus</span>: <span class="string">&#x27;用户已经登录&#x27;</span>,</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">  <span class="title function_">len</span> (state) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getters执行了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">loginStatus</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>在VideoInfo2.vue里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>,</span><br><span class="line">      <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handelCount</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handelCount</span> () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">len</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">len</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">len</span>) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p><a href="https://v3.vuex.vuejs.org/zh/guide/modules.html">Module | Vuex (vuejs.org)</a></p>
<ul>
<li>Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</li>
</ul>
<p>不同的功能需要有不同的全局处理。比如说a里面全局有俩值，当然这俩值不需要被b用。<br>这种情况下为了避免混乱，让数据更好管理一些，就可以使用模块。</p>
<ul>
<li>写法：它这里边呢包含一个a，可能包含一个b。a里边有什么呢，有state、什么mutation、actions，b里边呢其实也是一样的这一堆。</li>
<li>使用：用的时候就会变成：比如变成store点a，就多包了一层。</li>
</ul>
<p><a href="https://blog.csdn.net/m0_60337445/article/details/122891271">Vuex中modules的用法_vuex中的modules创建使用-CSDN博客</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">modA</span>: &#123; <span class="comment">// 建议单独写个文件里面，moduleA.js里。</span></span><br><span class="line">      <span class="title function_">state</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">aloginStatus</span>: <span class="string">&#x27;aaa用户已经登录&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">changeCount</span>(<span class="params">state, num</span>) &#123;</span><br><span class="line">          state.<span class="property">count</span> += num</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;amutation执行了，count值为&#x27;</span>, state.<span class="property">count</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在VideoInfo2.vue里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;video-info2&#x27;</span>,</span><br><span class="line">      <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handelCount</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handelCount</span> () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">loginStatus</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">modA</span>.<span class="property">aloginStatus</span>) <span class="comment">//访问state是这样，其他参考别的。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1><p>参考这个：<a href="https://todomvc.com/examples/vue/dist/#/">TodoMVC: Vue</a></p>
<h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>直接通过create-vue的方式</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm create vue@<span class="number">2</span></span><br><span class="line">Ok to proceed? (y) y</span><br><span class="line"></span><br><span class="line">Vue.js - The Progressive JavaScript Framework</span><br><span class="line"></span><br><span class="line">? Project name: » ling-todos</span><br><span class="line"></span><br><span class="line"># 下面全选no(ESLint 也是no)</span><br><span class="line">√ Project name: ... ling-todos</span><br><span class="line">√ Add TypeScript? ... No / Yes</span><br><span class="line">√ Add JSX Support? ... No / Yes</span><br><span class="line">√ Add Vue Router <span class="keyword">for</span> Single Page Application development? ... No / Yes</span><br><span class="line">√ Add Pinia <span class="keyword">for</span> state management? ... No / Yes</span><br><span class="line">√ Add Vitest <span class="keyword">for</span> Unit Testing? ... No / Yes</span><br><span class="line">√ Add Cypress <span class="keyword">for</span> both Unit and End-to-End testing? ... No / Yes</span><br><span class="line">√ Add ESLint <span class="keyword">for</span> code quality? ... No / Yes</span><br><span class="line"></span><br><span class="line">Scaffolding project <span class="keyword">in</span> D:\soft\develop\idea\pros\my\qianlearn\vuelearn\main\wuyou\finalCase\ling-todos...</span><br><span class="line"></span><br><span class="line">Done. Now run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cd</span> ling-todos</span><br><span class="line">  npm install</span><br><span class="line">  npm run dev</span><br><span class="line"># 然后就进行上面的<span class="number">3</span>个命令了。</span><br></pre></td></tr></table></figure>

<p>好项目运行完毕我们打开一下，那这块默认的就是vue2项目</p>
<ul>
<li>基础结构：<ul>
<li>更改：而我们现在需要准备一些静态结构。</li>
<li>那这里没必要自己写那些HTML，用github的todomvc-app-template <a href="https://github.com/tastejs/todomvc-app-template">GitHub-todomvc-app-template:</a></li>
<li>替换App.vue里面的div，style，script也换。</li>
</ul>
</li>
</ul>
<h2 id="功能制作"><a href="#功能制作" class="headerlink" title="功能制作"></a>功能制作</h2><p><a href="https://todomvc.com/examples/vue/dist/#/">TodoMVC: Vue</a></p>
<p>首先需要响应式数据——data 。</p>
<ul>
<li>存很多个todo事项，用数组结构。而每个todo事项用对象。</li>
</ul>
<p>实现功能</p>
<h3 id="1勾选"><a href="#1勾选" class="headerlink" title="1勾选"></a>1勾选</h3><p>1、点击打钩后是完成状态</p>
<p>首先要v-for进行展示，完成状态：class&#x3D;”completed” 。</p>
<p>点击打钩后是完成状态：先使用v-bind，但勾选并没有改变状态。这是因为我们去进行界面操作了他并没有反向返回给数据，故使用v-model指令。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">todos</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;事项1&#x27;</span>,</span><br><span class="line">            <span class="attr">completed</span>: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">22</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;事项2&#x27;</span>,</span><br><span class="line">            <span class="attr">completed</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,    </span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul class=&quot;todo-list&quot;&gt;</span><br><span class="line">        &lt;li </span><br><span class="line">        v-for=&quot;todo in todos&quot; </span><br><span class="line">        :key=&quot;todo.id&quot;</span><br><span class="line">        :class=&quot;&#123;completed: todo.completed&#125;&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">            &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; </span><br><span class="line">            v-model=&quot;todo.completed&quot;&gt;</span><br><span class="line">            &lt;label&gt;&#123;&#123;todo.title&#125;&#125;&lt;/label&gt;</span><br><span class="line">            &lt;button class=&quot;destroy&quot;&gt;&lt;/button&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">          &lt;input class=&quot;edit&quot; value=&quot;Create a TodoMVC template&quot;&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<h3 id="toggleAll"><a href="#toggleAll" class="headerlink" title="toggleAll"></a>toggleAll</h3><p>2、toggleAll，全部打钩-全部是完成状态，全部取消。</p>
<p>图标的背后竟然是个checked复选框，他有选中or取消的状态。</p>
<p>点击之后有个函数，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   &lt;input @click=<span class="string">&quot;toggleAll&quot;</span></span><br><span class="line">      id=<span class="string">&quot;toggle-all&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;toggle-all&quot;</span> type=<span class="string">&quot;checkbox&quot;</span>&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;toggle-all&quot;</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">      </span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">toggleAll</span>(<span class="params">event</span>) &#123;<span class="comment">//实现点击之后全部是完成/取消状态。</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;type:&quot;</span>+ event.<span class="property">type</span>) <span class="comment">//click</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>) <span class="comment">//触发元素：&lt;input id=...class=&quot;toggle-all&quot;&gt;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;checked：&quot;</span>+ event.<span class="property">target</span>.<span class="property">checked</span>) <span class="comment">//checkbox的选中状态</span></span><br><span class="line">          <span class="comment">//对数组的每一项进行操作。遍历数组，进行操作</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</span><br><span class="line">          todo.<span class="property">completed</span> = event.<span class="property">target</span>.<span class="property">checked</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;    </span><br><span class="line">&#125;,            </span><br></pre></td></tr></table></figure>

<h3 id="筛选visibility"><a href="#筛选visibility" class="headerlink" title="筛选visibility"></a>筛选visibility</h3><p>3、处理All、Active、Completed的可见性</p>
<ul>
<li><p>如果实现点击之后,对应筛选出未完成的todo ，筛选后：v-for的内容就不是todos，初始情况下怎么确定是all的状态？</p>
</li>
<li><p>应该不是简单的点击，应该是与路径有关。</p>
</li>
<li><p>url上hash值，对应筛选出不同状态的todo</p>
</li>
</ul>
<p>就需要去辨别一下当前hash的值（做一个hash值的监控），它是一个什么样的情况，然后在列表里对todos相应的做一个处理就可以了。</p>
<p>1）先辨别一下当前hash的值（做一个hash值的监控），它是一个什么样的情况。</p>
<ul>
<li><strong>监控hash值</strong>，hash的改变不会导致页面重新加载。应该是实例被挂载后就触发吧——mounted。<br>当你的元素挂载完毕以后，在mounted钩子里面做操作。</li>
<li>但处理的操作肯定不能在生命周期钩子里去写，而是应该用单独的methods来操作（获取hash值）。<ul>
<li>window.location.hash就可以获取到hash的值，但控制台打印后可发现它其实是包含一些额外部分的。去除掉不需要的部分。</li>
<li>字符串的replace替换，但是 杠&#x2F; 跟正则标识是一样的，所以加一个反斜线转义一下。写个问号就是&#x2F;是有或者是没有，有只能有一次。然后匹配完的时候变成替换成空。</li>
</ul>
</li>
</ul>
<p>2）然后在列表里对todos相应的做一个处理。</p>
<ul>
<li><p>利用visibility进行最终这个todos的筛选啊</p>
<ul>
<li>为了<u>不让它每次都重新做操作，直接给他一个计算属性</u>，这里边首先就是要根据你的this点visibility，返回的todo里面的数据也不一样。</li>
<li>这块我们直接return了，所以连break都没必要写了。</li>
</ul>
</li>
<li><p>筛选后的结果应该是在初始v-for的时候就取得，就使用。。</p>
</li>
</ul>
<p>如果是active了，那就需要从todos里面遍历，就通过filter（是一个数组方法）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">todos</span>: [...],</span><br><span class="line">        <span class="attr">visibility</span>: <span class="string">&#x27;all&#x27;</span> <span class="comment">//默认是all的状态。</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">hashChangeDeal</span>(<span class="params"></span>)&#123; <span class="comment">// hash值变化了：</span></span><br><span class="line">        <span class="comment">// 获取url的hash值。当前的可见性用visibility（全局存作为属性，因为要用它。）</span></span><br><span class="line">        <span class="keyword">const</span> ahash = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>; <span class="comment">// 将#/替换为空 </span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ahash:&#x27;</span>+ ahash) <span class="comment">// 是#/completed</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">visibility</span> = ahash.<span class="title function_">replace</span>(<span class="regexp">/#\/?/</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted:&#x27;</span>+ <span class="variable language_">this</span>.<span class="property">visibility</span>) <span class="comment">// 是completed</span></span><br><span class="line">      &#125; </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>:&#123; <span class="comment">// 利用visibility进行最终这个todos的筛选啊</span></span><br><span class="line">      <span class="title function_">filterTodos</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable language_">this</span>.<span class="property">visibility</span>) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;all&#x27;</span>: <span class="comment">// href=&quot;#/all&quot; 改成all （语义更强）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todos</span></span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;active&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>( <span class="function"><span class="params">todo</span> =&gt;</span> !todo.<span class="property">completed</span>)</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;completed&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>( <span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">completed</span>)</span><br><span class="line">          <span class="attr">default</span>:</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">visibility</span> = <span class="string">&#x27;all&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todos</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123; <span class="comment">// 监控hash值是否变化：</span></span><br><span class="line">      <span class="comment">// 当URL的片段标识符更改时，将触发hashchange事件，然后调用自定义函数处理。</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="variable language_">this</span>.<span class="property">hashChangeDeal</span>);</span><br><span class="line">    &#125;,   </span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">//并且li标签里改为计算属性。</span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>  <span class="attr">v-for</span>=<span class="string">&quot;todo in filterTodos&quot;</span> <span class="attr">......</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="筛选后红框框"><a href="#筛选后红框框" class="headerlink" title="筛选后红框框"></a>筛选后红框框</h3><p>3、处理All、Active、Completed选中后有红框框。</p>
<ul>
<li>红框框是 class&#x3D;selected的类。</li>
<li>v-bind绑定，利用visibility进行最终这个todos的筛选啊，也判断当前visibility是否是select的。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;filters&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;selected: visibility ==&#x27;all&#x27;&#125;&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;#/all&quot;</span>&gt;</span>All<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;selected: visibility ==&#x27;active&#x27;&#125;&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;#/active&quot;</span>&gt;</span>Active<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;selected: visibility ==&#x27;completed&#x27;&#125;&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;#/completed&quot;</span>&gt;</span>Completed<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="刷新后"><a href="#刷新后" class="headerlink" title="刷新后"></a>刷新后</h3><p>4、刷新后避免重新加载，仍然是Active或Completed的状态。</p>
<ul>
<li>现在：刷新后仍然是这个url，但是是all状态的todos 。URL没有变化，但响应不对。</li>
<li>所以为了在刷新的时候，也能够正常去进行。就在mounted的时候主动调一次hashChangeDeal函数（代表即使URL没有变化，但页面内容渲染完成后也要保持一致性。</li>
<li>使得：刷新后可以去，切换到我们这个active的一个情况。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 监控hash值是否变化：</span></span><br><span class="line">  <span class="comment">// 当URL的片段标识符更改时，将触发hashchange事件，然后调用自定义函数处理。</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="variable language_">this</span>.<span class="property">hashChangeDeal</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">hashChangeDeal</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h3><p>5、比如说我们的多少个元素。</p>
<ul>
<li>?  items left 指的是未完成的。</li>
<li>直接算，也可以用计算属性的return</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;span <span class="keyword">class</span>=<span class="string">&quot;todo-count&quot;</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; todos.filter(todo =&gt; !todo.completed).length &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span> item left&lt;/span&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//或者是计算属性的return</span></span><br><span class="line">      <span class="title function_">itemsLeft</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> !todo.<span class="property">completed</span>).<span class="property">length</span></span><br><span class="line">      &#125;</span><br><span class="line"> &lt;span <span class="keyword">class</span>=<span class="string">&quot;todo-count&quot;</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; itemsLeft &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span> item left&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><p>6、输入框新增</p>
<p><a href="https://blog.csdn.net/Hero_rong/article/details/82685423">往数组里面添加对象，往对象里面添加元素_对象数组添加元素-CSDN博客</a></p>
<ul>
<li><p>回车——调用函数。</p>
</li>
<li><p>可以百度：JavaScript 获取 input 输入框内容</p>
</li>
<li><p>注意：使用事件对象event，那定义函数使用<strong>addItem</strong>(e) {}，<strong>调用</strong>函数方式要写<strong>成不带括号</strong>的”addItem”。</p>
<blockquote>
<p>如果写成带带括号的”addItem()”，会报错。</p>
</blockquote>
</li>
</ul>
<p>！！！！注意输入的内容需要去除前后空格，并且为空时不算！！！。  </p>
<p>！！！回车后，清除输入框内容。——（仔细看操作前后的变化！！！）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// methods:里</span></span><br><span class="line">      <span class="title function_">addItem</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(e.target) // &lt;input placeholder=&quot;What...&gt;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>) <span class="comment">// 获取 input 输入框内容</span></span><br><span class="line">        <span class="comment">//注意要去除前后空格，并且为空时不算。</span></span><br><span class="line">        <span class="comment">//新增</span></span><br><span class="line">        <span class="keyword">const</span> title1= e.<span class="property">target</span>.<span class="property">value</span>.<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">if</span>(!title1)&#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> todo = &#123;<span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), <span class="attr">title</span>:title1, <span class="attr">completed</span>: <span class="literal">false</span>&#125;</span><br><span class="line">        <span class="comment">// console.log(todo) // &#123;id: 1714469430306, title: &#x27;111111&#x27;, completed: false&#125;</span></span><br><span class="line">        <span class="comment">// this.todos.push(todo) //向数组的末尾添加一个</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">unshift</span>(todo) <span class="comment">//向数组的开头添加。也可直接用大括号添加对象。</span></span><br><span class="line">        <span class="comment">//回车后，清除输入框内容。</span></span><br><span class="line">        e.<span class="property">target</span>.<span class="property">value</span>=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment">// console.log(this.todos)</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// template里</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;new-todo&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;addItem&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;What needs to be done?&quot;</span> <span class="attr">autofocus</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="删除单个"><a href="#删除单个" class="headerlink" title="删除单个"></a>删除单个</h3><p>7、删除单个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// methods:里</span></span><br><span class="line">      <span class="title function_">deleteItem</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;deleteItem: &#x27;</span>) <span class="comment">// &lt;input placeholder=&quot;What...&gt;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(id) <span class="comment">// &lt;input placeholder=&quot;What...&gt;</span></span><br><span class="line">        <span class="comment">//使用filter()方法删除元素 </span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">todos</span> = <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>( <span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">id</span> != id)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">todos</span>)</span><br><span class="line">        <span class="comment">//需要再刷新下吗？ ——事实不需要，v-for就是实时的。</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template里</span></span><br><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">&quot;destroy&quot;</span> @click=<span class="string">&quot;deleteItem(todo.id)&quot;</span>&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>方法2：:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// methods:里</span></span><br><span class="line">      <span class="title function_">deleteItem</span>(<span class="params">todo</span>) &#123;</span><br><span class="line">        <span class="comment">//使用splice()方法 删除指定元素，需要查找下标。</span></span><br><span class="line">        <span class="comment">//下标用indexOf</span></span><br><span class="line">        <span class="keyword">let</span> idx = <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">indexOf</span>(todo)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">splice</span>(idx, <span class="number">1</span>) <span class="comment">// 从下标为idx的位置开始，删除1个元素。</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(idx) </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">todos</span>) <span class="comment">//splice直接改变原始数组。</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template里</span></span><br><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">&quot;destroy&quot;</span> @click=<span class="string">&quot;deleteItem(todo)&quot;</span>&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="clear完成的"><a href="#clear完成的" class="headerlink" title="clear完成的"></a>clear完成的</h3><p>8、清除已经完成的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// methods:里</span></span><br><span class="line">      <span class="title function_">clearCompleted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 清除已经完成的。</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">todos</span> = <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>( <span class="function"><span class="params">todo</span> =&gt;</span> !todo.<span class="property">completed</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template里</span></span><br><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">&quot;clear-completed&quot;</span> @click=<span class="string">&quot;clearCompleted&quot;</span>&gt;<span class="title class_">Clear</span> completed&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="底部效果"><a href="#底部效果" class="headerlink" title="底部效果"></a>底部效果</h3><p>9、当你所有的这个项目都被清除掉的话，底部的折叠效果 应该是不显示的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//data() 里。</span></span><br><span class="line"><span class="attr">footerShow</span>: <span class="literal">false</span>  </span><br><span class="line"><span class="comment">// computed：里  （是个属性。计算属性，来放逻辑。）</span></span><br><span class="line">      <span class="title function_">footerIsShow</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//默认页脚应隐藏，并在有待办事项时显示</span></span><br><span class="line">        <span class="comment">// len =0，不展示。</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">todos</span>.<span class="property">length</span> == <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">footerShow</span> = <span class="literal">false</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">footerShow</span> = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">footerShow</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template里。（不仅包括样式，还包括整体内的元素也不显示）</span></span><br><span class="line">    &lt;footer :<span class="keyword">class</span>=<span class="string">&quot;&#123;footer: footerIsShow&#125;&quot;</span> v-show=<span class="string">&quot;footerIsShow&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="items"><a href="#items" class="headerlink" title="items"></a>items</h3><p>10:&gt;1项会变成items</p>
<p>未完成的为0： 0 items left! 。未完成的为1： 1 item left! 。未完成的为2： 2 items left! 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//data() 里。</span></span><br><span class="line">        <span class="attr">leftItem</span>: <span class="string">&#x27;items&#x27;</span></span><br><span class="line"><span class="comment">// computed：里  （是个属性。计算属性，来放逻辑。）</span></span><br><span class="line">      <span class="title function_">leftItems</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// if(this.todos.filter(todo =&gt; !todo.completed).length &lt;= 1)&#123;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> !todo.<span class="property">completed</span>).<span class="property">length</span> == <span class="number">1</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">leftItem</span> = <span class="string">&#x27;item&#x27;</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">leftItem</span> = <span class="string">&#x27;items&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">leftItem</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template里。（不仅包括样式，还包括整体内的元素也不显示）</span></span><br><span class="line">      &lt;!-- <span class="title class_">This</span> should be <span class="string">`0 items left`</span> by <span class="keyword">default</span> --&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;todo-count&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; itemsLeft &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> &#123;&#123;leftItems&#125;&#125; left<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="双击编辑"><a href="#双击编辑" class="headerlink" title="双击编辑"></a>双击编辑</h3><p>11：双击后可以做编辑。用dblclick进行内容的更改，然后再通过v-model做一个内容的控制。</p>
<blockquote>
<p>通过操作todomvc的官网，可以看到在双击编辑时类为editing。</p>
<p><img src="/posts/VueNote/830bd2954788092beaffc106faac772.png" alt="830bd2954788092beaffc106faac772" loading="lazy"></p>
</blockquote>
<ul>
<li>已经完成的也可以修改。</li>
<li>v-show使这个类双击使才展示input框。</li>
<li>尚未实现：VUE 点击其它区域触发事件 。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//data() 里。</span></span><br><span class="line">        <span class="attr">todos</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;事项1&#x27;</span>,</span><br><span class="line">            <span class="attr">completed</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">editing</span>: <span class="literal">false</span></span><br><span class="line">          &#125;],</span><br><span class="line"><span class="comment">// methods:里</span></span><br><span class="line">      <span class="title function_">editItem</span>(<span class="params">todo</span>)&#123; <span class="comment">//实现回车后保存，不可编辑</span></span><br><span class="line">        <span class="comment">//保存到数组里</span></span><br><span class="line">        <span class="comment">//v-model 已经实时修改了。只需改变状态。</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(todo.<span class="property">title</span>) </span><br><span class="line">        todo.<span class="property">editing</span>=<span class="literal">false</span></span><br><span class="line">        <span class="comment">// console.log(this.todos)</span></span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">editText</span>(<span class="params">todo</span>) &#123;<span class="comment">//实现双击后可编辑</span></span><br><span class="line">        <span class="comment">//  console.log(&#x27;editText&#x27;) </span></span><br><span class="line">        <span class="comment">//  console.log(todo.title) </span></span><br><span class="line">         todo.<span class="property">editing</span>=<span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// template里</span></span><br><span class="line">&lt;ul class=&quot;todo-list&quot;&gt;</span><br><span class="line">  &lt;!-- 显示列表项的结构列表项在编辑时应获得类“editing”，在标记为已完成时应获得“completed” 。所以应该是个属性,不然全部可编辑应该不对--&gt;</span><br><span class="line">  &lt;li </span><br><span class="line">  v-for=&quot;todo in filterTodos&quot; </span><br><span class="line">  :key=&quot;todo.id&quot;</span><br><span class="line">  :class=&quot;&#123;completed: todo.completed, editing:todo.editing&#125;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">      &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; </span><br><span class="line">      v-model=&quot;todo.completed&quot;&gt;</span><br><span class="line">      &lt;label @dblclick=&quot;editText(todo)&quot; &gt;&#123;&#123;todo.title&#125;&#125; &lt;/label&gt;</span><br><span class="line">      &lt;button class=&quot;destroy&quot; @click=&quot;deleteItem(todo)&quot;&gt;&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;input :class=&quot;&#123;edit:todo.editing&#125;&quot; v-model=&quot;todo.title&quot; @keyup.enter=&quot;editItem(todo)&quot; v-show=&quot;todo.editing&quot;&gt;</span><br><span class="line">//&lt;input @dblclick=&quot;editText&quot; :class=&quot;&#123;edit:isEditing&#125;&quot;  v-show=&quot;isEditing&quot; value=&quot;Create a TodoMVC template&quot;&gt;</span><br><span class="line">  &lt;/li&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过操作官网，可以看到在双击编辑时类为editing，&lt;li class&#x3D;”editing”，<br>对应这个&lt;input @dblclick&#x3D;”editText” class&#x3D;”edit” value&#x3D;”Create a TodoMVC template”&gt;</p>
<p>天哪，duplicate attribute: :class，说明v-bind不能绑定2个。</p>
<ul>
<li>双击，显示todo的内容，出现编辑框。<br>回车后保存todo的内容。</li>
</ul>
<p>在编辑时应获得类“editing”，在标记为已完成时应获得“completed”</p>
<p>默认情况下是completed类，双击下是另一个类。</p>
<p>:class&#x3D;”{completed: todo.completed, editing:isEditing}”</p>
</blockquote>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记</title>
    <url>/posts/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="vue核心语法"><a href="#vue核心语法" class="headerlink" title="vue核心语法"></a>vue核心语法</h1><p><img src="/posts/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/7e7d013ec57818bd9e0b93afee147ee13decdbe94401a0-DfOpXx.png" alt="7e7d013ec57818bd9e0b93afee147ee13decdbe94401a0-DfOpXx" loading="lazy"></p>
<h2 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Vue.js Example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!-- 插值表达式 --&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; title &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; content &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; output() &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; output() &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; output() &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;!-- computed不用加() --&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; outputCon &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; outputCon &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; outputCon &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;!-- 4.指令 --&gt;</span><br><span class="line">         &lt;!-- 内容指令   --&gt;&lt;!-- text,html都会覆盖原始内容 --&gt;</span><br><span class="line">         &lt;p v-text=&quot;htmlContent&quot;&gt;123&lt;/p&gt;</span><br><span class="line">         &lt;p v-html=&quot;htmlContent&quot;&gt;123&lt;/p&gt;</span><br><span class="line">         </span><br><span class="line">          &lt;!-- 渲染指令 --&gt;</span><br><span class="line">        &lt;p v-for=&quot;item in 3&quot;&gt;Elaina&lt;/p&gt;</span><br><span class="line">        &lt;p v-for=&quot;item in arr&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p v-for=&quot;(item,key,index) in obj&quot;&gt;&#123;&#123;item&#125;&#125;&amp;nbsp;&#123;&#123;key&#125;&#125;&amp;nbsp;&#123;&#123;index&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p v-if=&quot;&quot;&gt;1017&lt;/p&gt;</span><br><span class="line">        &lt;p v-show=&quot;&quot;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 属性指令 --&gt;</span><br><span class="line">         &lt;p v-bind:title=&quot;title&quot;&gt;123&lt;/p&gt;</span><br><span class="line">         &lt;p :title=&quot;title&quot;&gt;123&lt;/p&gt;</span><br><span class="line">            &lt;!-- v-bind可以简写成: --&gt;</span><br><span class="line"></span><br><span class="line">         &lt;!-- 事件指令 --&gt;</span><br><span class="line">          &lt;button v-on:click=&quot;output&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">          &lt;button @click=&quot;output&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">          &lt;!-- v-on简写成@ --&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- 表单指令 --&gt;</span><br><span class="line">          &lt;hr&gt; </span><br><span class="line">          &lt;p&gt;表单指令&lt;/p&gt;</span><br><span class="line">           &lt;input type=&quot;text&quot; v-model=&quot;inputValue&quot;&gt;</span><br><span class="line">           &lt;p v-text=&quot;inputValue&quot;&gt;&lt;/p&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">           &lt;!-- 5.修饰符 --&gt;</span><br><span class="line">            &lt;p&gt;修饰符&lt;/p&gt;</span><br><span class="line">           &lt;input type=&quot;text&quot; v-model.trim=&quot;inputValue&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 1. 响应式数据与插值表达式</span><br><span class="line">        const vm = new Vue(&#123;</span><br><span class="line">            el: &#x27;#app&#x27;,</span><br><span class="line">            data() &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    title: &#x27;这是文本&#x27;,</span><br><span class="line">                    content: &#x27;这是内容&#x27;,</span><br><span class="line">                    htmlContent: &#x27;&lt;h1&gt;这是html内容&lt;/h1&gt;&#x27;,</span><br><span class="line">                    arr:[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;],</span><br><span class="line">                    obj:&#123;a:1,b:2,c:3&#125;,</span><br><span class="line">                    inputValue:&#x27;默认内容&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //1.3函数methods属性</span><br><span class="line">            methods: &#123;</span><br><span class="line">                output()&#123;</span><br><span class="line">                    console.log(&quot;output&quot;);</span><br><span class="line">                    return &quot;Test&quot;+this.title + this.content;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //2计算属性computed属性:具有缓存性质，只有当计算属性的值发生变化时，才会重新计算</span><br><span class="line">            computed: &#123;</span><br><span class="line">                outputCon()&#123;</span><br><span class="line">                    console.log(&quot;computed&quot;);</span><br><span class="line">                    return &quot;Test&quot;+this.title + this.content;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //3.侦听器watch属性:监听数据的变化，并执行相应的函数</span><br><span class="line">            watch: &#123;</span><br><span class="line">                title(newVal, oldVal)&#123;</span><br><span class="line">                    console.log(&quot;title changed&quot;, newVal, oldVal);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>在 Vue.js 中，响应式数据、插值表达式、计算属性、侦听器和指令是关键概念。以下是详细讲解和知识笔记：</p>
<h2 id="1-响应式数据-Reactive-Data"><a href="#1-响应式数据-Reactive-Data" class="headerlink" title="1. 响应式数据 (Reactive Data)"></a>1. 响应式数据 (Reactive Data)</h2><p>Vue.js 中的数据对象是响应式的，即当数据发生变化时，视图会自动更新。通过 <code>data</code> 定义的数据是响应式的，Vue.js 使用<strong>依赖追踪</strong>来检测数据的变化并更新 DOM。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;这是标题&#x27;</span>,</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;这是内容&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在模板中使用 <code>&#123;&#123; title &#125;&#125;</code>，当 <code>title</code> 变化时，DOM 会自动更新。</p>
<h2 id="2-插值表达式-Interpolation"><a href="#2-插值表达式-Interpolation" class="headerlink" title="2. 插值表达式 (Interpolation)"></a>2. 插值表达式 (Interpolation)</h2><p>插值表达式用于将数据绑定到 HTML 中。使用 <code>&#123;&#123; &#125;&#125;</code> 可以直接在模板中显示数据。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="comment">&lt;!-- 显示 title 的值 --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-计算属性-Computed-Properties"><a href="#3-计算属性-Computed-Properties" class="headerlink" title="3. 计算属性 (Computed Properties)"></a>3. 计算属性 (Computed Properties)</h2><p>计算属性是依赖其他数据计算得到的值，具有<strong>缓存</strong>的功能，只有相关依赖变化时才会重新计算。和方法不同，计算属性不会重复执行，除非依赖的数据改变。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">outputCon</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Test &quot;</span> + <span class="variable language_">this</span>.<span class="property">title</span> + <span class="variable language_">this</span>.<span class="property">content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当 <code>title</code> 或 <code>content</code> 变化时，<code>outputCon</code> 会被重新计算，否则将直接返回缓存的值。</p>
<h2 id="4-侦听器-Watchers"><a href="#4-侦听器-Watchers" class="headerlink" title="4. 侦听器 (Watchers)"></a>4. 侦听器 (Watchers)</h2><p>侦听器用于监听数据的变化，并在数据变化时执行特定操作，常用于异步任务或需要手动执行额外逻辑时。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="title function_">title</span>(<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Title changed from&#x27;</span>, oldVal, <span class="string">&#x27;to&#x27;</span>, newVal);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每当 <code>title</code> 改变时，侦听器会记录新旧值。</p>
<h2 id="5-指令-Directives"><a href="#5-指令-Directives" class="headerlink" title="5. 指令 (Directives)"></a>5. 指令 (Directives)</h2><p>Vue 提供了很多指令来操作 DOM，常见的有 <code>v-text</code>, <code>v-html</code>, <code>v-if</code>, <code>v-show</code>, <code>v-for</code>, <code>v-bind</code>, <code>v-on</code> 等。</p>
<h3 id="内容指令"><a href="#内容指令" class="headerlink" title="内容指令"></a>内容指令</h3><ul>
<li><code>v-text</code>：替换元素的文本内容。</li>
<li><code>v-html</code>：将数据作为 HTML 插入，允许解析 HTML 标签。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;htmlContent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="渲染指令"><a href="#渲染指令" class="headerlink" title="渲染指令"></a>渲染指令</h3><ul>
<li><code>v-for</code>：循环渲染列表。</li>
<li><code>v-if</code>：根据条件渲染元素，元素不存在于 DOM 中。</li>
<li><code>v-show</code>：根据条件显示&#x2F;隐藏元素，元素仍然存在于 DOM 中。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in arr&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;showItem&quot;</span>&gt;</span>显示内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;showItem&quot;</span>&gt;</span>显示或隐藏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="属性指令"><a href="#属性指令" class="headerlink" title="属性指令"></a>属性指令</h3><ul>
<li><code>v-bind</code>：动态绑定元素的属性，可以简写为 <code>:</code>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 简写 --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件指令"><a href="#事件指令" class="headerlink" title="事件指令"></a>事件指令</h3><ul>
<li><code>v-on</code>：绑定事件监听器，可以简写为 <code>@</code>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- 简写 --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表单指令"><a href="#表单指令" class="headerlink" title="表单指令"></a>表单指令</h3><ul>
<li><code>v-model</code>：双向绑定表单元素的数据。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; inputValue &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-修饰符-Modifiers"><a href="#6-修饰符-Modifiers" class="headerlink" title="6. 修饰符 (Modifiers)"></a>6. 修饰符 (Modifiers)</h2><p>修饰符是对指令的附加操作，常见于事件处理和表单输入中。例如：</p>
<ul>
<li><code>.trim</code>：去除输入框两端的空白。</li>
<li><code>.lazy</code>：在 <code>input</code> 失焦时更新数据，而不是在每次输入时更新。</li>
</ul>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;inputValue&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 输入时自动去除两端空格 --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="知识笔记总结："><a href="#知识笔记总结：" class="headerlink" title="知识笔记总结："></a>知识笔记总结：</h2><ol>
<li><strong>响应式数据</strong>让 Vue.js 能够自动追踪数据变化并更新 DOM。</li>
<li><strong>插值表达式</strong>用于将数据直接显示在 HTML 中。</li>
<li><strong>计算属性</strong>具有缓存功能，用于处理复杂的逻辑计算。</li>
<li><strong>侦听器</strong>适合监听数据变化并执行额外逻辑，尤其是异步任务。</li>
<li><strong>指令</strong>提供了强大的模板功能，如条件渲染、列表渲染、事件处理等。</li>
<li><strong>修饰符</strong>为指令增加额外的功能，如去除空白字符、事件捕获等。</li>
</ol>
<p>希望这能帮助你更深入了解 Vue.js 的响应式数据与核心功能。如果有其他问题，欢迎随时讨论！</p>
<h1 id="脚手架与组件化开发"><a href="#脚手架与组件化开发" class="headerlink" title="脚手架与组件化开发"></a>脚手架与组件化开发</h1><p><img src="/posts/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WXS7VQMlCQOoZYm.jpeg" alt="WXS7VQMlCQOoZYm" loading="lazy"></p>
<hr>
<h2 id="一、脚手架（Vue-CLI）"><a href="#一、脚手架（Vue-CLI）" class="headerlink" title="一、脚手架（Vue CLI）"></a>一、脚手架（Vue CLI）</h2><h3 id="1-什么是脚手架？"><a href="#1-什么是脚手架？" class="headerlink" title="1. 什么是脚手架？"></a>1. 什么是脚手架？</h3><p><strong>脚手架</strong>（Scaffolding）是指用于快速搭建项目基础结构的工具。在 Vue.js 中，官方提供了 <strong>Vue CLI</strong>（Command Line Interface），它是一个基于 Node.js 的命令行工具，用于快速创建 Vue.js 项目，集成了现代前端开发所需的各种功能和配置。</p>
<h3 id="2-Vue-CLI-的功能和优势"><a href="#2-Vue-CLI-的功能和优势" class="headerlink" title="2. Vue CLI 的功能和优势"></a>2. Vue CLI 的功能和优势</h3><ul>
<li><strong>快速搭建项目</strong>：通过简单的命令即可生成一个带有预设配置的 Vue.js 项目。</li>
<li><strong>可定制化</strong>：支持自定义配置，满足不同项目的特殊需求。</li>
<li><strong>插件系统</strong>：提供了丰富的官方和社区插件，如路由（Vue Router）、状态管理（Vuex）、TypeScript 支持等。</li>
<li><strong>热重载</strong>：内置开发服务器，支持模块热替换（HMR），提高开发效率。</li>
<li><strong>优化的生产构建</strong>：自动进行代码分割、压缩、优化，提升应用性能。</li>
<li><strong>单元测试和端到端测试</strong>：集成了 Jest、Mocha 等测试框架，支持编写测试用例。</li>
</ul>
<h3 id="3-安装和使用-Vue-CLI"><a href="#3-安装和使用-Vue-CLI" class="headerlink" title="3. 安装和使用 Vue CLI"></a>3. 安装和使用 Vue CLI</h3><h4 id="3-1-安装-Vue-CLI"><a href="#3-1-安装-Vue-CLI" class="headerlink" title="3.1 安装 Vue CLI"></a>3.1 安装 Vue CLI</h4><p>确保已安装 Node.js 和 npm，然后在命令行中全局安装 Vue CLI：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<p>安装完成后，可以使用以下命令查看版本，验证安装是否成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure>

<h4 id="3-2-创建新项目"><a href="#3-2-创建新项目" class="headerlink" title="3.2 创建新项目"></a>3.2 创建新项目</h4><p>使用 <code>vue create</code> 命令创建新项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create my-project</span><br></pre></td></tr></table></figure>

<p>系统会提示选择预设配置：</p>
<ul>
<li><strong>默认预设</strong>：包含 Babel、ESLint 等基本配置。</li>
<li><strong>手动选择特性</strong>：可以根据需要添加路由、Vuex、CSS 预处理器等。</li>
</ul>
<h4 id="3-3-运行项目"><a href="#3-3-运行项目" class="headerlink" title="3.3 运行项目"></a>3.3 运行项目</h4><p>进入项目目录，启动开发服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<p>默认情况下，开发服务器运行在 <code>http://localhost:8080</code>。</p>
<h3 id="4-Vue-CLI-项目结构"><a href="#4-Vue-CLI-项目结构" class="headerlink" title="4. Vue CLI 项目结构"></a>4. Vue CLI 项目结构</h3><p>Vue CLI 生成的项目结构通常如下：</p>
<ul>
<li><code>public/</code>：公共静态资源目录，存放未被 Webpack 处理的文件。</li>
<li><code>src/</code>：源代码目录。<ul>
<li><code>main.js</code>：应用的入口文件。</li>
<li><code>App.vue</code>：根组件。</li>
<li><code>assets/</code>：资源文件夹，存放图片、字体等。</li>
<li><code>components/</code>：存放全局或通用组件。</li>
</ul>
</li>
<li><code>babel.config.js</code>：Babel 配置文件。</li>
<li><code>package.json</code>：项目元数据和依赖项。</li>
<li><code>vue.config.js</code>：可选的 Vue CLI 配置文件，用于修改默认设置。</li>
</ul>
<h3 id="5-配置和自定义"><a href="#5-配置和自定义" class="headerlink" title="5. 配置和自定义"></a>5. 配置和自定义</h3><p>可以在 <code>vue.config.js</code> 中对项目进行自定义配置，如修改端口、配置代理、添加别名等。</p>
<p><strong>示例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8081</span>, <span class="comment">// 修改端口</span></span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&#x27;http://api.example.com&#x27;</span> <span class="comment">// 配置代理</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">      <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/&#x27;</span>) <span class="comment">// 添加路径别名</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="6-使用插件"><a href="#6-使用插件" class="headerlink" title="6. 使用插件"></a>6. 使用插件</h3><p>Vue CLI 提供了插件系统，可以在创建项目时或之后添加插件。</p>
<p><strong>添加插件示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue add router</span><br><span class="line">vue add vuex</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二、组件化开发"><a href="#二、组件化开发" class="headerlink" title="二、组件化开发"></a>二、组件化开发</h2><h3 id="1-什么是组件化？"><a href="#1-什么是组件化？" class="headerlink" title="1. 什么是组件化？"></a>1. 什么是组件化？</h3><p><strong>组件化</strong>是将界面划分为独立、可复用的组件，每个组件包含自己的模板、逻辑和样式。Vue.js 强烈鼓励组件化开发，以提高代码的可维护性和复用性。</p>
<h3 id="2-组件的基本概念"><a href="#2-组件的基本概念" class="headerlink" title="2. 组件的基本概念"></a>2. 组件的基本概念</h3><ul>
<li><strong>组件实例</strong>：每个组件都是一个 Vue 实例，拥有自己的数据、方法、生命周期等。</li>
<li><strong>父子关系</strong>：组件可以嵌套，父组件可以传递数据给子组件。</li>
<li><strong>封装性</strong>：组件内部的实现细节对外部是透明的。</li>
</ul>
<h3 id="3-创建组件"><a href="#3-创建组件" class="headerlink" title="3. 创建组件"></a>3. 创建组件</h3><h4 id="3-1-单文件组件（-vue-文件）"><a href="#3-1-单文件组件（-vue-文件）" class="headerlink" title="3.1 单文件组件（.vue 文件）"></a>3.1 单文件组件（.vue 文件）</h4><p>这是 Vue.js 推荐的组件书写方式，包含 <code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 三个部分。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- MyComponent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-component&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; content &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;MyComponent&#x27;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    title: String,</span><br><span class="line">    content: String</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.my-component &#123;</span><br><span class="line">  /* 样式定义 */</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-注册组件"><a href="#3-2-注册组件" class="headerlink" title="3.2 注册组件"></a>3.2 注册组件</h4><p><strong>局部注册：</strong></p>
<p>在使用组件的父组件中导入并注册：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;my-component :title=&quot;title&quot; :content=&quot;content&quot;&gt;&lt;/my-component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyComponent from &#x27;./components/MyComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyComponent</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: &#x27;组件标题&#x27;,</span><br><span class="line">      content: &#x27;组件内容&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>全局注册：</strong></p>
<p>在 <code>main.js</code> 中注册，全局组件可在任何地方使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyComponent.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyComponent&#x27;</span>, <span class="title class_">MyComponent</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-组件之间的通信"><a href="#4-组件之间的通信" class="headerlink" title="4. 组件之间的通信"></a>4. 组件之间的通信</h3><h4 id="4-1-父子组件通信"><a href="#4-1-父子组件通信" class="headerlink" title="4.1 父子组件通信"></a>4.1 父子组件通信</h4><ul>
<li><p><strong>父组件传递数据给子组件</strong>：使用 <code>props</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件定义 props --&gt;</span><br><span class="line">props: &#123;</span><br><span class="line">  message: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>子组件触发事件通知父组件</strong>：使用 <code>$emit</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件中 --&gt;</span><br><span class="line">this.$emit(&#x27;eventName&#x27;, payload);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件中 --&gt;</span><br><span class="line">&lt;child-component @eventName=&quot;handleEvent&quot;&gt;&lt;/child-component&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-2-兄弟组件通信"><a href="#4-2-兄弟组件通信" class="headerlink" title="4.2 兄弟组件通信"></a>4.2 兄弟组件通信</h4><ul>
<li><p><strong>通过父组件中转</strong>：将数据提升到共同的父组件，由父组件管理和传递。</p>
</li>
<li><p><strong>事件总线（Event Bus）</strong>：创建一个空的 Vue 实例作为事件总线，但在 Vue 3 中不推荐使用。</p>
</li>
<li><p><strong>Vuex 状态管理</strong>：对于复杂的应用，使用 Vuex 统一管理状态。</p>
</li>
</ul>
<h4 id="4-3-跨级组件通信"><a href="#4-3-跨级组件通信" class="headerlink" title="4.3 跨级组件通信"></a>4.3 跨级组件通信</h4><ul>
<li><p><strong>Provide&#x2F;Inject</strong>：祖先组件提供数据，后代组件注入数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 祖先组件</span></span><br><span class="line"><span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">dataKey</span>: <span class="variable language_">this</span>.<span class="property">dataValue</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后代组件</span></span><br><span class="line"><span class="attr">inject</span>: [<span class="string">&#x27;dataKey&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-插槽（Slots）"><a href="#5-插槽（Slots）" class="headerlink" title="5. 插槽（Slots）"></a>5. 插槽（Slots）</h3><p>插槽用于在组件中插入父组件的内容，增强组件的灵活性。</p>
<h4 id="5-1-默认插槽"><a href="#5-1-默认插槽" class="headerlink" title="5.1 默认插槽"></a>5.1 默认插槽</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;child-component&gt;</span><br><span class="line">  &lt;p&gt;插入的内容&lt;/p&gt;</span><br><span class="line">&lt;/child-component&gt;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-具名插槽"><a href="#5-2-具名插槽" class="headerlink" title="5.2 具名插槽"></a>5.2 具名插槽</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt; &lt;!-- 默认插槽 --&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;child-component&gt;</span><br><span class="line">  &lt;template v-slot:header&gt;</span><br><span class="line">    &lt;h1&gt;标题内容&lt;/h1&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  &lt;p&gt;主要内容&lt;/p&gt;</span><br><span class="line">  &lt;template v-slot:footer&gt;</span><br><span class="line">    &lt;p&gt;页脚内容&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/child-component&gt;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-作用域插槽"><a href="#5-3-作用域插槽" class="headerlink" title="5.3 作用域插槽"></a>5.3 作用域插槽</h4><p>用于将子组件的数据传递给父组件的插槽内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot :user=&quot;userData&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userData: &#123; name: &#x27;Alice&#x27;, age: 25 &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;child-component v-slot:default=&quot;slotProps&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; slotProps.user.name &#125;&#125; - &#123;&#123; slotProps.user.age &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/child-component&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-动态组件和异步组件"><a href="#6-动态组件和异步组件" class="headerlink" title="6. 动态组件和异步组件"></a>6. 动态组件和异步组件</h3><h4 id="6-1-动态组件"><a href="#6-1-动态组件" class="headerlink" title="6.1 动态组件"></a>6.1 动态组件</h4><p>使用 <code>&lt;component&gt;</code> 标签和 <code>:is</code> 属性，根据条件渲染不同的组件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;component :is=&quot;currentComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;button @click=&quot;toggleComponent&quot;&gt;切换组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      currentComponent: &#x27;ComponentA&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA,</span><br><span class="line">    ComponentB</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    toggleComponent() &#123;</span><br><span class="line">      this.currentComponent = this.currentComponent === &#x27;ComponentA&#x27; ? &#x27;ComponentB&#x27; : &#x27;ComponentA&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="6-2-异步组件"><a href="#6-2-异步组件" class="headerlink" title="6.2 异步组件"></a>6.2 异步组件</h4><p>对于大型组件，可以使用异步加载，优化首屏加载速度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">AsyncComponent</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./components/AsyncComponent.vue&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="7-组件生命周期"><a href="#7-组件生命周期" class="headerlink" title="7. 组件生命周期"></a>7. 组件生命周期</h3><p>组件在创建、更新、销毁的过程中，会触发一系列的生命周期钩子函数，可以在这些函数中执行相应的逻辑。</p>
<ul>
<li><p><strong>常用生命周期钩子：</strong></p>
<ul>
<li><code>beforeCreate</code>：实例初始化之后，数据观测和事件配置之前。</li>
<li><code>created</code>：实例已创建，完成数据观测、属性和方法的运算，尚未挂载。</li>
<li><code>beforeMount</code>：在挂载开始之前调用。</li>
<li><code>mounted</code>：实例挂载到 DOM 上后调用。</li>
<li><code>beforeUpdate</code>：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li>
<li><code>updated</code>：由于数据更改导致的虚拟 DOM 重新渲染和打补丁之后调用。</li>
<li><code>beforeDestroy</code>：实例销毁之前调用。</li>
<li><code>destroyed</code>：实例销毁后调用。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="知识笔记总结"><a href="#知识笔记总结" class="headerlink" title="知识笔记总结"></a>知识笔记总结</h2><h3 id="脚手架（Vue-CLI）"><a href="#脚手架（Vue-CLI）" class="headerlink" title="脚手架（Vue CLI）"></a>脚手架（Vue CLI）</h3><ul>
<li><strong>安装与创建项目</strong>：<code>npm install -g @vue/cli</code>，<code>vue create project-name</code>。</li>
<li><strong>项目结构</strong>：了解 Vue CLI 项目的基本目录结构和文件作用。</li>
<li><strong>配置与插件</strong>：使用 <code>vue.config.js</code> 进行自定义配置，使用插件系统扩展功能。</li>
<li><strong>命令</strong>：<ul>
<li><code>npm run serve</code>：启动开发服务器。</li>
<li><code>npm run build</code>：构建生产环境代码。</li>
<li><code>npm run test</code>：运行测试。</li>
</ul>
</li>
</ul>
<h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3><ul>
<li><strong>组件创建</strong>：使用单文件组件 <code>.vue</code>，包含模板、脚本和样式。</li>
<li><strong>组件注册</strong>：区分全局注册和局部注册，推荐使用局部注册管理组件。</li>
<li><strong>组件通信</strong>：<ul>
<li><strong>父子通信</strong>：<code>props</code> 和 <code>$emit</code>。</li>
<li><strong>兄弟通信</strong>：通过共同的父组件或状态管理（Vuex）。</li>
<li><strong>跨级通信</strong>：<code>provide</code> 和 <code>inject</code>。</li>
</ul>
</li>
<li><strong>插槽（Slots）</strong>：使用默认插槽、具名插槽和作用域插槽增强组件的灵活性。</li>
<li><strong>动态组件</strong>：使用 <code>&lt;component :is=&quot;componentName&quot;&gt;</code> 动态渲染组件。</li>
<li><strong>生命周期钩子</strong>：理解各个生命周期的作用，合理使用钩子函数。</li>
</ul>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul>
<li><strong>组件命名</strong>：遵循命名规范，使用大驼峰或短横线命名法。</li>
<li><strong>单一职责</strong>：每个组件只负责完成一个功能，保持组件的高内聚低耦合。</li>
<li><strong>样式作用域</strong>：使用 <code>scoped</code> 或 CSS Modules，防止样式污染。</li>
<li><strong>性能优化</strong>：使用异步组件、路由懒加载等手段优化性能。</li>
<li><strong>代码规范</strong>：遵循 ESLint 规则，保持代码风格一致。</li>
</ul>
<hr>
<p>希望以上内容能帮助你深入理解 Vue.js 中的脚手架和组件化开发。如果你还有其他问题，欢迎继续提问！</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>扫雷</title>
    <url>/posts/saolei/</url>
    <content><![CDATA[<iframe src="./扫雷.html" width="100%" height="600px"></iframe>

]]></content>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>「新」动计划·编程入门Java</title>
    <url>/posts/%E3%80%8C%E6%96%B0%E3%80%8D%E5%8A%A8%E8%AE%A1%E5%88%92%20%C2%B7%20%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8Java/</url>
    <content><![CDATA[<h1 id="「新」动计划-·-编程入门"><a href="#「新」动计划-·-编程入门" class="headerlink" title="「新」动计划 · 编程入门"></a><strong>「新」动计划 · 编程入门</strong></h1><h2 id="基础语法-数据类型"><a href="#基础语法-数据类型" class="headerlink" title="基础语法 &amp; 数据类型"></a>基础语法 &amp; 数据类型</h2><h3 id="2235-两整数相加"><a href="#2235-两整数相加" class="headerlink" title="2235. 两整数相加"></a><a href="https://leetcode.cn/problems/add-two-integers/">2235. 两整数相加</a></h3><blockquote>
<p>给你两个整数 <code>num1</code> 和 <code>num2</code>，返回这两个整数的和。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：num1 = 12, num2 = 5</span><br><span class="line">输出：17</span><br><span class="line">解释：num1 是 12，num2 是<span class="number"> 5 </span>，它们的和是<span class="number"> 12 </span>+<span class="number"> 5 </span>=<span class="number"> 17 </span>，因此返回<span class="number"> 17 </span>。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">输入：<span class="symbol">num1</span> = <span class="number">-10</span>, <span class="symbol">num2</span> = <span class="number">4</span></span><br><span class="line">输出：<span class="number">-6</span></span><br><span class="line">解释：<span class="symbol">num1</span> + <span class="symbol">num2</span> = <span class="number">-6</span> ，因此返回 <span class="number">-6</span> 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>-100 &lt;= num1, num2 &lt;= 100</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1+num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2469-温度转换"><a href="#2469-温度转换" class="headerlink" title="2469. 温度转换"></a><a href="https://leetcode.cn/problems/convert-the-temperature/">2469. 温度转换</a></h3><blockquote>
<p>给你一个四舍五入到两位小数的非负浮点数 <code>celsius</code> 来表示温度，以 <strong>摄氏度</strong>（<strong>Celsius</strong>）为单位。</p>
<p>你需要将摄氏度转换为 <strong>开氏度</strong>（<strong>Kelvin</strong>）和 <strong>华氏度</strong>（<strong>Fahrenheit</strong>），并以数组 <code>ans = [kelvin, fahrenheit]</code> 的形式返回结果。</p>
<p>返回数组 <em><code>ans</code></em> 。与实际答案误差不超过 <code>10-5</code> 的会视为正确答案<strong>。</strong></p>
<p><strong>注意：</strong></p>
<ul>
<li><code>开氏度 = 摄氏度 + 273.15</code></li>
<li><code>华氏度 = 摄氏度 * 1.80 + 32.00</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span>[] convertTemperature(<span class="type">double</span> celsius) &#123;</span><br><span class="line">        <span class="type">double</span>[] ans=<span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">2</span>];</span><br><span class="line">        ans[<span class="number">0</span>]=celsius+<span class="number">273.15</span>;</span><br><span class="line">        ans[<span class="number">1</span>]=celsius*<span class="number">1.80</span>+<span class="number">32.00</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="2413-最小偶倍数"><a href="#2413-最小偶倍数" class="headerlink" title="2413. 最小偶倍数"></a><a href="https://leetcode.cn/problems/smallest-even-multiple/">2413. 最小偶倍数</a></h3><p>给你一个正整数 <code>n</code> ，返回 <code>2</code> 和 <code>n</code> 的最小公倍数（正整数）。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：n = 5</span><br><span class="line">输出：10</span><br><span class="line">解释：5 和<span class="number"> 2 </span>的最小公倍数是<span class="number"> 10 </span>。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：n = 6</span><br><span class="line">输出：6</span><br><span class="line">解释：6 和<span class="number"> 2 </span>的最小公倍数是<span class="number"> 6 </span>。注意数字会是它自身的倍数。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 150</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">smallestEvenMultiple</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*n; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2236-判断根结点是否等于子结点之和"><a href="#2236-判断根结点是否等于子结点之和" class="headerlink" title="2236. 判断根结点是否等于子结点之和"></a><a href="https://leetcode.cn/problems/root-equals-sum-of-children/">2236. 判断根结点是否等于子结点之和</a></h3><blockquote>
<p>给你一个 <strong>二叉树</strong> 的根结点 <code>root</code>，该二叉树由恰好 <code>3</code> 个结点组成：根结点、左子结点和右子结点。</p>
<p>如果根结点值等于两个子结点值之和，返回 <code>true</code> ，否则返回 <code>false</code> 。</p>
<p><strong>示例 1：</strong></p>
<p><img src="/posts/%E3%80%8C%E6%96%B0%E3%80%8D%E5%8A%A8%E8%AE%A1%E5%88%92%20%C2%B7%20%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8Java/graph3drawio.png" alt="img" loading="lazy"></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：root = [10,4,6]</span><br><span class="line">输出：true</span><br><span class="line">解释：根结点、左子结点和右子结点的值分别是<span class="number"> 10 </span>、4 和<span class="number"> 6 </span>。</span><br><span class="line">由于<span class="number"> 10 </span>等于<span class="number"> 4 </span>+<span class="number"> 6 </span>，因此返回 true 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="/posts/%E3%80%8C%E6%96%B0%E3%80%8D%E5%8A%A8%E8%AE%A1%E5%88%92%20%C2%B7%20%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8Java/graph3drawio-1.png" alt="img" loading="lazy"></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：root = [5,3,1]</span><br><span class="line">输出：false</span><br><span class="line">解释：根结点、左子结点和右子结点的值分别是<span class="number"> 5 </span>、3 和<span class="number"> 1 </span>。</span><br><span class="line">由于<span class="number"> 5 </span>不等于<span class="number"> 3 </span>+<span class="number"> 1 </span>，因此返回 false 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树只包含根结点、左子结点和右子结点</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.val==root.left.val+root.right.val?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="循环-循环嵌套"><a href="#循环-循环嵌套" class="headerlink" title="循环 &amp; 循环嵌套"></a>循环 &amp; 循环嵌套</h2><h2 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h2><h3 id="584-寻找用户推荐人"><a href="#584-寻找用户推荐人" class="headerlink" title="584. 寻找用户推荐人"></a><a href="https://leetcode.cn/problems/find-customer-referee/">584. 寻找用户推荐人</a></h3><blockquote>
<p>表: <code>Customer</code></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+-------------+</span>---------+</span><br><span class="line"><span class="section">| Column Name | Type    |</span></span><br><span class="line"><span class="section">+-------------+---------+</span></span><br><span class="line">| id          | int     |</span><br><span class="line">| name        | varchar |</span><br><span class="line"><span class="section">| referee_id  | int     |</span></span><br><span class="line"><span class="section">+-------------+---------+</span></span><br><span class="line">在 SQL 中，id 是该表的主键列。</span><br><span class="line">该表的每一行表示一个客户的 id、姓名以及推荐他们的客户的 id。</span><br></pre></td></tr></table></figure>

<p>找出那些 <strong>没有被</strong> <code>id = 2</code> 的客户 <strong>推荐</strong> 的客户的姓名。</p>
<p>以 <strong>任意顺序</strong> 返回结果表。</p>
<p>结果格式如下所示。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入： </span><br><span class="line">Customer 表:</span><br><span class="line">+----+------+------------+</span><br><span class="line">| id | name | referee_id |</span><br><span class="line">+----+------+------------+</span><br><span class="line">| 1  | Will | null       |</span><br><span class="line">| 2  | Jane | null       |</span><br><span class="line">| 3  | Alex | 2          |</span><br><span class="line">| 4  | Bill | null       |</span><br><span class="line">| 5  | Zack | 1          |</span><br><span class="line">| 6  | Mark | 2          |</span><br><span class="line">+----+------+------------+</span><br><span class="line">输出：</span><br><span class="line">+------+</span><br><span class="line">| name |</span><br><span class="line">+------+</span><br><span class="line">| Will |</span><br><span class="line">| Jane |</span><br><span class="line">| Bill |</span><br><span class="line">| Zack |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line">SELECT name</span><br><span class="line">FROM Customer</span><br><span class="line">where referee_id != 2 OR referee_id is null;</span><br></pre></td></tr></table></figure>

<p><strong>在SQL中，<code>&lt;&gt;</code> 和 <code>!=</code> 都可以用来表示“不等于”，它们在大多数情况下是等价的，但在某些数据库系统中可能会有细微的差异。通常情况下，两者可以互换使用。</strong></p>
<h3 id="1757-可回收且低脂的产品"><a href="#1757-可回收且低脂的产品" class="headerlink" title="1757. 可回收且低脂的产品"></a><a href="https://leetcode.cn/problems/recyclable-and-low-fat-products/">1757. 可回收且低脂的产品</a></h3><blockquote>
<p>表：<code>Products</code></p>
<figure class="highlight smalltalk"><table><tr><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| <span class="type">Column</span> <span class="type">Name</span> | <span class="type">Type</span>    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| product_id  | int     |</span><br><span class="line">| low_fats    | enum    |</span><br><span class="line">| recyclable  | enum    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">product_id 是该表的主键（具有唯一值的列）。</span><br><span class="line">low_fats 是枚举类型，取值为以下两种 (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;N&#x27;</span>)，其中 <span class="string">&#x27;Y&#x27;</span> 表示该产品是低脂产品，<span class="string">&#x27;N&#x27;</span> 表示不是低脂产品。</span><br><span class="line">recyclable 是枚举类型，取值为以下两种 (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;N&#x27;</span>)，其中 <span class="string">&#x27;Y&#x27;</span> 表示该产品可回收，而 <span class="string">&#x27;N&#x27;</span> 表示不可回收。</span><br></pre></td></tr></table></figure>

<p>编写解决方案找出既是低脂又是可回收的产品编号。</p>
<p>返回结果 <strong>无顺序要求</strong> 。</p>
<p>返回结果格式如下例所示：</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Products 表：</span><br><span class="line">+-------------+----------+------------+</span><br><span class="line">| product_id  | low_fats | recyclable |</span><br><span class="line">+-------------+----------+------------+</span><br><span class="line">| 0           | Y        | N          |</span><br><span class="line">| 1           | Y        | Y          |</span><br><span class="line">| 2           | N        | Y          |</span><br><span class="line">| 3           | Y        | Y          |</span><br><span class="line">| 4           | N        | N          |</span><br><span class="line">+-------------+----------+------------+</span><br><span class="line">输出：</span><br><span class="line">+-------------+</span><br><span class="line">| product_id  |</span><br><span class="line">+-------------+</span><br><span class="line">| 1           |</span><br><span class="line">| 3           |</span><br><span class="line">+-------------+</span><br><span class="line">解释：</span><br><span class="line">只有产品 id 为 1 和 3 的产品，既是低脂又是可回收的产品。</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line">SELECT product_id</span><br><span class="line">FROM Products</span><br><span class="line">WHERE low_fats=&#x27;Y&#x27; AND recyclable=&#x27;Y&#x27;;</span><br></pre></td></tr></table></figure>



<h2 id="位运算；ASCII-码"><a href="#位运算；ASCII-码" class="headerlink" title="位运算；ASCII 码"></a>位运算；ASCII 码</h2><h3 id="709-转换成小写字母"><a href="#709-转换成小写字母" class="headerlink" title="709. 转换成小写字母"></a><a href="https://leetcode.cn/problems/to-lower-case/">709. 转换成小写字母</a></h3><blockquote>
<p>给你一个字符串 <code>s</code> ，将该字符串中的大写字母转换成相同的小写字母，返回新的字符串。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">输入：s <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line">输出：<span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">输入：s <span class="operator">=</span> <span class="string">&quot;here&quot;</span></span><br><span class="line">输出：<span class="string">&quot;here&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">输入：s <span class="operator">=</span> <span class="string">&quot;LOVELY&quot;</span></span><br><span class="line">输出：<span class="string">&quot;lovely&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 100</code></li>
<li><code>s</code> 由 ASCII 字符集中的可打印字符组成</li>
</ul>
</blockquote>
<p><em>方法一</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toLowerCase</span><span class="params">(String s)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> s.toLowerCase();</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>toLowerCase()</code> 是 Java 中 <code>String</code> 类的一个方法，用于将字符串中的所有大写字母转换为小写字母。这个方法不会修改原始字符串，而是返回一个新的字符串，其中所有的大写字母都被转换为小写字母。</p>
</blockquote>
<p><em>方法二</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toLowerCase</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个可变的字符串缓冲区来存储结果</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历输入字符串中的每个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果字符是大写字母，将其转换为小写字母</span></span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">                ch = (<span class="type">char</span>) (ch + (<span class="string">&#x27;a&#x27;</span> - <span class="string">&#x27;A&#x27;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将字符添加到结果缓冲区</span></span><br><span class="line">            result.append(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回转换后的字符串</span></span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>StringBuilder</code> 是 Java 中的一个类，用于处理可变的字符序列。与 <code>String</code> 类不同，<code>StringBuilder</code> 对象的内容可以被修改，而不需要创建新的对象。这使得 <code>StringBuilder</code> 在处理大量字符串拼接和修改时非常高效。</p>
<h3 id="主要方法："><a href="#主要方法：" class="headerlink" title="主要方法："></a>主要方法：</h3><ol>
<li><p><strong>构造方法</strong>：</p>
<ul>
<li><code>StringBuilder()</code>: 创建一个空的 <code>StringBuilder</code> 对象。</li>
<li><code>StringBuilder(int capacity)</code>: 创建一个指定初始容量的 <code>StringBuilder</code> 对象。</li>
<li><code>StringBuilder(String str)</code>: 创建一个包含指定字符串内容的 <code>StringBuilder</code> 对象。</li>
</ul>
</li>
<li><p><strong>常用方法</strong>：</p>
<ul>
<li><code>append(String str)</code>: 将指定的字符串追加到当前 <code>StringBuilder</code> 对象的末尾。</li>
<li><code>insert(int offset, String str)</code>: 在指定位置插入指定的字符串。</li>
<li><code>delete(int start, int end)</code>: 删除指定范围内的字符。</li>
<li><code>replace(int start, int end, String str)</code>: 用指定的字符串替换指定范围内的字符。</li>
<li><code>reverse()</code>: 反转 <code>StringBuilder</code> 对象中的字符序列。</li>
<li><code>toString()</code>: 将 <code>StringBuilder</code> 对象转换为 <code>String</code> 对象。</li>
</ul>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul>
<li><strong>高效性</strong>：<code>StringBuilder</code> 在处理大量字符串拼接和修改时比 <code>String</code> 更高效，因为它避免了创建多个中间字符串对象。</li>
<li><strong>可变性</strong>：<code>StringBuilder</code> 对象的内容可以被修改，而不需要创建新的对象，这使得它在处理动态字符串时非常方便。</li>
</ul>
<h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><ul>
<li><strong>字符串拼接</strong>：在需要频繁拼接字符串的场景中，使用 <code>StringBuilder</code> 可以提高性能。</li>
<li><strong>动态字符串处理</strong>：在需要动态修改字符串内容的场景中，使用 <code>StringBuilder</code> 可以简化代码。</li>
<li><strong>性能优化</strong>：在处理大量字符串操作时，使用 <code>StringBuilder</code> 可以显著提高程序的性能。</li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="数学：取余"><a href="#数学：取余" class="headerlink" title="数学：取余"></a>数学：取余</h2><h3 id="258-各位相加"><a href="#258-各位相加" class="headerlink" title="258. 各位相加"></a><a href="https://leetcode.cn/problems/add-digits/">258. 各位相加</a></h3><blockquote>
<p>给定一个非负整数 <code>num</code>，反复将各个位上的数字相加，直到结果为一位数。返回这个结果。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入: num = 38</span><br><span class="line">输出:<span class="number"> 2 </span></span><br><span class="line">解释: 各位相加的过程为：</span><br><span class="line">38 --&gt;<span class="number"> 3 </span>+<span class="number"> 8 </span>--&gt; 11</span><br><span class="line">11 --&gt;<span class="number"> 1 </span>+<span class="number"> 1 </span>--&gt; 2</span><br><span class="line">由于<span class="number"> 2 </span>是一位数，所以返回 2。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: num = 0</span></span><br><span class="line"><span class="section">输出: 0</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= num &lt;= 231 - 1</code></li>
</ul>
<p><strong>进阶：</strong>你可以不使用循环或者递归，在 <code>O(1)</code> 时间复杂度内解决这个问题吗？</p>
</blockquote>
<p><em>方法一</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个非负整数的各位数字相加，直到结果为一位数。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 输入的非负整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最终的一位数结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addDigits</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="comment">// 当 num 大于等于 10 时，继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (num &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">// 调用 Sum 方法计算 num 的各位数字之和，并将结果赋值给 num</span></span><br><span class="line">            num = Sum(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回最终的一位数结果</span></span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算一个非负整数的各位数字之和。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 输入的非负整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 各位数字之和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Sum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化结果为 0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 当 num 大于 0 时，继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 将 num 的最后一位数字加到 result 中</span></span><br><span class="line">            result = num % <span class="number">10</span> + result;</span><br><span class="line">            <span class="comment">// 去掉 num 的最后一位数字</span></span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回各位数字之和</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>方法二</em></p>
<blockquote>
<h3 id="数字根公式："><a href="#数字根公式：" class="headerlink" title="数字根公式："></a>数字根公式：</h3><p>对于一个非负整数 <code>num</code>，其数字根可以通过以下公式计算：</p>
<p>digital root(num)&#x3D;1+(num−1)%9</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addDigits</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用数字根公式直接计算结果</span></span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + (num - <span class="number">1</span>) % <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="详细解释："><a href="#详细解释：" class="headerlink" title="详细解释："></a>详细解释：</h3><ol>
<li><strong>特殊情况处理</strong>：<ul>
<li>如果 <code>num</code> 为 0，数字根为 0。</li>
</ul>
</li>
<li><strong>一般情况处理</strong>：<ul>
<li>对于 <code>num</code> 不是 0 的情况，使用公式 <code>1 + (num - 1) % 9</code> 计算数字根。</li>
<li><code>(num - 1) % 9</code> 的结果在 <code>-1</code> 到 <code>8</code> 之间。</li>
<li>加上 1 后，结果在 <code>0</code> 到 <code>9</code> 之间。</li>
<li>这样处理可以确保 <code>num</code> 是 9 的倍数时，结果为 9，而不是 0。</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="1281-整数的各位积和之差"><a href="#1281-整数的各位积和之差" class="headerlink" title="1281. 整数的各位积和之差"></a><a href="https://leetcode.cn/problems/subtract-the-product-and-sum-of-digits-of-an-integer/">1281. 整数的各位积和之差</a></h3><blockquote>
<p>给你一个整数 <code>n</code>，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：n = 234</span><br><span class="line">输出：15 </span><br><span class="line">解释：</span><br><span class="line">各位数之积 =<span class="number"> 2 </span>*<span class="number"> 3 </span>*<span class="number"> 4 </span>=<span class="number"> 24 </span></span><br><span class="line">各位数之和 =<span class="number"> 2 </span>+<span class="number"> 3 </span>+<span class="number"> 4 </span>=<span class="number"> 9 </span></span><br><span class="line">结果 =<span class="number"> 24 </span>-<span class="number"> 9 </span>= 15</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：n = 4421</span><br><span class="line">输出：21</span><br><span class="line">解释： </span><br><span class="line">各位数之积 =<span class="number"> 4 </span>*<span class="number"> 4 </span>*<span class="number"> 2 </span>*<span class="number"> 1 </span>=<span class="number"> 32 </span></span><br><span class="line">各位数之和 =<span class="number"> 4 </span>+<span class="number"> 4 </span>+<span class="number"> 2 </span>+<span class="number"> 1 </span>=<span class="number"> 11 </span></span><br><span class="line">结果 =<span class="number"> 32 </span>-<span class="number"> 11 </span>= 21</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 10^5</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算一个整数的各位数字的乘积与各位数字的和的差值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 输入的整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 各位数字的乘积与各位数字的和的差值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtractProductAndSum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 计算各位数字的乘积</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">product</span> <span class="operator">=</span> Product(n);</span><br><span class="line">        <span class="comment">// 计算各位数字的和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Sum(n);</span><br><span class="line">        <span class="comment">// 返回乘积与和的差值</span></span><br><span class="line">        <span class="keyword">return</span> product - sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算一个整数的各位数字的乘积。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 输入的整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 各位数字的乘积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Product</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化乘积为 1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 当 n 大于 0 时，继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 将 n 的最后一位数字乘到 res 中</span></span><br><span class="line">            res *= n % <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// 去掉 n 的最后一位数字</span></span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回各位数字的乘积</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算一个整数的各位数字的和。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 输入的整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 各位数字的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Sum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化和为 0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 当 n 大于 0 时，继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 将 n 的最后一位数字加到 res 中</span></span><br><span class="line">            res += n % <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// 去掉 n 的最后一位数字</span></span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回各位数字的和</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>官方解</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算一个整数的各位数字的乘积与各位数字的和的差值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 输入的整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 各位数字的乘积与各位数字的和的差值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtractProductAndSum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化乘积 m 为 1，和 s 为 0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>, s = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 当 n 不为 0 时，继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取 n 的最后一位数字</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> n % <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// 去掉 n 的最后一位数字</span></span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">            <span class="comment">// 将最后一位数字乘到乘积 m 中</span></span><br><span class="line">            m *= x;</span><br><span class="line">            <span class="comment">// 将最后一位数字加到和 s 中</span></span><br><span class="line">            s += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回乘积与和的差值</span></span><br><span class="line">        <span class="keyword">return</span> m - s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数学：因数与倍数"><a href="#数学：因数与倍数" class="headerlink" title="数学：因数与倍数"></a>数学：因数与倍数</h2><h3 id="231-2-的幂"><a href="#231-2-的幂" class="headerlink" title="231. 2 的幂"></a><a href="https://leetcode.cn/problems/power-of-two/">231. 2 的幂</a></h3><blockquote>
<p>给你一个整数 <code>n</code>，请你判断该整数是否是 2 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>如果存在一个整数 <code>x</code> 使得 <code>n == 2x</code> ，则认为 <code>n</code> 是 2 的幂次方。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">输入：n <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">输出：true</span><br><span class="line">解释：<span class="number">20</span> <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">输入：n <span class="operator">=</span> <span class="number">16</span></span><br><span class="line">输出：true</span><br><span class="line">解释：<span class="number">24</span> <span class="operator">=</span> <span class="number">16</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">n</span> = <span class="number">3</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>-231 &lt;= n &lt;= 231 - 1</code></li>
</ul>
<p><strong>进阶：</strong>你能够不使用循环&#x2F;递归解决此问题吗？</p>
</blockquote>
<p><em>方法一</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">1</span>,target=n;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            a*=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(a==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>方法二</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算以 2 为底的对数</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">log2</span> <span class="operator">=</span> Math.log(n) / Math.log(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 判断 log2 是否为整数</span></span><br><span class="line">        <span class="keyword">return</span> log2 == Math.floor(log2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>让我们分析一下为什么在某些情况下，使用 <code>Math.log(n) / Math.log(2)</code> 可能会导致错误的结果。</p>
<h3 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h3><p>在计算机中，浮点数的计算可能会引入舍入误差。即使理论上 <code>Math.log(n) / Math.log(2)</code> 应该是一个整数，由于浮点数的精度限制，实际计算结果可能会略微偏离整数值，导致判断失败。</p>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>为了避免浮点数计算的舍入误差，我们可以使用位运算来判断一个数是否是 2 的幂。这种方法不仅效率高，而且不会受到浮点数精度的影响。</p>
</blockquote>
<p><em>方法三</em></p>
<blockquote>
<h3 id="位运算方法："><a href="#位运算方法：" class="headerlink" title="位运算方法："></a>位运算方法：</h3><p>一个数 <code>n</code> 是 2 的幂，当且仅当 <code>n</code> 是正数，并且 <code>n</code> 的二进制表示中只有一个 1。例如：</p>
<ul>
<li>1 的二进制表示是 <code>0001</code></li>
<li>2 的二进制表示是 <code>0010</code></li>
<li>4 的二进制表示是 <code>0100</code></li>
<li>8 的二进制表示是 <code>1000</code></li>
</ul>
<p>我们可以通过以下位运算来判断一个数是否是 2 的幂：</p>
<ul>
<li><code>n &amp; (n - 1)</code> 的结果为 0。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 确保 n 是正数，并且 n 的二进制表示中只有一个 1</span></span><br><span class="line">        <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><ol>
<li>**<code>n &gt; 0</code>**：确保 <code>n</code> 是正数。</li>
<li>**<code>(n &amp; (n - 1)) == 0</code>**：判断 <code>n</code> 的二进制表示中是否只有一个 1。</li>
</ol>
<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p>假设输入 <code>n</code> 为 536870912，我们来验证这个方法：</p>
<ul>
<li><code>n = 536870912</code></li>
<li><code>n - 1 = 536870911</code></li>
<li><code>n &amp; (n - 1) = 536870912 &amp; 536870911 = 0</code></li>
</ul>
<p>所以，536870912 是 2 的幂。</p>
</blockquote>
<h3 id="326-3-的幂"><a href="#326-3-的幂" class="headerlink" title="326. 3 的幂"></a><a href="https://leetcode.cn/problems/power-of-three/">326. 3 的幂</a></h3><blockquote>
<p>给定一个整数，写一个函数来判断它是否是 3 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>整数 <code>n</code> 是 3 的幂次方需满足：存在整数 <code>x</code> 使得 <code>n == 3x</code></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">n</span> = <span class="number">27</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">n</span> = <span class="number">0</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">n</span> = <span class="number">9</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">n</span> = <span class="number">45</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>-231 &lt;= n &lt;= 231 - 1</code></li>
</ul>
<p><strong>进阶：</strong>你能不使用循环或者递归来完成本题吗？</p>
</blockquote>
<p><em>解法</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断一个整数是否是 3 的幂。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 输入的整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果 n 是 3 的幂，返回 true；否则返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfThree</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果 n 小于或等于 0，直接返回 false，因为 3 的幂必须是正数</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 初始化 x 为 1，tag 为 n</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>, tag = n;</span><br><span class="line">        <span class="comment">// 如果 n 等于 1，直接返回 true，因为 1 是 3 的 0 次幂</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 当 n 大于 0 时，继续循环</span></span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果 x 等于 tag，返回 true，表示 n 是 3 的幂</span></span><br><span class="line">            <span class="keyword">if</span> (x == tag) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 将 x 乘以 3</span></span><br><span class="line">            x *= <span class="number">3</span>;</span><br><span class="line">            <span class="comment">// 将 n 除以 3</span></span><br><span class="line">            n /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果循环结束时 x 不等于 tag，返回 false，表示 n 不是 3 的幂</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>优化</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPowerOfThree</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span> &amp;&amp; n % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            n /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="263-丑数"><a href="#263-丑数" class="headerlink" title="263. 丑数"></a><a href="https://leetcode.cn/problems/ugly-number/">263. 丑数</a></h3><blockquote>
<p><strong>丑数</strong> 就是只包含质因数 <code>2</code>、<code>3</code> 和 <code>5</code> 的正整数。</p>
<p>给你一个整数 <code>n</code> ，请你判断 <code>n</code> 是否为 <strong>丑数</strong> 。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">输入：n = 6</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">输出：<span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">解释：6 = 2 × 3</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">输入：n = 1</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">输出：<span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">解释：1 没有质因数，因此它的全部质因数是 &#123;2, 3, 5&#125; 的空集。习惯上将其视作第一个丑数。</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">输入：n = 14</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">输出：<span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">解释：14 不是丑数，因为它包含了另外一个质因数 7 。</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>-231 &lt;= n &lt;= 231 - 1</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUgly</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(n%<span class="number">2</span>==<span class="number">0</span>||n%<span class="number">3</span>==<span class="number">0</span>||n%<span class="number">5</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) n/=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (n%<span class="number">3</span>==<span class="number">0</span>) n/=<span class="number">3</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (n%<span class="number">5</span>==<span class="number">0</span>) n/=<span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n==<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>优化解法</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUgly</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] factors = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> factor : factors) &#123;</span><br><span class="line">            <span class="keyword">while</span> (n % factor == <span class="number">0</span>) &#123;</span><br><span class="line">                n /= factor;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组-矩阵"><a href="#数组-矩阵" class="headerlink" title="数组 &amp; 矩阵"></a>数组 &amp; 矩阵</h2><h3 id="1470-重新排列数组"><a href="#1470-重新排列数组" class="headerlink" title="1470. 重新排列数组"></a><a href="https://leetcode.cn/problems/shuffle-the-array/">1470. 重新排列数组</a></h3><blockquote>
<p>给你一个数组 <code>nums</code> ，数组中有 <code>2n</code> 个元素，按 <code>[x1,x2,...,xn,y1,y2,...,yn]</code> 的格式排列。</p>
<p>请你将数组按 <code>[x1,y1,x2,y2,...,xn,yn]</code> 格式重新排列，返回重排后的数组。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,5,1,3,4,7], n = 3</span><br><span class="line">输出：[2,3,5,4,1,7] </span><br><span class="line">解释：由于 <span class="attribute">x1</span>=2, <span class="attribute">x2</span>=5, <span class="attribute">x3</span>=1, <span class="attribute">y1</span>=3, <span class="attribute">y2</span>=4, <span class="attribute">y3</span>=7 ，所以答案为 [2,3,5,4,1,7]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">1,2,3,4</span>,<span class="number">4,3,2,1</span>], n = <span class="number">4</span></span><br><span class="line">输出：[<span class="number">1,4,2,3</span>,<span class="number">3,2,4,1</span>]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="number">1,1,2,2</span>], n = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1,2,1,2</span>]</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 500</code></li>
<li><code>nums.length == 2n</code></li>
<li><code>1 &lt;= nums[i] &lt;= 10^3</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] shuffle(<span class="type">int</span>[] nums, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>*n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;n;i++,j+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[j]=nums[i];</span><br><span class="line">            arr[j+<span class="number">1</span>]=nums[i+n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="867-转置矩阵"><a href="#867-转置矩阵" class="headerlink" title="867. 转置矩阵"></a><a href="https://leetcode.cn/problems/transpose-matrix/">867. 转置矩阵</a></h3><blockquote>
<p>给你一个二维整数数组 <code>matrix</code>， 返回 <code>matrix</code> 的 <strong>转置矩阵</strong> 。</p>
<p>矩阵的 <strong>转置</strong> 是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。</p>
<p><img src="/posts/%E3%80%8C%E6%96%B0%E3%80%8D%E5%8A%A8%E8%AE%A1%E5%88%92%20%C2%B7%20%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8Java/hint_transpose.png" alt="img" loading="lazy"></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">输入：matrix = <span class="string">[[1,2,3],[4,5,6],[7,8,9]]</span></span><br><span class="line">输出：<span class="string">[[1,4,7],[2,5,8],[3,6,9]]</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">输入：matrix = <span class="string">[[1,2,3],[4,5,6]]</span></span><br><span class="line">输出：<span class="string">[[1,4],[2,5],[3,6]]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>m == matrix.length</code></li>
<li><code>n == matrix[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 1000</code></li>
<li><code>1 &lt;= m * n &lt;= 10^5</code></li>
<li><code>-10^9 &lt;= matrix[i][j] &lt;= 10^9</code></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个矩阵进行转置。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matrix 输入的矩阵</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转置后的矩阵</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] transpose(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line">        <span class="comment">// 获取矩阵的行数和列数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// 创建一个新的矩阵，用于存储转置后的结果</span></span><br><span class="line">        <span class="type">int</span>[][] transposed = <span class="keyword">new</span> <span class="title class_">int</span>[n][m];</span><br><span class="line">        <span class="comment">// 遍历原矩阵的每个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="comment">// 将原矩阵的元素 (i, j) 放到转置矩阵的 (j, i) 位置</span></span><br><span class="line">                transposed[j][i] = matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回转置后的矩阵</span></span><br><span class="line">        <span class="keyword">return</span> transposed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="解释：-1"><a href="#解释：-1" class="headerlink" title="解释："></a>解释：</h3><ol>
<li><p><strong>方法注释</strong>：</p>
<ul>
<li><strong>功能</strong>：将一个矩阵进行转置。</li>
<li><strong>参数</strong>：<code>matrix</code> 输入的矩阵。</li>
<li><strong>返回值</strong>：转置后的矩阵。</li>
</ul>
</li>
<li><p><strong>获取矩阵的行数和列数</strong>：</p>
<ul>
<li><code>int m = matrix.length;</code>：获取矩阵的行数。</li>
<li><code>int n = matrix[0].length;</code>：获取矩阵的列数。</li>
</ul>
</li>
<li><p><strong>创建转置矩阵</strong>：</p>
<ul>
<li><code>int[][] transposed = new int[n][m];</code>：创建一个新的矩阵 <code>transposed</code>，用于存储转置后的结果。转置矩阵的行数等于原矩阵的列数，列数等于原矩阵的行数。</li>
</ul>
</li>
<li><p><strong>遍历原矩阵的每个元素</strong>：</p>
<ul>
<li><code>for (int i = 0; i &lt; m; i++)</code>：遍历原矩阵的每一行。</li>
<li><code>for (int j = 0; j &lt; n; j++)</code>：遍历原矩阵的每一列。</li>
<li><code>transposed[j][i] = matrix[i][j];</code>：将原矩阵的元素 <code>(i, j)</code> 放到转置矩阵的 <code>(j, i)</code> 位置。</li>
</ul>
</li>
<li><p><strong>返回转置后的矩阵</strong>：</p>
<ul>
<li><code>return transposed;</code>：返回转置后的矩阵。</li>
</ul>
<h3 id="解释：-2"><a href="#解释：-2" class="headerlink" title="解释："></a>解释：</h3><ul>
<li>原矩阵的元素 <code>(0, 0)</code> 为 1，转置后放到 <code>(0, 0)</code> 位置。</li>
<li>原矩阵的元素 <code>(0, 1)</code> 为 2，转置后放到 <code>(1, 0)</code> 位置。</li>
<li>原矩阵的元素 <code>(0, 2)</code> 为 3，转置后放到 <code>(2, 0)</code> 位置。</li>
<li>原矩阵的元素 <code>(1, 0)</code> 为 4，转置后放到 <code>(0, 1)</code> 位置。</li>
<li>原矩阵的元素 <code>(1, 1)</code> 为 5，转置后放到 <code>(1, 1)</code> 位置。</li>
<li>原矩阵的元素 <code>(1, 2)</code> 为 6，转置后放到 <code>(2, 1)</code> 位置。</li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="数组-字符串"><a href="#数组-字符串" class="headerlink" title="数组 &amp; 字符串"></a>数组 &amp; 字符串</h2><h3 id="1422-分割字符串的最大得分"><a href="#1422-分割字符串的最大得分" class="headerlink" title="1422. 分割字符串的最大得分"></a><a href="https://leetcode.cn/problems/maximum-score-after-splitting-a-string/">1422. 分割字符串的最大得分</a></h3><blockquote>
<p>给你一个由若干 0 和 1 组成的字符串 <code>s</code> ，请你计算并返回将该字符串分割成两个 <strong>非空</strong> 子字符串（即 <strong>左</strong> 子字符串和 <strong>右</strong> 子字符串）所能获得的最大得分。</p>
<p>「分割字符串的得分」为 <strong>左</strong> 子字符串中 <strong>0</strong> 的数量加上 <strong>右</strong> 子字符串中 <strong>1</strong> 的数量。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;011101&quot;</span><br><span class="line">输出：5 </span><br><span class="line">解释：</span><br><span class="line">将字符串 s 划分为两个非空子字符串的可行方案有：</span><br><span class="line">左子字符串 = &quot;0&quot; 且 右子字符串 = &quot;11101&quot;，得分 =<span class="number"> 1 </span>+<span class="number"> 4 </span>=<span class="number"> 5 </span></span><br><span class="line">左子字符串 = &quot;01&quot; 且 右子字符串 = &quot;1101&quot;，得分 =<span class="number"> 1 </span>+<span class="number"> 3 </span>=<span class="number"> 4 </span></span><br><span class="line">左子字符串 = &quot;011&quot; 且 右子字符串 = &quot;101&quot;，得分 =<span class="number"> 1 </span>+<span class="number"> 2 </span>=<span class="number"> 3 </span></span><br><span class="line">左子字符串 = &quot;0111&quot; 且 右子字符串 = &quot;01&quot;，得分 =<span class="number"> 1 </span>+<span class="number"> 1 </span>=<span class="number"> 2 </span></span><br><span class="line">左子字符串 = &quot;01110&quot; 且 右子字符串 = &quot;1&quot;，得分 =<span class="number"> 2 </span>+<span class="number"> 1 </span>= 3</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;00111&quot;</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：当 左子字符串 = <span class="string">&quot;00&quot;</span> 且 右子字符串 = <span class="string">&quot;111&quot;</span> 时，我们得到最大得分 = <span class="number">2</span> + <span class="number">3</span> = <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">输入：s <span class="operator">=</span> <span class="string">&quot;1111&quot;</span></span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= s.length &lt;= 500</code></li>
<li>字符串 <code>s</code> 仅由字符 <code>&#39;0&#39;</code> 和 <code>&#39;1&#39;</code> 组成。</li>
</ul>
</blockquote>
<p><strong>字符串定位用.charAt(i)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxScore</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i+<span class="number">1</span>&amp;&amp;i+<span class="number">1</span>&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(j)==<span class="string">&#x27;0&#x27;</span>) flag++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=n-<span class="number">1</span>;j&gt;i;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(j)==<span class="string">&#x27;1&#x27;</span>) flag++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag&gt;max) max=flag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxScore</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(j) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                    score++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(j) == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    score++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, score);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2586-统计范围内的元音字符串数"><a href="#2586-统计范围内的元音字符串数" class="headerlink" title="2586. 统计范围内的元音字符串数"></a><a href="https://leetcode.cn/problems/count-the-number-of-vowel-strings-in-range/">2586. 统计范围内的元音字符串数</a></h3><blockquote>
<p>给你一个下标从 <strong>0</strong> 开始的字符串数组 <code>words</code> 和两个整数：<code>left</code> 和 <code>right</code> 。</p>
<p>如果字符串以元音字母开头并以元音字母结尾，那么该字符串就是一个 <strong>元音字符串</strong> ，其中元音字母是 <code>&#39;a&#39;</code>、<code>&#39;e&#39;</code>、<code>&#39;i&#39;</code>、<code>&#39;o&#39;</code>、<code>&#39;u&#39;</code> 。</p>
<p>返回 <code>words[i]</code> 是元音字符串的数目，其中 <code>i</code> 在闭区间 <code>[left, right]</code> 内。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">输入：<span class="keyword">words</span> = [<span class="string">&quot;are&quot;</span>,<span class="string">&quot;amy&quot;</span>,<span class="string">&quot;u&quot;</span>], left = <span class="number">0</span>, <span class="literal">right</span> = <span class="number">2</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：</span><br><span class="line">- <span class="string">&quot;are&quot;</span> 是一个元音字符串，因为它以 <span class="string">&#x27;a&#x27;</span> 开头并以 <span class="string">&#x27;e&#x27;</span> 结尾。</span><br><span class="line">- <span class="string">&quot;amy&quot;</span> 不是元音字符串，因为它没有以元音字母结尾。</span><br><span class="line">- <span class="string">&quot;u&quot;</span> 是一个元音字符串，因为它以 <span class="string">&#x27;u&#x27;</span> 开头并以 <span class="string">&#x27;u&#x27;</span> 结尾。</span><br><span class="line">在上述范围中的元音字符串数目为 <span class="number">2</span> 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">输入：<span class="keyword">words</span> = [<span class="string">&quot;hey&quot;</span>,<span class="string">&quot;aeo&quot;</span>,<span class="string">&quot;mu&quot;</span>,<span class="string">&quot;ooo&quot;</span>,<span class="string">&quot;artro&quot;</span>], left = <span class="number">1</span>, <span class="literal">right</span> = <span class="number">4</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：</span><br><span class="line">- <span class="string">&quot;aeo&quot;</span> 是一个元音字符串，因为它以 <span class="string">&#x27;a&#x27;</span> 开头并以 <span class="string">&#x27;o&#x27;</span> 结尾。</span><br><span class="line">- <span class="string">&quot;mu&quot;</span> 不是元音字符串，因为它没有以元音字母开头。</span><br><span class="line">- <span class="string">&quot;ooo&quot;</span> 是一个元音字符串，因为它以 <span class="string">&#x27;o&#x27;</span> 开头并以 <span class="string">&#x27;o&#x27;</span> 结尾。</span><br><span class="line">- <span class="string">&quot;artro&quot;</span> 是一个元音字符串，因为它以 <span class="string">&#x27;a&#x27;</span> 开头并以 <span class="string">&#x27;o&#x27;</span> 结尾。</span><br><span class="line">在上述范围中的元音字符串数目为 <span class="number">3</span> 。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= words.length &lt;= 1000</code></li>
<li><code>1 &lt;= words[i].length &lt;= 10</code></li>
<li><code>words[i]</code> 仅由小写英文字母组成</li>
<li><code>0 &lt;= left &lt;= right &lt; words.length</code></li>
</ul>
</blockquote>
<p><strong>暴力破解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">vowelStrings</span><span class="params">(String[] words, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x=words[left].length()-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>((words[left].charAt(<span class="number">0</span>)==<span class="string">&#x27;a&#x27;</span>||words[left].charAt(<span class="number">0</span>)==<span class="string">&#x27;e&#x27;</span>||words[left].charAt(<span class="number">0</span>)==<span class="string">&#x27;u&#x27;</span>||words[left].charAt(<span class="number">0</span>)==<span class="string">&#x27;i&#x27;</span>||words[left].charAt(<span class="number">0</span>)==<span class="string">&#x27;o&#x27;</span>)&amp;&amp;(words[left].charAt(x)==<span class="string">&#x27;a&#x27;</span>||words[left].charAt(x)==<span class="string">&#x27;e&#x27;</span>||words[left].charAt(x)==<span class="string">&#x27;u&#x27;</span>||words[left].charAt(x)==<span class="string">&#x27;i&#x27;</span>||words[left].charAt(x)==<span class="string">&#x27;o&#x27;</span>))</span><br><span class="line">            flag++;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>官方</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算字符串数组中从 left 到 right 范围内的每个字符串是否以元音字母开头和结尾。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> words 字符串数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  起始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 结束索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 符合条件的字符串数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">vowelStrings</span><span class="params">(String[] words, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 HashSet 存储元音字母</span></span><br><span class="line">        Set&lt;Character&gt; vowels = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Character&gt;() &#123;&#123;</span><br><span class="line">            add(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            add(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">            add(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">            add(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">            add(<span class="string">&#x27;u&#x27;</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        <span class="comment">// 初始化计数器</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遍历字符串数组中从 left 到 right 范围内的每个字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; ++i) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> words[i];</span><br><span class="line">            <span class="comment">// 检查字符串的第一个字符和最后一个字符是否都在元音字母集合中</span></span><br><span class="line">            <span class="keyword">if</span> (vowels.contains(word.charAt(<span class="number">0</span>)) &amp;&amp; vowels.contains(word.charAt(word.length() - <span class="number">1</span>))) &#123;</span><br><span class="line">                <span class="comment">// 如果是，计数器加 1</span></span><br><span class="line">                ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回符合条件的字符串数量</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="代码思路："><a href="#代码思路：" class="headerlink" title="代码思路："></a>代码思路：</h3><p>这个代码的思路是通过使用一个 <code>Set</code> 来存储元音字母，然后遍历字符串数组 <code>words</code> 中从 <code>left</code> 到 <code>right</code> 范围内的每个字符串，检查字符串的第一个字符和最后一个字符是否都在 <code>Set</code> 中。如果是，则计数器加 1。解释：</p>
<ol>
<li><strong>方法注释</strong>：<ul>
<li><strong>功能</strong>：计算字符串数组中从 <code>left</code> 到 <code>right</code> 范围内的每个字符串是否以元音字母开头和结尾。</li>
<li><strong>参数</strong>：<ul>
<li><code>words</code>：字符串数组。</li>
<li><code>left</code>：起始索引。</li>
<li><code>right</code>：结束索引。</li>
</ul>
</li>
<li><strong>返回值</strong>：符合条件的字符串数量。</li>
</ul>
</li>
<li><strong>使用 <code>HashSet</code> 存储元音字母</strong>：<ul>
<li><code>Set&lt;Character&gt; vowels = new HashSet&lt;Character&gt;() &#123;&#123; add('a'); add('e'); add('i'); add('o'); add('u'); &#125;&#125;;</code>：创建一个 <code>HashSet</code>，并初始化元音字母 <code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;u&#39;</code>。</li>
</ul>
</li>
<li><strong>初始化计数器</strong>：<ul>
<li><code>int ans = 0;</code>：初始化计数器为 0。</li>
</ul>
</li>
<li><strong>遍历字符串数组中从 <code>left</code> 到 <code>right</code> 范围内的每个字符串</strong>：<ul>
<li><code>for (int i = left; i &lt;= right; ++i)</code>：遍历从 <code>left</code> 到 <code>right</code> 范围内的每个字符串。</li>
<li><code>String word = words[i];</code>：获取当前字符串。</li>
</ul>
</li>
<li><strong>检查字符串的第一个字符和最后一个字符是否都在元音字母集合中</strong>：<ul>
<li><code>if (vowels.contains(word.charAt(0)) &amp;&amp; vowels.contains(word.charAt(word.length() - 1)))</code>：检查字符串的第一个字符和最后一个字符是否都在 <code>vowels</code> 集合中。</li>
<li><code>++ans;</code>：如果是，计数器加 1。</li>
</ul>
</li>
<li><strong>返回符合条件的字符串数量</strong>：<ul>
<li><code>return ans;</code>：返回计数器的值。</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="852-山脉数组的峰顶索引"><a href="#852-山脉数组的峰顶索引" class="headerlink" title="852. 山脉数组的峰顶索引"></a><a href="https://leetcode.cn/problems/peak-index-in-a-mountain-array/">852. 山脉数组的峰顶索引</a></h3><blockquote>
<p>给定一个长度为 <code>n</code> 的整数 <strong>山脉</strong> 数组 <code>arr</code> ，其中的值递增到一个 <strong>峰值元素</strong> 然后递减。</p>
<p>返回峰值元素的下标。</p>
<p>你必须设计并实现时间复杂度为 <code>O(log(n))</code> 的解决方案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight fix"><table><tr><td class="code"><pre><span class="line"><span class="attr">输入：arr </span>=<span class="string"> [0,1,0]</span></span><br><span class="line"><span class="string">输出：1</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">输入：arr = [<span class="number">0,2,1,0</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">输入：arr = [<span class="number">0,10,5,2</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>3 &lt;= arr.length &lt;= 105</code></li>
<li><code>0 &lt;= arr[i] &lt;= 106</code></li>
<li>题目数据 <strong>保证</strong> <code>arr</code> 是一个山脉数组</li>
</ul>
</blockquote>
<p><strong>枚举</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peakIndexInMountainArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> max_index=<span class="number">0</span>,n=arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// if(arr.charAt(i)&lt;arr.charAt(i+1)) max=i+1;</span></span><br><span class="line">            <span class="comment">// else</span></span><br><span class="line">             <span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>])&#123; max_index=i; <span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>二分查找</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peakIndexInMountainArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>, right = n - <span class="number">2</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt; arr[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>空之境界</title>
    <url>/posts/%E7%A9%BA%E4%B9%8B%E5%A2%83%E7%95%8C/</url>
    <content><![CDATA[<p><img src="/posts/%E7%A9%BA%E4%B9%8B%E5%A2%83%E7%95%8C/d437d1dddb0c30c851e1741af02585236ee8758b.jpg" alt="d437d1dddb0c30c851e1741af02585236ee8758b" loading="lazy"></p>
<p>《空之境界》是由日本作家奈须蘑菇所著的一系列轻小说，原作是奈须蘑菇在1998年至1999年间于个人主页上连载的同人小说。后来由武内崇负责插画，并且被Type-Moon正式出版。这部作品以其深刻的主题、复杂的叙事结构以及丰富的象征意义而闻名，在读者中拥有很高的评价。</p>
<h3 id="故事概要"><a href="#故事概要" class="headerlink" title="故事概要"></a>故事概要</h3><p>《空之境界》的故事围绕着两仪家的继承者——两仪式（Ryougi Shiki）展开。故事开始时，式刚刚从长达两年的昏迷中醒来，她发现自己拥有了可以看到事物“死相”的能力。随着故事的发展，式与她的青梅竹马黑桐干也（Kokutou Mikiya）以及其他角色一起经历了一系列超自然事件，这些事件揭示了关于生命、死亡、自我认知等深层次的主题。</p>
<h3 id="深度分析"><a href="#深度分析" class="headerlink" title="深度分析"></a>深度分析</h3><h4 id="一、生死观与存在主义"><a href="#一、生死观与存在主义" class="headerlink" title="一、生死观与存在主义"></a>一、生死观与存在主义</h4><p>《空之境界》深入探讨了生死的意义。通过两仪式的眼睛，我们可以看到一个不同于常人的世界：每个物体都有其“线”，即生命的轨迹；当这些线断裂时，则意味着死亡的到来。这种设定不仅仅是一种视觉上的创新，更重要的是它反映了作者对于生死界限模糊化的一种思考方式。同时，《空之境界》也涉及到了个体如何面对自身存在的问题，特别是当主角们面临选择生存还是牺牲的时候，他们对自我价值的认知成为了推动剧情发展的重要因素之一。</p>
<h4 id="二、双重人格与身份认同"><a href="#二、双重人格与身份认同" class="headerlink" title="二、双重人格与身份认同"></a>二、双重人格与身份认同</h4><p>另一个值得关注的主题是关于身份认同和个人成长。两仪式拥有两个截然不同的人格：“男性”的冷静理性面和“女性”的温柔感性面。这两种性格之间的冲突及最终融合过程象征着一个人内心深处不同方面之间的斗争与和谐。此外，其他角色如荒耶宗莲等人也在探索自己真正的自我过程中扮演了重要角色，体现了寻找真实自我的艰难旅程。</p>
<h4 id="三、记忆与遗忘"><a href="#三、记忆与遗忘" class="headerlink" title="三、记忆与遗忘"></a>三、记忆与遗忘</h4><p>记忆与遗忘也是贯穿整个系列的关键主题之一。无论是因为某种原因失去记忆的角色，还是主动选择忘记某些痛苦回忆的人物，都在某种程度上反映了人类对于过去经历的态度。《空之境界》通过对记忆这一概念的独特诠释，引导读者思考记忆对我们塑造自我形象的重要性以及遗忘背后可能隐藏的情感创伤。</p>
<h4 id="四、哲学思辨与文学艺术"><a href="#四、哲学思辨与文学艺术" class="headerlink" title="四、哲学思辨与文学艺术"></a>四、哲学思辨与文学艺术</h4><p>除了上述提到的内容之外，《空之境界》还包含了大量的哲学讨论和文学引用。例如，“起源”、“无意识”等概念频繁出现于文本之中，显示出作者深厚的哲学功底。同时，书中也不乏对经典文学作品的致敬，如《爱丽丝梦游仙境》中的元素就被巧妙地融入到了故事情节里，为整部作品增添了几分神秘色彩。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>《空之境界》不仅是一部充满奇幻色彩的小说，更是一次深刻的精神之旅。通过细腻的心理描写、复杂的人物关系以及富有哲理性的对话，《空之境界》成功构建了一个既独立又相互联系的世界观体系。它挑战了传统意义上的善恶观念，鼓励人们勇敢地面对内心的黑暗面，并从中找到成长的力量。</p>
]]></content>
      <tags>
        <tag>动漫</tag>
      </tags>
  </entry>
  <entry>
    <title>魔女之旅</title>
    <url>/posts/%E9%AD%94%E5%A5%B3%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<h1 id="请别在意。我是旅人，得继续旅行才行"><a href="#请别在意。我是旅人，得继续旅行才行" class="headerlink" title="请别在意。我是旅人，得继续旅行才行!"></a>请别在意。我是旅人，得继续旅行才行!</h1><p><img src="/posts/%E9%AD%94%E5%A5%B3%E4%B9%8B%E6%97%85/Elaina.jpg" alt="Elaina" loading="lazy"></p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">《魔女之旅》（日语：魔女の旅々）是由白石定规创作、あずーる插画的一部轻小说，并有Drama <span class="built_in">CD</span>、漫画等衍生作品。</span><br><span class="line"></span><br><span class="line">原作介绍</span><br><span class="line"><span class="number">2014</span>年在Amazon Kindle首次公开，<span class="number">2016</span>年修正后单行本化。</span><br><span class="line"></span><br><span class="line">剧情简介</span><br><span class="line">某个地方有个正在旅行的魔女，她的名字是伊蕾娜。</span><br><span class="line">身为旅人，在很长很长的旅途中，她与形形色色的国家与人们邂逅。</span><br><span class="line"></span><br><span class="line">只允许魔法师入境的国家、</span><br><span class="line">最喜欢肌肉的壮汉、</span><br><span class="line">在死亡深渊等待恋人归来的青年、</span><br><span class="line">独自留守国家早已灭亡的公主…</span><br><span class="line"></span><br><span class="line">最后，还有她身为魔女的至今为止与从今以后。</span><br><span class="line">和莫名其妙、滑稽可笑的人们相遇，接触某人美丽的日常生活，魔女日复一日编织出相逢与离别的故事。</span><br><span class="line"></span><br><span class="line">——《第一卷导语》</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>动漫</tag>
      </tags>
  </entry>
</search>
